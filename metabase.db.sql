-- H2 2.1.214; 
SET DB_CLOSE_DELAY -1;         
;              
CREATE USER IF NOT EXISTS "" SALT '' HASH '' ADMIN;            
CREATE CACHED TABLE "PUBLIC"."DATABASECHANGELOG"(
    "ID" CHARACTER VARYING(255) NOT NULL,
    "AUTHOR" CHARACTER VARYING(255) NOT NULL,
    "FILENAME" CHARACTER VARYING(255) NOT NULL,
    "DATEEXECUTED" TIMESTAMP NOT NULL,
    "ORDEREXECUTED" INTEGER NOT NULL,
    "EXECTYPE" CHARACTER VARYING(10) NOT NULL,
    "MD5SUM" CHARACTER VARYING(35),
    "DESCRIPTION" CHARACTER VARYING(255),
    "COMMENTS" CHARACTER VARYING(255),
    "TAG" CHARACTER VARYING(255),
    "LIQUIBASE" CHARACTER VARYING(20),
    "CONTEXTS" CHARACTER VARYING(255),
    "LABELS" CHARACTER VARYING(255),
    "DEPLOYMENT_ID" CHARACTER VARYING(10)
);   
-- 623 +/- SELECT COUNT(*) FROM PUBLIC.DATABASECHANGELOG;      
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('1', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.703', 1, 'EXECUTED', '8:29a8f482877466643f65adb20c6d2139', 'createTable tableName=core_organization; createTable tableName=core_user; createTable tableName=core_userorgperm; addUniqueConstraint constraintName=idx_unique_user_id_organization_id, tableName=core_userorgperm; createIndex indexName=idx_userorgp...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('2', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.71', 2, 'EXECUTED', '8:983477ec51adb1236dd9d76ebf604be9', 'createTable tableName=core_session', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('4', 'cammsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.713', 3, 'EXECUTED', '8:a8e7822a91ea122212d376f5c2d4158f', 'createTable tableName=setting', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('5', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.722', 4, 'EXECUTED', '8:4f8653d16f4b102b3dff647277b6b988', 'addColumn tableName=core_organization', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('6', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.732', 5, 'EXECUTED', '8:2d2f5d1756ecb81da7c09ccfb9b1565a', 'dropNotNullConstraint columnName=organization_id, tableName=metabase_database; dropForeignKeyConstraint baseTableName=metabase_database, constraintName=fk_database_ref_organization_id; dropNotNullConstraint columnName=organization_id, tableName=re...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('7', 'cammsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.748', 6, 'EXECUTED', '8:c57c69fd78d804beb77d261066521f7f', 'addColumn tableName=metabase_field', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('8', 'tlrobinson', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.768', 7, 'EXECUTED', '8:960ec59bbcb4c9f3fa8362eca9af4075', 'addColumn tableName=metabase_table; addColumn tableName=metabase_field', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('9', 'tlrobinson', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.776', 8, 'EXECUTED', '8:d560283a190e3c60802eb04f5532a49d', 'addColumn tableName=metabase_table', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('10', 'cammsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.782', 9, 'EXECUTED', '8:532075ff1717d4a16bb9f27c606db46b', 'createTable tableName=revision; createIndex indexName=idx_revision_model_model_id, tableName=revision', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('11', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.785', 10, 'EXECUTED', '8:ca6561cab1eedbcf4dcb6d6e22cd46c6', 'sql', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('12', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.816', 11, 'EXECUTED', '8:e862a199cba5b4ce0cba713110f66cfb', 'addColumn tableName=report_card; addColumn tableName=report_card; addColumn tableName=report_card', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('13', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.823', 12, 'EXECUTED', '8:f3ae0bac98abb3288158ac45d85bf0e3', 'createTable tableName=activity; createIndex indexName=idx_activity_timestamp, tableName=activity; createIndex indexName=idx_activity_user_id, tableName=activity; createIndex indexName=idx_activity_custom_id, tableName=activity', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('14', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.83', 13, 'EXECUTED', '8:7dc558da864d98b79f8d13a427ca3858', 'createTable tableName=view_log; createIndex indexName=idx_view_log_user_id, tableName=view_log; createIndex indexName=idx_view_log_timestamp, tableName=view_log', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('15', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.837', 14, 'EXECUTED', '8:505b91530103673a9be3382cd2db1070', 'addColumn tableName=revision', '', NULL, '3.6.3', NULL, NULL, '9064126502');        
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('16', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.839', 15, 'EXECUTED', '8:b81df46fe16c3e8659a81798b97a4793', 'dropNotNullConstraint columnName=last_login, tableName=core_user', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('17', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.848', 16, 'EXECUTED', '8:051c23cd15359364b9895c1569c319e7', 'addColumn tableName=metabase_database; sql', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('18', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.851', 17, 'EXECUTED', '8:62a0483dde183cfd18dd0a86e9354288', 'createTable tableName=data_migrations; createIndex indexName=idx_data_migrations_id, tableName=data_migrations', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('19', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.86', 18, 'EXECUTED', '8:269b129dbfc39a6f9e0d3bc61c3c3b70', 'addColumn tableName=metabase_table', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('20', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.875', 19, 'EXECUTED', '8:7ec10b2c7acbab0fc38043be575ff907', 'createTable tableName=pulse; createIndex indexName=idx_pulse_creator_id, tableName=pulse; createTable tableName=pulse_card; createIndex indexName=idx_pulse_card_pulse_id, tableName=pulse_card; createIndex indexName=idx_pulse_card_card_id, tableNam...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('21', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.884', 20, 'EXECUTED', '8:492a1b64ff9c792aa6ba97d091819261', 'createTable tableName=segment; createIndex indexName=idx_segment_creator_id, tableName=segment; createIndex indexName=idx_segment_table_id, tableName=segment', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('22', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.891', 21, 'EXECUTED', '8:80bc8a62a90791a79adedcf1ac3c6f08', 'addColumn tableName=revision', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('23', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.899', 22, 'EXECUTED', '8:b6f054835db2b2688a1be1de3707f9a9', 'modifyDataType columnName=rows, tableName=metabase_table', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('24', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.903', 23, 'EXECUTED', '8:5e7354b3f92782d1151be0aa9d3fe625', 'createTable tableName=dependency; createIndex indexName=idx_dependency_model, tableName=dependency; createIndex indexName=idx_dependency_model_id, tableName=dependency; createIndex indexName=idx_dependency_dependent_on_model, tableName=dependency;...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('25', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.911', 24, 'EXECUTED', '8:cea300a621393501d4534b0ff41eb91c', 'createTable tableName=metric; createIndex indexName=idx_metric_creator_id, tableName=metric; createIndex indexName=idx_metric_table_id, tableName=metric', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('26', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.918', 25, 'EXECUTED', '8:ddef40b95c55cf4ac0e6a5161911a4cb', 'addColumn tableName=metabase_database; sql', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('27', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.924', 26, 'EXECUTED', '8:017050df833b3b678d1b52b1a0f4de50', 'createTable tableName=dashboardcard_series; createIndex indexName=idx_dashboardcard_series_dashboardcard_id, tableName=dashboardcard_series; createIndex indexName=idx_dashboardcard_series_card_id, tableName=dashboardcard_series', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('28', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.944', 27, 'EXECUTED', '8:428e4eb05e4e29141735adf9ae141a0b', 'addColumn tableName=core_user', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('29', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.951', 28, 'EXECUTED', '8:8b02731cc34add3722c926dfd7376ae0', 'addColumn tableName=pulse_channel', '', NULL, '3.6.3', NULL, NULL, '9064126502');             
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('30', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.96', 29, 'EXECUTED', '8:2c3a50cef177cb90d47a9973cd5934e5', 'addColumn tableName=metabase_field; addNotNullConstraint columnName=visibility_type, tableName=metabase_field', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('31', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.967', 30, 'EXECUTED', '8:30a33a82bab0bcbb2ccb6738d48e1421', 'addColumn tableName=metabase_field', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('32', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:26.982', 31, 'EXECUTED', '8:40830260b92cedad8da273afd5eca678', 'createTable tableName=label; createIndex indexName=idx_label_slug, tableName=label; createTable tableName=card_label; addUniqueConstraint constraintName=unique_card_label_card_id_label_id, tableName=card_label; createIndex indexName=idx_card_label...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('32', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.005', 32, 'EXECUTED', '8:ca6efc1c0a7aa82467d2c84421e812eb', 'createTable tableName=raw_table; createIndex indexName=idx_rawtable_database_id, tableName=raw_table; addUniqueConstraint constraintName=uniq_raw_table_db_schema_name, tableName=raw_table; createTable tableName=raw_column; createIndex indexName=id...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('34', 'tlrobinson', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.011', 33, 'EXECUTED', '8:52b082600b05bbbc46bfe837d1f37a82', 'addColumn tableName=pulse_channel', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('35', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.015', 34, 'EXECUTED', '8:91b72167fca724e6b6a94b64f886cf09', 'modifyDataType columnName=value, tableName=setting', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('36', 'agilliland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.027', 35, 'EXECUTED', '8:252e08892449dceb16c3d91337bd9573', 'addColumn tableName=report_dashboard; addNotNullConstraint columnName=parameters, tableName=report_dashboard; addColumn tableName=report_dashboardcard; addNotNullConstraint columnName=parameter_mappings, tableName=report_dashboardcard', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('37', 'tlrobinson', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.035', 36, 'EXECUTED', '8:07d959eff81777e5690e2920583cfe5f', 'addColumn tableName=query_queryexecution; addNotNullConstraint columnName=query_hash, tableName=query_queryexecution; createIndex indexName=idx_query_queryexecution_query_hash, tableName=query_queryexecution; createIndex indexName=idx_query_querye...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('38', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.115', 37, 'EXECUTED', '8:43604ab55179b50306eb39353e760b46', 'addColumn tableName=metabase_database; addColumn tableName=metabase_table; addColumn tableName=metabase_field; addColumn tableName=report_dashboard; addColumn tableName=metric; addColumn tableName=segment; addColumn tableName=metabase_database; ad...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('39', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.128', 38, 'EXECUTED', '8:334adc22af5ded71ff27759b7a556951', 'addColumn tableName=core_user', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('40', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.145', 39, 'EXECUTED', '8:ee7f50a264d6cf8d891bd01241eebd2c', 'createTable tableName=permissions_group; createIndex indexName=idx_permissions_group_name, tableName=permissions_group; createTable tableName=permissions_group_membership; addUniqueConstraint constraintName=unique_permissions_group_membership_user...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('41', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.174', 40, 'EXECUTED', '8:fae0855adf2f702f1133e32fc98d02a5', 'dropColumn columnName=field_type, tableName=metabase_field; addDefaultValue columnName=active, tableName=metabase_field; addDefaultValue columnName=preview_display, tableName=metabase_field; addDefaultValue columnName=position, tableName=metabase_...', '', NULL, '3.6.3', NULL, NULL, '9064126502');           
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('42', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.216', 41, 'EXECUTED', '8:e32b3a1624fa289a6ee1f3f0a2dac1f6', 'dropForeignKeyConstraint baseTableName=query_queryexecution, constraintName=fk_queryexecution_ref_query_id; dropColumn columnName=query_id, tableName=query_queryexecution; dropColumn columnName=is_staff, tableName=core_user; dropColumn columnName=...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('43', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.222', 42, 'EXECUTED', '8:165e9384e46d6f9c0330784955363f70', 'createTable tableName=permissions_revision', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('44', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.234', 43, 'EXECUTED', '8:2e356e8a1049286f1c78324828ee7867', 'dropColumn columnName=public_perms, tableName=report_card; dropColumn columnName=public_perms, tableName=report_dashboard; dropColumn columnName=public_perms, tableName=pulse', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('45', 'tlrobinson', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.24', 44, 'EXECUTED', '8:421edd38ee0cb0983162f57193f81b0b', 'addColumn tableName=report_dashboardcard; addNotNullConstraint columnName=visualization_settings, tableName=report_dashboardcard', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('46', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.243', 45, 'EXECUTED', '8:131df3cdd9a8c67b32c5988a3fb7fe3d', 'addNotNullConstraint columnName=row, tableName=report_dashboardcard; addNotNullConstraint columnName=col, tableName=report_dashboardcard; addDefaultValue columnName=row, tableName=report_dashboardcard; addDefaultValue columnName=col, tableName=rep...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('47', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.254', 46, 'EXECUTED', '8:1d2474e49a27db344c250872df58a6ed', 'createTable tableName=collection; createIndex indexName=idx_collection_slug, tableName=collection; addColumn tableName=report_card; createIndex indexName=idx_card_collection_id, tableName=report_card', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('48', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.259', 47, 'EXECUTED', '8:720ce9d4b9e6f0917aea035e9dc5d95d', 'createTable tableName=collection_revision', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('49', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.281', 48, 'EXECUTED', '8:4508e7d5f6d4da3c4a2de3bf5e3c5851', 'addColumn tableName=report_card; addColumn tableName=report_card; createIndex indexName=idx_card_public_uuid, tableName=report_card; addColumn tableName=report_dashboard; addColumn tableName=report_dashboard; createIndex indexName=idx_dashboard_pu...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('50', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.304', 49, 'EXECUTED', '8:98a6ab6428ea7a589507464e34ade58a', 'addColumn tableName=report_card; addColumn tableName=report_card; addColumn tableName=report_dashboard; addColumn tableName=report_dashboard', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('51', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.31', 50, 'EXECUTED', '8:43c90b5b9f6c14bfd0e41cc0b184617e', 'createTable tableName=query_execution; createIndex indexName=idx_query_execution_started_at, tableName=query_execution; createIndex indexName=idx_query_execution_query_hash_started_at, tableName=query_execution', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('52', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.32', 51, 'EXECUTED', '8:329695cb161ceb86f6d9473819359351', 'createTable tableName=query_cache; createIndex indexName=idx_query_cache_updated_at, tableName=query_cache; addColumn tableName=report_card', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('53', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.323', 52, 'EXECUTED', '8:78d015c5090c57cd6972eb435601d3d0', 'createTable tableName=query', '', NULL, '3.6.3', NULL, NULL, '9064126502');          
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('54', 'tlrobinson', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.327', 53, 'EXECUTED', '8:e410005b585f5eeb5f202076ff9468f7', 'addColumn tableName=pulse', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('55', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.341', 54, 'EXECUTED', '8:11bbd199bfa57b908ea3b1a470197de9', 'addColumn tableName=report_dashboard; addColumn tableName=report_dashboard; createTable tableName=dashboard_favorite; addUniqueConstraint constraintName=unique_dashboard_favorite_user_id_dashboard_id, tableName=dashboard_favorite; createIndex inde...', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('56', 'wwwiiilll', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.351', 55, 'EXECUTED', '8:9f46051abaee599e2838733512a32ad0', 'addColumn tableName=core_user', 'Added 0.25.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('57', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.359', 56, 'EXECUTED', '8:aab81d477e2d19a9ab18c58b78c9af88', 'addColumn tableName=report_card', 'Added 0.25.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('58', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.365', 57, 'EXECUTED', '8:3554219ca39e0fd682d0fba57531e917', 'createTable tableName=dimension; addUniqueConstraint constraintName=unique_dimension_field_id_name, tableName=dimension; createIndex indexName=idx_dimension_field_id, tableName=dimension', 'Added 0.25.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('59', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.371', 58, 'EXECUTED', '8:5b6ce52371e0e9eee88e6d766225a94b', 'addColumn tableName=metabase_field', 'Added 0.26.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('60', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.378', 59, 'EXECUTED', '8:2141162a1c99a5dd95e5a67c5595e6d7', 'addColumn tableName=metabase_database; addColumn tableName=metabase_database', 'Added 0.26.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('61', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.383', 60, 'EXECUTED', '8:7dded6fd5bf74d79b9a0b62511981272', 'addColumn tableName=metabase_field', 'Added 0.26.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('62', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.387', 61, 'EXECUTED', '8:cb32e6eaa1a2140703def2730f81fef2', 'addColumn tableName=metabase_database', 'Added 0.26.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('63', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.391', 62, 'EXECUTED', '8:226f73b9f6617495892d281b0f8303db', 'addColumn tableName=metabase_database', 'Added 0.26.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('64', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.394', 63, 'EXECUTED', '8:4dcc8ffd836b56756f494d5dfce07b50', 'dropForeignKeyConstraint baseTableName=raw_table, constraintName=fk_rawtable_ref_database', 'Added 0.26.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('66', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.396', 64, 'EXECUTED', '8:e77d66af8e3b83d46c5a0064a75a1aac', 'sql; sql', 'Added 0.26.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('67', 'attekei', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.401', 65, 'EXECUTED', '8:59dfc37744fc362e0e312488fbc9a69b', 'createTable tableName=computation_job; createTable tableName=computation_job_result', 'Added 0.27.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('68', 'sbelak', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.407', 66, 'EXECUTED', '8:b4ac06d133dfbdc6567d992c7e18c6ec', 'addColumn tableName=computation_job; addColumn tableName=computation_job', 'Added 0.27.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('69', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.417', 67, 'EXECUTED', '8:eadbe00e97eb53df4b3df60462f593f6', 'addColumn tableName=pulse; addColumn tableName=pulse; addColumn tableName=pulse; dropNotNullConstraint columnName=name, tableName=pulse', 'Added 0.27.0', NULL, '3.6.3', NULL, NULL, '9064126502');
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('70', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.423', 68, 'EXECUTED', '8:4e4eff7abb983b1127a32ba8107e7fb8', 'addColumn tableName=metabase_field; addNotNullConstraint columnName=database_type, tableName=metabase_field', 'Added 0.28.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('71', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.425', 69, 'EXECUTED', '8:755e5c3dd8a55793f29b2c95cb79c211', 'dropNotNullConstraint columnName=card_id, tableName=report_dashboardcard', 'Added 0.28.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('72', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.432', 70, 'EXECUTED', '8:4dc6debdf779ab9273cf2158a84bb154', 'addColumn tableName=pulse_card; addColumn tableName=pulse_card', 'Added 0.28.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('73', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.437', 71, 'EXECUTED', '8:3c0f03d18ff78a0bcc9915e1d9c518d6', 'addColumn tableName=metabase_database', 'Added 0.29.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('74', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.443', 72, 'EXECUTED', '8:16726d6560851325930c25caf3c8ab96', 'addColumn tableName=metabase_field', 'Added 0.29.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('75', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.451', 73, 'EXECUTED', '8:6072cabfe8188872d8e3da9a675f88c1', 'addColumn tableName=report_card', 'Added 0.28.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('76', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.456', 74, 'EXECUTED', '8:9b7190c9171ccca72617d508875c3c82', 'addColumn tableName=metabase_table', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('77', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.466', 75, 'EXECUTED', '8:07f0a6cd8dbbd9b89be0bd7378f7bdc8', 'addColumn tableName=core_user', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('78', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.472', 76, 'EXECUTED', '8:1977d7278269cdd0dc4f941f9e82f548', 'createTable tableName=group_table_access_policy; createIndex indexName=idx_gtap_table_id_group_id, tableName=group_table_access_policy; addUniqueConstraint constraintName=unique_gtap_table_id_group_id, tableName=group_table_access_policy', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('79', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.486', 77, 'EXECUTED', '8:3f31cb67f9cdf7754ca95cade22d87a2', 'addColumn tableName=report_dashboard; createIndex indexName=idx_dashboard_collection_id, tableName=report_dashboard; addColumn tableName=pulse; createIndex indexName=idx_pulse_collection_id, tableName=pulse', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('80', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.491', 78, 'EXECUTED', '8:199d0ce28955117819ca15bcc29323e5', 'addColumn tableName=collection; createIndex indexName=idx_collection_location, tableName=collection', '', NULL, '3.6.3', NULL, NULL, '9064126502'),
('81', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.511', 79, 'EXECUTED', '8:3a6dc22403660529194d004ca7f7ad39', 'addColumn tableName=report_dashboard; addColumn tableName=report_card; addColumn tableName=pulse', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('82', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.522', 80, 'EXECUTED', '8:ac4b94df8c648f88cfff661284d6392d', 'addColumn tableName=core_user; sql', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('83', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.525', 81, 'EXECUTED', '8:ccd897d737737c05248293c7d56efe96', 'dropNotNullConstraint columnName=card_id, tableName=group_table_access_policy', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('84', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.533', 82, 'EXECUTED', '8:58afc10c3e283a8050ea471aac447a97', 'renameColumn newColumnName=archived, oldColumnName=is_active, tableName=metric; addDefaultValue columnName=archived, tableName=metric; renameColumn newColumnName=archived, oldColumnName=is_active, tableName=segment; addDefaultValue columnName=arch...', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502');  
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('85', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.555', 83, 'EXECUTED', '8:9b4c9878a5018452dd63eb6d7c17f415', 'addColumn tableName=collection; createIndex indexName=idx_collection_personal_owner_id, tableName=collection; addColumn tableName=collection; sql; addNotNullConstraint columnName=_slug, tableName=collection; dropColumn columnName=slug, tableName=c...', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('86', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.559', 84, 'EXECUTED', '8:50c75bb29f479e0b3fb782d89f7d6717', 'sql', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('87', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.564', 85, 'EXECUTED', '8:0eccf19a93cb0ba4017aafd1d308c097', 'dropTable tableName=raw_column; dropTable tableName=raw_table', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('88', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.576', 86, 'EXECUTED', '8:04ff5a0738473938fc31d68c1d9952e1', 'addColumn tableName=core_user', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('89', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.603', 87, 'EXECUTED', '8:ab526907b26b1bb43ac9f9548043f2a7', 'createTable tableName=QRTZ_JOB_DETAILS; addPrimaryKey constraintName=PK_QRTZ_JOB_DETAILS, tableName=QRTZ_JOB_DETAILS; createTable tableName=QRTZ_TRIGGERS; addPrimaryKey constraintName=PK_QRTZ_TRIGGERS, tableName=QRTZ_TRIGGERS; addForeignKeyConstra...', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('90', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.627', 88, 'EXECUTED', '8:8562a72a1190deadc5fa59a23a6396dc', 'addColumn tableName=core_user; sql; dropColumn columnName=saml_auth, tableName=core_user', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('91', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.637', 89, 'EXECUTED', '8:9b8831e1e409f08e874c4ece043d0340', 'dropColumn columnName=raw_table_id, tableName=metabase_table; dropColumn columnName=raw_column_id, tableName=metabase_field', 'Added 0.30.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('92', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.641', 90, 'EXECUTED', '8:1e5bc2d66778316ea640a561862c23b4', 'addColumn tableName=query_execution', 'Added 0.31.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('93', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.645', 91, 'EXECUTED', '8:93b0d408a3970e30d7184ed1166b5476', 'addColumn tableName=query', 'Added 0.31.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('94', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.648', 92, 'EXECUTED', '8:a2a1eedf1e8f8756856c9d49c7684bfe', 'createTable tableName=task_history; createIndex indexName=idx_task_history_end_time, tableName=task_history; createIndex indexName=idx_task_history_db_id, tableName=task_history', 'Added 0.31.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('95', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.666', 93, 'EXECUTED', '8:9824808283004e803003b938399a4cf0', 'addUniqueConstraint constraintName=idx_databasechangelog_id_author_filename, tableName=DATABASECHANGELOG', 'Added 0.31.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('96', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.692', 94, 'EXECUTED', '8:5cb2f36edcca9c6e14c5e109d6aeb68b', 'addColumn tableName=metabase_field', 'Added 0.31.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('97', 'senior', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.695', 95, 'MARK_RAN', '8:9169e238663c5d036bd83428d2fa8e4b', 'modifyDataType columnName=results, tableName=query_cache', 'Added 0.32.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('98', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.7', 96, 'EXECUTED', '8:f036d20a4dc86fb60ffb64ea838ed6b9', 'addUniqueConstraint constraintName=idx_uniq_table_db_id_schema_name, tableName=metabase_table; sql', 'Added 0.32.0', NULL, '3.6.3', NULL, NULL, '9064126502');            
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('99', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.704', 97, 'EXECUTED', '8:274bb516dd95b76c954b26084eed1dfe', 'addUniqueConstraint constraintName=idx_uniq_field_table_id_parent_id_name, tableName=metabase_field; sql', 'Added 0.32.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('100', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.709', 98, 'EXECUTED', '8:948014f13b6198b50e3b7a066fae2ae0', 'sql', 'Added 0.32.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('101', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.713', 99, 'EXECUTED', '8:58eabb08a175fafe8985208545374675', 'createIndex indexName=idx_field_parent_id, tableName=metabase_field', 'Added 0.32.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('103', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.72', 100, 'EXECUTED', '8:fda3670fd16a40fd9d0f89a003098d54', 'addColumn tableName=metabase_database', 'Added 0.32.10', NULL, '3.6.3', NULL, NULL, '9064126502'),
('104', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.724', 101, 'EXECUTED', '8:21709f17e6d1b521d3d3b8cbb5445218', 'addColumn tableName=core_session', 'Added EE 1.1.6/CE 0.33.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('106', 'sb', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.733', 102, 'EXECUTED', '8:a3dd42bbe25c415ce21e4c180dc1c1d7', 'modifyDataType columnName=database_type, tableName=metabase_field', 'Added 0.33.5', NULL, '3.6.3', NULL, NULL, '9064126502'),
('107', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.736', 103, 'MARK_RAN', '8:605c2b4d212315c83727aa3d914cf57f', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('108', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.738', 104, 'MARK_RAN', '8:d11419da9384fd27d7b1670707ac864c', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('109', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.74', 105, 'MARK_RAN', '8:a5f4ea412eb1d5c1bc824046ad11692f', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('110', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.743', 106, 'MARK_RAN', '8:82343097044b9652f73f3d3a2ddd04fe', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('111', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.746', 107, 'MARK_RAN', '8:528de1245ba3aa106871d3e5b3eee0ba', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('112', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.748', 108, 'MARK_RAN', '8:010a3931299429d1adfa91941c806ea4', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('113', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.751', 109, 'MARK_RAN', '8:8f8e0836064bdea82487ecf64a129767', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('114', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.754', 110, 'MARK_RAN', '8:7a0bcb25ece6d9a311d6c6be7ed89bb7', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('115', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.756', 111, 'MARK_RAN', '8:55c10c2ff7e967e3ea1fdffc5aeed93a', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('116', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.758', 112, 'MARK_RAN', '8:dbf7c3a1d8b1eb77b7f5888126b13c2e', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('117', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.76', 113, 'MARK_RAN', '8:f2d7f9fb1b6713bc5362fe40bfe3f91f', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('118', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.762', 114, 'MARK_RAN', '8:17f4410e30a0c7e84a36517ebf4dab64', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502');         
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('119', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.765', 115, 'MARK_RAN', '8:195cf171ac1d5531e455baf44d9d6561', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('120', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.767', 116, 'MARK_RAN', '8:61f53fac337020aec71868656a719bba', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('121', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.769', 117, 'MARK_RAN', '8:1baa145d2ffe1e18d097a63a95476c5f', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('122', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.771', 118, 'MARK_RAN', '8:929b3c551a8f631cdce2511612d82d62', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('123', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.774', 119, 'MARK_RAN', '8:35e5baddf78df5829fe6889d216436e5', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('124', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.778', 120, 'MARK_RAN', '8:ce2322ca187dfac51be8f12f6a132818', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('125', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.781', 121, 'MARK_RAN', '8:dd948ac004ceb9d0a300a8e06806945f', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('126', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.785', 122, 'MARK_RAN', '8:3d34c0d4e5dbb32b432b83d5322e2aa3', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('127', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.788', 123, 'MARK_RAN', '8:18314b269fe11898a433ca9048400975', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('128', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.79', 124, 'MARK_RAN', '8:44acbe257817286d88b7892e79363b66', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('129', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.792', 125, 'MARK_RAN', '8:f890168c47cc2113a8af77ed3875c4b3', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('130', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.795', 126, 'MARK_RAN', '8:ecdcf1fd66b3477e5b6882c3286b2fd8', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('131', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.798', 127, 'MARK_RAN', '8:453af2935194978c65b19eae445d85c9', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('132', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.802', 128, 'MARK_RAN', '8:d2c37bc80b42a15b65f148bcb1daa86e', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('133', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.805', 129, 'MARK_RAN', '8:5b9b539d146fbdb762577dc98e7f3430', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('134', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.807', 130, 'MARK_RAN', '8:4d0f688a168db3e357a808263b6ad355', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('135', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.809', 131, 'MARK_RAN', '8:2ca54b0828c6aca615fb42064f1ec728', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('136', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.813', 132, 'MARK_RAN', '8:7115eebbcf664509b9fc0c39cb6f29e9', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('137', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.815', 133, 'MARK_RAN', '8:da754ac6e51313a32de6f6389b29e1ca', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('138', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.818', 134, 'MARK_RAN', '8:bfb201761052189e96538f0de3ac76cf', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502');         
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('139', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.82', 135, 'MARK_RAN', '8:fdad4ec86aefb0cdf850b1929b618508', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('140', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.823', 136, 'MARK_RAN', '8:a0cfe6468160bba8c9d602da736c41fb', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('141', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.826', 137, 'MARK_RAN', '8:b6b7faa02cba069e1ed13e365f59cb6b', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('142', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.828', 138, 'MARK_RAN', '8:0c291eb50cc0f1fef3d55cfe6b62bedb', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('143', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.83', 139, 'MARK_RAN', '8:3d9a5cb41f77a33e834d0562fdddeab6', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('144', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.832', 140, 'MARK_RAN', '8:1d5b7f79f97906105e90d330a17c4062', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('145', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.834', 141, 'MARK_RAN', '8:b162dd48ef850ab4300e2d714eac504e', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('146', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.836', 142, 'MARK_RAN', '8:8c0c1861582d15fe7859358f5d553c91', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('147', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.838', 143, 'MARK_RAN', '8:5ccf590332ea0744414e40a990a43275', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('148', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.84', 144, 'MARK_RAN', '8:12b42e87d40cd7b6399c1fb0c6704fa7', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('149', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.842', 145, 'MARK_RAN', '8:dd45bfc4af5e05701a064a5f2a046d7f', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('150', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.843', 146, 'MARK_RAN', '8:48beda94aeaa494f798c38a66b90fb2a', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('151', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.845', 147, 'MARK_RAN', '8:bb752a7d09d437c7ac294d5ab2600079', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('152', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.847', 148, 'MARK_RAN', '8:4bcbc472f2d6ae3a5e7eca425940e52b', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('153', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.849', 149, 'MARK_RAN', '8:adce2cca96fe0531b00f9bed6bed8352', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('154', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.851', 150, 'MARK_RAN', '8:7a1df4f7a679f47459ea1a1c0991cfba', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('155', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.853', 151, 'MARK_RAN', '8:3c78b79c784e3a3ce09a77db1b1d0374', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('156', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.855', 152, 'MARK_RAN', '8:51859ee6cca4aca9d141a3350eb5d6b1', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('157', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.872', 153, 'MARK_RAN', '8:0197c46bf8536a75dbf7e9aee731f3b2', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('158', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.879', 154, 'MARK_RAN', '8:2ebdd5a179ce2487b2e23b6be74a407c', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502');           
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('159', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.88', 155, 'MARK_RAN', '8:c62719dad239c51f045315273b56e2a9', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('160', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.882', 156, 'MARK_RAN', '8:1441c71af662abb809cba3b3b360ce81', 'sql', 'Added 0.34.2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('162', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.898', 157, 'EXECUTED', '8:c37f015ad11d77d66e09925eed605cdf', 'dropTable tableName=query_queryexecution', 'Added 0.23.0 as a data migration; converted to Liquibase migration in 0.35.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('163', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.915', 158, 'EXECUTED', '8:9ef66a82624d70738fc89807a2398ed1', 'dropColumn columnName=read_permissions, tableName=report_card', 'Added 0.35.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('164', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.937', 159, 'EXECUTED', '8:f19470701bbb33f19f91b1199a915881', 'addColumn tableName=core_user', 'Added 0.35.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('165', 'sb', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.961', 160, 'EXECUTED', '8:b3ae2b90db5c4264ea2ac50d304d6ad4', 'addColumn tableName=metabase_field; addColumn tableName=metabase_field; addColumn tableName=metabase_table; sql', 'Added field_order to Table and database_position to Field', NULL, '3.6.3', NULL, NULL, '9064126502'),
('166', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.969', 161, 'EXECUTED', '8:92dafa5c15c46e2af8380304449c7dfa', 'modifyDataType columnName=updated_at, tableName=metabase_fieldvalues; modifyDataType columnName=updated_at, tableName=query_cache', 'Added 0.36.0/1.35.4', NULL, '3.6.3', NULL, NULL, '9064126502'),
('167', 'walterl, camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.974', 162, 'EXECUTED', '8:4c11dc8c5e829b5263c198fe7879f161', 'sql; createTable tableName=native_query_snippet; createIndex indexName=idx_snippet_name, tableName=native_query_snippet', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('168', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.979', 163, 'EXECUTED', '8:6d40bfa472bccd2d54284aeb89e1ec3c', 'modifyDataType columnName=started_at, tableName=query_execution', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('169', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.987', 164, 'EXECUTED', '8:2b97e6eaa7854e179abb9f3749f73b18', 'dropColumn columnName=rows, tableName=metabase_table', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('170', 'sb', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:27.995', 165, 'EXECUTED', '8:dbd6ee52b0f9195e449a6d744606b599', 'dropColumn columnName=fields_hash, tableName=metabase_table', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('171', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.001', 166, 'EXECUTED', '8:0798080c0796e6ab3e791bff007118b8', 'addColumn tableName=native_query_snippet; createIndex indexName=idx_snippet_collection_id, tableName=native_query_snippet', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('172', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.008', 167, 'EXECUTED', '8:212f4010b504e358853fd017032f844f', 'addColumn tableName=collection', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('173', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.01', 168, 'EXECUTED', '8:4d32b4b7be3f4801e51aeffa5dd47649', 'dropForeignKeyConstraint baseTableName=activity, constraintName=fk_activity_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('174', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.013', 169, 'EXECUTED', '8:66f31503ba532702e54ea531af668531', 'addForeignKeyConstraint baseTableName=activity, constraintName=fk_activity_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');              
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('175', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.015', 170, 'EXECUTED', '8:c3ceddfca8827d73474cd9a70ea01d1c', 'dropForeignKeyConstraint baseTableName=card_label, constraintName=fk_card_label_ref_card_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('176', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.018', 171, 'EXECUTED', '8:89c918faa84b7f3f5fa291d4da74414c', 'addForeignKeyConstraint baseTableName=card_label, constraintName=fk_card_label_ref_card_id, referencedTableName=report_card', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('177', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.02', 172, 'EXECUTED', '8:d45f2198befc83de1f1f963c750607af', 'dropForeignKeyConstraint baseTableName=card_label, constraintName=fk_card_label_ref_label_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('178', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.034', 173, 'EXECUTED', '8:63d396999449da2d42b3d3e22f3454fa', 'addForeignKeyConstraint baseTableName=card_label, constraintName=fk_card_label_ref_label_id, referencedTableName=label', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('179', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.039', 174, 'EXECUTED', '8:2a0a7956402ef074e5d54c73ac2d5405', 'dropForeignKeyConstraint baseTableName=collection, constraintName=fk_collection_personal_owner_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('180', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.043', 175, 'EXECUTED', '8:b02225e5940a2bcca3d550f24f80123e', 'addForeignKeyConstraint baseTableName=collection, constraintName=fk_collection_personal_owner_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('181', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.045', 176, 'EXECUTED', '8:16923f06b2bbb60c6ac78a0c4b7e4d4f', 'dropForeignKeyConstraint baseTableName=collection_revision, constraintName=fk_collection_revision_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('182', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.049', 177, 'EXECUTED', '8:d59d864c038c530a49056704c93f231d', 'addForeignKeyConstraint baseTableName=collection_revision, constraintName=fk_collection_revision_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('183', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.052', 178, 'EXECUTED', '8:c5ed9a4f44ee92af620a47c80e010a6b', 'dropForeignKeyConstraint baseTableName=computation_job, constraintName=fk_computation_job_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('184', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.058', 179, 'EXECUTED', '8:70317e2bdaac90b9ddc33b1b93ada479', 'addForeignKeyConstraint baseTableName=computation_job, constraintName=fk_computation_job_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('185', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.06', 180, 'EXECUTED', '8:12e7457ec2d2b1a99a3fadfc64d7b7f9', 'dropForeignKeyConstraint baseTableName=computation_job_result, constraintName=fk_computation_result_ref_job_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('186', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.064', 181, 'EXECUTED', '8:526987d0f6b2f01d7bfc9e3179721be6', 'addForeignKeyConstraint baseTableName=computation_job_result, constraintName=fk_computation_result_ref_job_id, referencedTableName=computation_job', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('187', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.067', 182, 'EXECUTED', '8:3fbb75c0c491dc6628583184202b8f39', 'dropForeignKeyConstraint baseTableName=core_session, constraintName=fk_session_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');     
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('188', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.07', 183, 'EXECUTED', '8:4dc500830cd4c5715ca8b0956e37b3d5', 'addForeignKeyConstraint baseTableName=core_session, constraintName=fk_session_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('189', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.072', 184, 'EXECUTED', '8:e07396e0ee587dcf321d21cffa9eec29', 'dropForeignKeyConstraint baseTableName=dashboardcard_series, constraintName=fk_dashboardcard_series_ref_card_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('190', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.075', 185, 'EXECUTED', '8:eded791094a16bf398896c790645c411', 'addForeignKeyConstraint baseTableName=dashboardcard_series, constraintName=fk_dashboardcard_series_ref_card_id, referencedTableName=report_card', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('191', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.077', 186, 'EXECUTED', '8:bb5b9a3d64b2e44318e159e7f1fecde2', 'dropForeignKeyConstraint baseTableName=dashboardcard_series, constraintName=fk_dashboardcard_series_ref_dashboardcard_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('192', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.081', 187, 'EXECUTED', '8:7d96911036dec2fee64fe8ae57c131b3', 'addForeignKeyConstraint baseTableName=dashboardcard_series, constraintName=fk_dashboardcard_series_ref_dashboardcard_id, referencedTableName=report_dashboardcard', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('193', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.083', 188, 'EXECUTED', '8:db171179fe094db9fee7e2e7df60fa4e', 'dropForeignKeyConstraint baseTableName=group_table_access_policy, constraintName=fk_gtap_card_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('194', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.087', 189, 'EXECUTED', '8:fccb724d7ae7606e2e7638de1791392a', 'addForeignKeyConstraint baseTableName=group_table_access_policy, constraintName=fk_gtap_card_id, referencedTableName=report_card', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('195', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.089', 190, 'EXECUTED', '8:1d720af9f917007024c91d40410bc91d', 'dropForeignKeyConstraint baseTableName=metabase_field, constraintName=fk_field_parent_ref_field_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('196', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.092', 191, 'EXECUTED', '8:c52f5dbf742feef12a3803bda92a425b', 'addForeignKeyConstraint baseTableName=metabase_field, constraintName=fk_field_parent_ref_field_id, referencedTableName=metabase_field', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('197', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.094', 192, 'EXECUTED', '8:9c1c950b709050abe91cea17fd5970cc', 'dropForeignKeyConstraint baseTableName=metabase_field, constraintName=fk_field_ref_table_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('198', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.096', 193, 'EXECUTED', '8:e24198ff4825a41d17ceaebd71692103', 'addForeignKeyConstraint baseTableName=metabase_field, constraintName=fk_field_ref_table_id, referencedTableName=metabase_table', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('199', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.098', 194, 'EXECUTED', '8:146efae3f2938538961835fe07433ee1', 'dropForeignKeyConstraint baseTableName=metabase_fieldvalues, constraintName=fk_fieldvalues_ref_field_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('200', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.101', 195, 'EXECUTED', '8:f5e7e79cb81b8d2245663c482746c853', 'addForeignKeyConstraint baseTableName=metabase_fieldvalues, constraintName=fk_fieldvalues_ref_field_id, referencedTableName=metabase_field', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');              
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('201', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.103', 196, 'EXECUTED', '8:2d79321a27fde6cb3c4fabdb86dc60ec', 'dropForeignKeyConstraint baseTableName=metabase_table, constraintName=fk_table_ref_database_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('202', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.105', 197, 'EXECUTED', '8:d0cefed061c4abbf2b0a0fd2a66817cb', 'addForeignKeyConstraint baseTableName=metabase_table, constraintName=fk_table_ref_database_id, referencedTableName=metabase_database', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('203', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.107', 198, 'EXECUTED', '8:28b4ec07bfbf4b86532fe9357effdb8b', 'dropForeignKeyConstraint baseTableName=metric, constraintName=fk_metric_ref_creator_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('204', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.11', 199, 'EXECUTED', '8:7195937fd2144533edfa2302ba2ae653', 'addForeignKeyConstraint baseTableName=metric, constraintName=fk_metric_ref_creator_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('205', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.112', 200, 'EXECUTED', '8:4b2d5f1458641dd1b9dbc5f41600be8e', 'dropForeignKeyConstraint baseTableName=metric, constraintName=fk_metric_ref_table_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('206', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.114', 201, 'EXECUTED', '8:959ef448c23aaf3acf5b69f297fe4b2f', 'addForeignKeyConstraint baseTableName=metric, constraintName=fk_metric_ref_table_id, referencedTableName=metabase_table', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('207', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.117', 202, 'EXECUTED', '8:18135d674f2fe502313adb0475f5f139', 'dropForeignKeyConstraint baseTableName=metric_important_field, constraintName=fk_metric_important_field_metabase_field_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('208', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.119', 203, 'EXECUTED', '8:4c86c17a00a81dfdf35a181e3dd3b08f', 'addForeignKeyConstraint baseTableName=metric_important_field, constraintName=fk_metric_important_field_metabase_field_id, referencedTableName=metabase_field', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('209', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.121', 204, 'EXECUTED', '8:1b9c3544bf89093fc9e4f7f191fdc6df', 'dropForeignKeyConstraint baseTableName=metric_important_field, constraintName=fk_metric_important_field_metric_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('210', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.123', 205, 'EXECUTED', '8:842d166cdf7b0a29c88efdaf95c9d0bf', 'addForeignKeyConstraint baseTableName=metric_important_field, constraintName=fk_metric_important_field_metric_id, referencedTableName=metric', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('211', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.125', 206, 'EXECUTED', '8:91c64815a1aefb07dd124d493bfeeea9', 'dropForeignKeyConstraint baseTableName=native_query_snippet, constraintName=fk_snippet_collection_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('212', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.128', 207, 'EXECUTED', '8:b25064ee26b71f61906a833bc22ebbc2', 'addForeignKeyConstraint baseTableName=native_query_snippet, constraintName=fk_snippet_collection_id, referencedTableName=collection', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('213', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.13', 208, 'EXECUTED', '8:60a7d628e4f68ee4c85f5f298b1d9865', 'dropForeignKeyConstraint baseTableName=permissions, constraintName=fk_permissions_group_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');     
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('214', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.132', 209, 'EXECUTED', '8:1c3c480313967a2d9f324a094ba25f4d', 'addForeignKeyConstraint baseTableName=permissions, constraintName=fk_permissions_group_id, referencedTableName=permissions_group', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('215', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.134', 210, 'EXECUTED', '8:5d2c67ccead52970e9d85beb7eda48b9', 'dropForeignKeyConstraint baseTableName=permissions_group_membership, constraintName=fk_permissions_group_group_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('216', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.137', 211, 'EXECUTED', '8:35fcd5d48600e887188eb1b990e6cc35', 'addForeignKeyConstraint baseTableName=permissions_group_membership, constraintName=fk_permissions_group_group_id, referencedTableName=permissions_group', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('217', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.139', 212, 'EXECUTED', '8:da7460a35a724109ae9b5096cd18666b', 'dropForeignKeyConstraint baseTableName=permissions_group_membership, constraintName=fk_permissions_group_membership_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('218', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.141', 213, 'EXECUTED', '8:dc04b7eb04cd870c53102cb37fd75a5f', 'addForeignKeyConstraint baseTableName=permissions_group_membership, constraintName=fk_permissions_group_membership_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('219', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.143', 214, 'EXECUTED', '8:02c690f34fe8803e42441f5037d33017', 'dropForeignKeyConstraint baseTableName=permissions_revision, constraintName=fk_permissions_revision_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('220', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.146', 215, 'EXECUTED', '8:8b8447405d7b2b52358c9676d64b7651', 'addForeignKeyConstraint baseTableName=permissions_revision, constraintName=fk_permissions_revision_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('221', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.149', 216, 'EXECUTED', '8:54a4c0d8a4eda80dc81fb549a629d075', 'dropForeignKeyConstraint baseTableName=pulse, constraintName=fk_pulse_collection_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('222', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.151', 217, 'EXECUTED', '8:c5f22e925be3a8fd0e4f47a491f599ee', 'addForeignKeyConstraint baseTableName=pulse, constraintName=fk_pulse_collection_id, referencedTableName=collection', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('223', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.153', 218, 'EXECUTED', '8:de743e384ff90a6a31a3caebe0abb775', 'dropForeignKeyConstraint baseTableName=pulse, constraintName=fk_pulse_ref_creator_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('224', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.156', 219, 'EXECUTED', '8:b8fdf9c14d7ea3131a0a6b1f1036f91a', 'addForeignKeyConstraint baseTableName=pulse, constraintName=fk_pulse_ref_creator_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('225', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.157', 220, 'EXECUTED', '8:495a4e12cf75cac5ff54738772e6a998', 'dropForeignKeyConstraint baseTableName=pulse_card, constraintName=fk_pulse_card_ref_card_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('226', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.16', 221, 'EXECUTED', '8:cf383d74bc407065c78c060203ba4560', 'addForeignKeyConstraint baseTableName=pulse_card, constraintName=fk_pulse_card_ref_card_id, referencedTableName=report_card', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');             
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('227', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.162', 222, 'EXECUTED', '8:e23eaf74ab7edacfb34bd5caf05cf66f', 'dropForeignKeyConstraint baseTableName=pulse_card, constraintName=fk_pulse_card_ref_pulse_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('228', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.164', 223, 'EXECUTED', '8:d458ddb160f61e93bb69738f262de2b4', 'addForeignKeyConstraint baseTableName=pulse_card, constraintName=fk_pulse_card_ref_pulse_id, referencedTableName=pulse', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('229', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.166', 224, 'EXECUTED', '8:1cb939d172989cb1629e9a3da768596d', 'dropForeignKeyConstraint baseTableName=pulse_channel, constraintName=fk_pulse_channel_ref_pulse_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('230', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.169', 225, 'EXECUTED', '8:62baea3334ac5f21feac84497f6bf643', 'addForeignKeyConstraint baseTableName=pulse_channel, constraintName=fk_pulse_channel_ref_pulse_id, referencedTableName=pulse', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('231', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.171', 226, 'EXECUTED', '8:d096a9ce70fc0b7dfbc67ee1be4c3e31', 'dropForeignKeyConstraint baseTableName=pulse_channel_recipient, constraintName=fk_pulse_channel_recipient_ref_pulse_channel_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('232', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.174', 227, 'EXECUTED', '8:be2457ae1e386c9d5ec5bfa4ae681fd6', 'addForeignKeyConstraint baseTableName=pulse_channel_recipient, constraintName=fk_pulse_channel_recipient_ref_pulse_channel_id, referencedTableName=pulse_channel', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('233', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.176', 228, 'EXECUTED', '8:d5c018882af16093de446e025e2599b7', 'dropForeignKeyConstraint baseTableName=pulse_channel_recipient, constraintName=fk_pulse_channel_recipient_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('234', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.179', 229, 'EXECUTED', '8:edb6ced6c353064c46fa00b54e187aef', 'addForeignKeyConstraint baseTableName=pulse_channel_recipient, constraintName=fk_pulse_channel_recipient_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('235', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.181', 230, 'EXECUTED', '8:550c64e41e55233d52ac3ef24d664be1', 'dropForeignKeyConstraint baseTableName=report_card, constraintName=fk_card_collection_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('236', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.184', 231, 'EXECUTED', '8:04300b298b663fc2a2f3a324d1051c3c', 'addForeignKeyConstraint baseTableName=report_card, constraintName=fk_card_collection_id, referencedTableName=collection', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('237', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.198', 232, 'EXECUTED', '8:227a9133cdff9f1b60d8af53688ab12e', 'dropForeignKeyConstraint baseTableName=report_card, constraintName=fk_card_made_public_by_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('238', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.203', 233, 'EXECUTED', '8:7000766ddca2c914ac517611e7d86549', 'addForeignKeyConstraint baseTableName=report_card, constraintName=fk_card_made_public_by_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('239', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.205', 234, 'EXECUTED', '8:672f4972653f70464982008a7abea3e1', 'dropForeignKeyConstraint baseTableName=report_card, constraintName=fk_card_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');            
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('240', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.208', 235, 'EXECUTED', '8:165b07c8ceb004097c83ee1b689164e4', 'addForeignKeyConstraint baseTableName=report_card, constraintName=fk_card_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('241', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.21', 236, 'EXECUTED', '8:b0a9e3d801e64e0a66c3190e458c01ae', 'dropForeignKeyConstraint baseTableName=report_card, constraintName=fk_report_card_ref_database_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('242', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.213', 237, 'EXECUTED', '8:bf10f944715f87c3ad0dd7472d84df62', 'addForeignKeyConstraint baseTableName=report_card, constraintName=fk_report_card_ref_database_id, referencedTableName=metabase_database', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('243', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.215', 238, 'EXECUTED', '8:cba5d2bfb36e13c60d82cc6cca659b61', 'dropForeignKeyConstraint baseTableName=report_card, constraintName=fk_report_card_ref_table_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('244', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.219', 239, 'EXECUTED', '8:4d40104eaa47d01981644462ef56f369', 'addForeignKeyConstraint baseTableName=report_card, constraintName=fk_report_card_ref_table_id, referencedTableName=metabase_table', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('245', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.221', 240, 'EXECUTED', '8:a8f9206dadfe23662d547035f71e3846', 'dropForeignKeyConstraint baseTableName=report_cardfavorite, constraintName=fk_cardfavorite_ref_card_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('246', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.224', 241, 'EXECUTED', '8:e5db34b9db22254f7445fd65ecf45356', 'addForeignKeyConstraint baseTableName=report_cardfavorite, constraintName=fk_cardfavorite_ref_card_id, referencedTableName=report_card', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('247', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.226', 242, 'EXECUTED', '8:76de7337a12a5ef42dcbb9274bd2d70f', 'dropForeignKeyConstraint baseTableName=report_cardfavorite, constraintName=fk_cardfavorite_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('248', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.229', 243, 'EXECUTED', '8:0640fb00a090cbe5dc545afbe0d25811', 'addForeignKeyConstraint baseTableName=report_cardfavorite, constraintName=fk_cardfavorite_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('249', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.231', 244, 'EXECUTED', '8:16ef5909a72ac4779427e432b3b3ce18', 'dropForeignKeyConstraint baseTableName=report_dashboard, constraintName=fk_dashboard_collection_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('250', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.233', 245, 'EXECUTED', '8:2e80ebe19816b7bde99050638772cf99', 'addForeignKeyConstraint baseTableName=report_dashboard, constraintName=fk_dashboard_collection_id, referencedTableName=collection', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('251', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.236', 246, 'EXECUTED', '8:c12aa099f293b1e3d71da5e3edb3c45a', 'dropForeignKeyConstraint baseTableName=report_dashboard, constraintName=fk_dashboard_made_public_by_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('252', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.238', 247, 'EXECUTED', '8:26b16d4d0cf7a77c1d687f49b029f421', 'addForeignKeyConstraint baseTableName=report_dashboard, constraintName=fk_dashboard_made_public_by_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('253', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.241', 248, 'EXECUTED', '8:bbf118edaa88a8ad486ec0d6965504b6', 'dropForeignKeyConstraint baseTableName=report_dashboard, constraintName=fk_dashboard_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('254', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.244', 249, 'EXECUTED', '8:7fc35d78c63f41eb4dbd23cfd1505f0b', 'addForeignKeyConstraint baseTableName=report_dashboard, constraintName=fk_dashboard_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('255', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.247', 250, 'EXECUTED', '8:f6564a7516ace55104a3173eebf4c629', 'dropForeignKeyConstraint baseTableName=report_dashboardcard, constraintName=fk_dashboardcard_ref_card_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('256', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.25', 251, 'EXECUTED', '8:61db9be3b4dd7ed1e9d01a7254e87544', 'addForeignKeyConstraint baseTableName=report_dashboardcard, constraintName=fk_dashboardcard_ref_card_id, referencedTableName=report_card', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('257', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.253', 252, 'EXECUTED', '8:c8b51dc7ba4da9f7995a0b0c17fadad2', 'dropForeignKeyConstraint baseTableName=report_dashboardcard, constraintName=fk_dashboardcard_ref_dashboard_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('258', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.256', 253, 'EXECUTED', '8:58974c6ad8aee63f09e6e48b1a78c267', 'addForeignKeyConstraint baseTableName=report_dashboardcard, constraintName=fk_dashboardcard_ref_dashboard_id, referencedTableName=report_dashboard', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('259', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.259', 254, 'EXECUTED', '8:be4a52feb3b12e655c0bbd34477749b0', 'dropForeignKeyConstraint baseTableName=revision, constraintName=fk_revision_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('260', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.263', 255, 'EXECUTED', '8:4b370f9c9073a6f8f585aab713c57f47', 'addForeignKeyConstraint baseTableName=revision, constraintName=fk_revision_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('261', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.266', 256, 'EXECUTED', '8:173fe552fdf72fdb4efbc01a6ac4f7ad', 'dropForeignKeyConstraint baseTableName=segment, constraintName=fk_segment_ref_creator_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('262', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.27', 257, 'EXECUTED', '8:50927b8b1d1809f32c11d2e649dbcb94', 'addForeignKeyConstraint baseTableName=segment, constraintName=fk_segment_ref_creator_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('263', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.272', 258, 'EXECUTED', '8:0b10c8664506917cc50359e9634c121c', 'dropForeignKeyConstraint baseTableName=segment, constraintName=fk_segment_ref_table_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('264', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.276', 259, 'EXECUTED', '8:b132aedf6fbdcc5d956a2d3a154cc035', 'addForeignKeyConstraint baseTableName=segment, constraintName=fk_segment_ref_table_id, referencedTableName=metabase_table', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('265', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.279', 260, 'EXECUTED', '8:2e339ecb05463b3765f9bb266bd28297', 'dropForeignKeyConstraint baseTableName=view_log, constraintName=fk_view_log_ref_user_id', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502');  
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('266', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.282', 261, 'EXECUTED', '8:31506e118764f5e520f755f26c696bb8', 'addForeignKeyConstraint baseTableName=view_log, constraintName=fk_view_log_ref_user_id, referencedTableName=core_user', 'Added 0.36.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('268', 'rlotun', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.284', 262, 'MARK_RAN', '8:9da2f706a7cd42b5101601e0106fa929', 'createIndex indexName=idx_lower_email, tableName=core_user', 'Added 0.37.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('269', 'rlotun', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.288', 263, 'EXECUTED', '8:215609ca9dce2181687b4fa65e7351ba', 'sql', 'Added 0.37.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('270', 'rlotun', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.29', 264, 'MARK_RAN', '8:17001a192ba1df02104cc0d15569cbe5', 'sql', 'Added 0.37.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('271', 'rlotun', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.292', 265, 'MARK_RAN', '8:ce8ddb253a303d4f8924ff5a187080c0', 'modifyDataType columnName=email, tableName=core_user', 'Added 0.37.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('272', 'rlotun', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.304', 266, 'EXECUTED', '8:54ad09ee0c67d58e78ccafe9b1499379', 'modifyDataType columnName=email, tableName=core_user', 'Added 0.37.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('273', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.306', 267, 'EXECUTED', '8:5348576bb9852f6f947e1aa39cd1626f', 'addDefaultValue columnName=is_superuser, tableName=core_user', 'Added 0.37.1', NULL, '3.6.3', NULL, NULL, '9064126502'),
('274', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.308', 268, 'EXECUTED', '8:11a8a84b9ba7634aeda625ff3f487d22', 'addDefaultValue columnName=is_active, tableName=core_user', 'Added 0.37.1', NULL, '3.6.3', NULL, NULL, '9064126502'),
('275', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.312', 269, 'EXECUTED', '8:447d9e294f59dd1058940defec7e0f40', 'addColumn tableName=metabase_database', 'Added 0.38.0 refingerprint to Database', NULL, '3.6.3', NULL, NULL, '9064126502'),
('276', 'robroland', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.317', 270, 'EXECUTED', '8:59dd1fb0732c7a9b78bce896c0cff3c0', 'addColumn tableName=pulse_card', 'Added 0.38.0 - Dashboard subscriptions', NULL, '3.6.3', NULL, NULL, '9064126502'),
('277', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.319', 271, 'EXECUTED', '8:367180f0820b72ad2c60212e67ae53e7', 'dropForeignKeyConstraint baseTableName=pulse_card, constraintName=fk_pulse_card_ref_pulse_card_id', 'Added 0.38.0 - Dashboard subscriptions', NULL, '3.6.3', NULL, NULL, '9064126502'),
('278', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.322', 272, 'EXECUTED', '8:fc4fb1c1e3344374edd7b9f1f0d34c89', 'addForeignKeyConstraint baseTableName=pulse_card, constraintName=fk_pulse_card_ref_pulse_card_id, referencedTableName=report_dashboardcard', 'Added 0.38.0 - Dashboard subscrptions', NULL, '3.6.3', NULL, NULL, '9064126502'),
('279', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.327', 273, 'EXECUTED', '8:63dfccd51b62b939da71fe4435f58679', 'addColumn tableName=pulse', 'Added 0.38.0 - Dashboard subscriptions', NULL, '3.6.3', NULL, NULL, '9064126502'),
('280', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.329', 274, 'EXECUTED', '8:ae966ee1e40f20ea438daba954a8c2a6', 'addForeignKeyConstraint baseTableName=pulse, constraintName=fk_pulse_ref_dashboard_id, referencedTableName=report_dashboard', 'Added 0.38.0 - Dashboard subscriptions', NULL, '3.6.3', NULL, NULL, '9064126502'),
('281', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.331', 275, 'EXECUTED', '8:3039286581c58eee7cca9c25fdf6d792', 'renameColumn newColumnName=semantic_type, oldColumnName=special_type, tableName=metabase_field', 'Added 0.39 - Semantic type system - rename special_type', NULL, '3.6.3', NULL, NULL, '9064126502'); 
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('282', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.335', 276, 'EXECUTED', '8:d4b8566ee11d9f8a3d6c8c9539f6526d', 'sql; sql; sql', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('283', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.339', 277, 'EXECUTED', '8:2220e1b1cdb57212820b96fa3107f7c3', 'sql; sql; sql', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('284', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.345', 278, 'EXECUTED', '8:c7dc9a60bcaf9b2ffcbaabd650c959b2', 'addColumn tableName=metabase_field', 'Added 0.39 - Semantic type system - add effective type', NULL, '3.6.3', NULL, NULL, '9064126502'),
('285', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.351', 279, 'EXECUTED', '8:cf7d6f5135fa3397a7dc67509d1c286e', 'addColumn tableName=metabase_field', 'Added 0.39 - Semantic type system - add coercion column', NULL, '3.6.3', NULL, NULL, '9064126502'),
('286', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.353', 280, 'EXECUTED', '8:bce9ab328411f05d8c52d64bff5bded0', 'sql', 'Added 0.39 - Semantic type system - set effective_type default', NULL, '3.6.3', NULL, NULL, '9064126502'),
('287', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.357', 281, 'EXECUTED', '8:0679eedae767a8648383aac2f923e413', 'sql', 'Added 0.39 - Semantic type system - migrate ISO8601 strings', NULL, '3.6.3', NULL, NULL, '9064126502'),
('288', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.359', 282, 'EXECUTED', '8:943c6dd0c9339729fefcee9207227849', 'sql', 'Added 0.39 - Semantic type system - migrate unix timestamps', NULL, '3.6.3', NULL, NULL, '9064126502'),
('289', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.362', 283, 'EXECUTED', '8:9f7f2e9bbf3236f204c644dc8ea7abef', 'sql', 'Added 0.39 - Semantic type system - migrate unix timestamps (corrects typo- seconds was migrated correctly, not millis and micros)', NULL, '3.6.3', NULL, NULL, '9064126502'),
('290', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.364', 284, 'EXECUTED', '8:98ea7254bc843302db4afe493c4c75e6', 'sql', 'Added 0.39 - Semantic type system - Clobber semantic_type where there was a coercion', NULL, '3.6.3', NULL, NULL, '9064126502'),
('291', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.368', 285, 'EXECUTED', '8:b3b15e2ad791618e3ab1300a5d4f072f', 'createTable tableName=login_history', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('292', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.37', 286, 'EXECUTED', '8:e4ac005f4d4e73d5e1176bcbde510d6e', 'createIndex indexName=idx_user_id, tableName=login_history', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('293', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.373', 287, 'EXECUTED', '8:7ba1bd887f8ae11a186b0e3fe69ab3e0', 'addForeignKeyConstraint baseTableName=login_history, constraintName=fk_login_history_session_id, referencedTableName=core_session', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('294', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.375', 288, 'EXECUTED', '8:88d7a9c88866af42b9f0e7c1df9c2fd0', 'createIndex indexName=idx_session_id, tableName=login_history', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('295', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.377', 289, 'EXECUTED', '8:501e85a50912649416ec22b2871af087', 'createIndex indexName=idx_timestamp, tableName=login_history', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('296', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.379', 290, 'EXECUTED', '8:f9eb8b15c2c889334f3848a6bb4ebdb4', 'createIndex indexName=idx_user_id_device_id, tableName=login_history', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('297', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.381', 291, 'EXECUTED', '8:06c180e4c8361f7550f6f4deaf9fc855', 'createIndex indexName=idx_user_id_timestamp, tableName=login_history', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502');           
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('298', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.386', 292, 'EXECUTED', '8:3c73f77d8d939d14320964a35aeaad5e', 'addColumn tableName=pulse', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('299', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.388', 293, 'EXECUTED', '8:ee3a96e30b07f37240a933e2f0710082', 'addNotNullConstraint columnName=parameters, tableName=pulse', 'Added 0.39.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('300', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.391', 294, 'EXECUTED', '8:8b142aea1e3697d8630a4620ae763c4d', 'renameTable newTableName=collection_permission_graph_revision, oldTableName=collection_revision', 'Added 0.40.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('301', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.393', 295, 'MARK_RAN', '8:aaf1a546a6f5932a157d016f72c02f8a', 'sql', 'Added 0.40.0 renaming collection_revision to collection_permission_graph_revision', NULL, '3.6.3', NULL, NULL, '9064126502'),
('303', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.397', 296, 'EXECUTED', '8:506e174d6656b09ddedf19e97c0d3c3d', 'createTable tableName=moderation_review', 'Added 0.40.0', NULL, '3.6.3', NULL, NULL, '9064126502'),
('304', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.401', 297, 'EXECUTED', '8:35960cd7ee3081be719bfb5267ae1a83', 'sql', 'Added 0.40.0 (replaces a data migration dating back to 0.20.0)', NULL, '3.6.3', NULL, NULL, '9064126502'),
('305', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.405', 298, 'EXECUTED', '8:0a0c65f58b80bf74c149a3854cbeeae4', 'sql', 'Added 0.40.0 (replaces a data migration dating back to 0.20.0)', NULL, '3.6.3', NULL, NULL, '9064126502'),
('308', 'howonlee', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.41', 299, 'EXECUTED', '8:4a52c3a0391a0313a062b60a52c0d7de', 'addColumn tableName=query_execution', 'Added 0.40.0 Track cache hits in query_execution table', NULL, '3.6.3', NULL, NULL, '9064126502'),
('309', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.415', 300, 'EXECUTED', '8:26cc1f3ba949d8ce0d56350caacffbd8', 'addColumn tableName=collection', 'Added 0.40.0 - Add type to collections', NULL, '3.6.3', NULL, NULL, '9064126502'),
('310', 'howonlee', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.42', 301, 'EXECUTED', '8:eeba2296f23236d035812360122fd065', 'update tableName=setting', 'Added 0.40.0 Migrate friendly field names', NULL, '3.6.3', NULL, NULL, '9064126502'),
('311', 'howonlee', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.423', 302, 'EXECUTED', '8:a26e31914822a5176848abbb7c5415bd', 'sql; sql', 'Added 0.40.0 Migrate friendly field names, not noop', NULL, '3.6.3', NULL, NULL, '9064126502'),
('312', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.425', 303, 'EXECUTED', '8:77ef89ba2e7bc19231d9364492091764', 'sql; sql; sql', 'Added 0.41.0 Backfill collection_id for dashboard subscriptions', NULL, '3.6.3', NULL, NULL, '9064126502'),
('314', 'howonlee', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.429', 304, 'EXECUTED', '8:c9ad2637412d91b26b616a4df4190704', 'addColumn tableName=metabase_database', 'Added 0.41.0 Fine grained caching controls', NULL, '3.6.3', NULL, NULL, '9064126502'),
('315', 'howonlee', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.436', 305, 'EXECUTED', '8:5b186b8ab743cde5a7f4bf5eadcd520c', 'addColumn tableName=report_dashboard', 'Added 0.41.0 Fine grained caching controls, pt 2', NULL, '3.6.3', NULL, NULL, '9064126502'),
('316', 'howonlee', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-21 20:55:28.439', 306, 'EXECUTED', '8:1b7c340684b27af9179613bc351e444f', 'addColumn tableName=view_log', 'Added 0.41.0 Fine grained caching controls, pt 3', NULL, '3.6.3', NULL, NULL, '9064126502'),
('313', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.104', 307, 'EXECUTED', '8:b57e2a114a2273ff4a7754be789ea6fe', 'createTable tableName=secret', 'Added 0.42.0 - Secret domain object.', NULL, '4.10.0', NULL, NULL, '9120960798');       
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('381', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.157', 308, 'EXECUTED', '8:048be5b22042724ab3db240e14e43886', 'createIndex indexName=idx_query_execution_card_id, tableName=query_execution', 'Added 0.41.2 Add index to QueryExecution card_id to fix performance issues (#18759)', NULL, '4.10.0', NULL, NULL, '9120960798'),
('382', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.163', 309, 'EXECUTED', '8:e8c01b2cf428b1e8968393cf31afb188', 'createIndex indexName=idx_moderation_review_item_type_item_id, tableName=moderation_review', 'Added 0.41.2 Add index to ModerationReview moderated_item_type + moderated_item_id to fix performance issues (#18759)', NULL, '4.10.0', NULL, NULL, '9120960798'),
('383', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.177', 310, 'EXECUTED', '8:eacd3281e0397c61047e4a69e725a5ec', 'createIndex indexName=idx_query_execution_card_id_started_at, tableName=query_execution', 'Added 0.41.3 -- Add index to QueryExecution card_id + started_at to fix performance issue', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-000', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.213', 311, 'EXECUTED', '8:5500782a64248810f4a5ca1dc9a6144d', 'dropColumn columnName=entity_name, tableName=metabase_table', 'Added 0.42.0 Remove unused column (#5240)', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-001', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.219', 312, 'MARK_RAN', '8:9952153cbff16147bcb47b4a26e02089', 'sql; sql; sql', 'Added 0.42.0 Attempt to add Card.database_id (by parsing query) to rows that are missing it (#5999)', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-002', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.223', 313, 'EXECUTED', '8:81e0ab53dd2e20cde32e7449155551c2', 'addNotNullConstraint columnName=database_id, tableName=report_card', 'Added 0.42.0 Added constraint we should have had all along (#5999)', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-003', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.27', 314, 'EXECUTED', '8:4a2036164dac96df6066a0d633fab7b5', 'addColumn tableName=report_card', 'Added 0.42.0 Initial support for datasets based on questions', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-004', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.283', 315, 'EXECUTED', '8:d9a1dbf5cdc249516796fd9ed81305a4', 'modifyDataType columnName=details, tableName=activity', 'Added 0.42.0 - modify type of activity.details from text to text', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-005', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.286', 316, 'MARK_RAN', '8:136b2b7ee7dd813b8d3a3154d1bea708', 'modifyDataType columnName=description, tableName=collection', 'Added 0.42.0 - modify type of collection.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-006', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.289', 317, 'MARK_RAN', '8:5fe4654ed7abd89f71eb9372ac208da3', 'modifyDataType columnName=name, tableName=collection', 'Added 0.42.0 - modify type of collection.name from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-007', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.293', 318, 'MARK_RAN', '8:592bfa5fba147bd0ba28c267c796a65d', 'modifyDataType columnName=context, tableName=computation_job', 'Added 0.42.0 - modify type of computation_job.context from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-008', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.297', 319, 'MARK_RAN', '8:ea964b569fd70a9f937967179ad96e96', 'modifyDataType columnName=payload, tableName=computation_job_result', 'Added 0.42.0 - modify type of computation_job_result.payload from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798');               
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v42.00-009', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.3', 320, 'MARK_RAN', '8:faa3d926a4c1ea101a87f80469e4c3b5', 'modifyDataType columnName=anti_csrf_token, tableName=core_session', 'Added 0.42.0 - modify type of core_session.anti_csrf_token from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-010', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.304', 321, 'MARK_RAN', '8:1538ae25e827ae059a7cc4b7cf225258', 'modifyDataType columnName=login_attributes, tableName=core_user', 'Added 0.42.0 - modify type of core_user.login_attributes from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-011', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.308', 322, 'MARK_RAN', '8:5a13403a42ddb4948873a5f115bb949e', 'modifyDataType columnName=attribute_remappings, tableName=group_table_access_policy', 'Added 0.42.0 - modify type of group_table_access_policy.attribute_remappings from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-012', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.314', 323, 'MARK_RAN', '8:0f7f6537b8a60d83024bcfeff9c5c9d6', 'modifyDataType columnName=device_description, tableName=login_history', 'Added 0.42.0 - modify type of login_history.device_description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-013', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.318', 324, 'MARK_RAN', '8:0ee5d0c8b49419900a86acce11698b9f', 'modifyDataType columnName=ip_address, tableName=login_history', 'Added 0.42.0 - modify type of login_history.ip_address from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-014', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.321', 325, 'MARK_RAN', '8:49dfb6668ca9c8d1cabf8c9656e7ba5b', 'modifyDataType columnName=caveats, tableName=metabase_database', 'Added 0.42.0 - modify type of metabase_database.caveats from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-015', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.325', 326, 'MARK_RAN', '8:90a5ba43867c1a0772641ce942de8fe6', 'modifyDataType columnName=description, tableName=metabase_database', 'Added 0.42.0 - modify type of metabase_database.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-016', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.329', 327, 'MARK_RAN', '8:09ea3ac9939b25db92cc5d4053e6fd4a', 'modifyDataType columnName=details, tableName=metabase_database', 'Added 0.42.0 - modify type of metabase_database.details from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-017', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.332', 328, 'MARK_RAN', '8:14bf9629c1e94583b8240298df8fa6e7', 'modifyDataType columnName=options, tableName=metabase_database', 'Added 0.42.0 - modify type of metabase_database.options from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-018', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.336', 329, 'MARK_RAN', '8:00408a84f8098e850a465a2c98e6aff5', 'modifyDataType columnName=points_of_interest, tableName=metabase_database', 'Added 0.42.0 - modify type of metabase_database.points_of_interest from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-019', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.34', 330, 'MARK_RAN', '8:afa168a1d459106a0ec607f76d15a0aa', 'modifyDataType columnName=caveats, tableName=metabase_field', 'Added 0.42.0 - modify type of metabase_field.caveats from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-020', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.343', 331, 'MARK_RAN', '8:a3dd42bbe25c415ce21e4c180dc1c1d7', 'modifyDataType columnName=database_type, tableName=metabase_field', 'Added 0.42.0 - modify type of metabase_field.database_type from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798');   
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v42.00-021', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.347', 332, 'MARK_RAN', '8:041c129167b10c951f337dba672020d6', 'modifyDataType columnName=description, tableName=metabase_field', 'Added 0.42.0 - modify type of metabase_field.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-022', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.351', 333, 'MARK_RAN', '8:60241b3d3d5f05f238adecfdca69b3b2', 'modifyDataType columnName=fingerprint, tableName=metabase_field', 'Added 0.42.0 - modify type of metabase_field.fingerprint from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-023', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.355', 334, 'MARK_RAN', '8:fc6f2fc275a8f025c150215beb9aa776', 'modifyDataType columnName=has_field_values, tableName=metabase_field', 'Added 0.42.0 - modify type of metabase_field.has_field_values from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-024', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.358', 335, 'MARK_RAN', '8:5f7b73eb4774392a1239d7725bad052b', 'modifyDataType columnName=points_of_interest, tableName=metabase_field', 'Added 0.42.0 - modify type of metabase_field.points_of_interest from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-025', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.362', 336, 'MARK_RAN', '8:5ac77fe617f8f4481e8de7da9015c64f', 'modifyDataType columnName=settings, tableName=metabase_field', 'Added 0.42.0 - modify type of metabase_field.settings from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-026', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.39', 337, 'MARK_RAN', '8:fa7d6c62a44d0c1425fe9e9c43d9d359', 'modifyDataType columnName=human_readable_values, tableName=metabase_fieldvalues', 'Added 0.42.0 - modify type of metabase_fieldvalues.human_readable_values from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-027', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.393', 338, 'MARK_RAN', '8:dd1d2de653ed0fb632760c99987ad312', 'modifyDataType columnName=values, tableName=metabase_fieldvalues', 'Added 0.42.0 - modify type of metabase_fieldvalues.values from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-028', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.396', 339, 'MARK_RAN', '8:12a413714ca4b88f6a502d624b8b6895', 'modifyDataType columnName=caveats, tableName=metabase_table', 'Added 0.42.0 - modify type of metabase_table.caveats from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-029', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.401', 340, 'MARK_RAN', '8:96ae84ed0739fc71247112c488963883', 'modifyDataType columnName=description, tableName=metabase_table', 'Added 0.42.0 - modify type of metabase_table.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-030', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.404', 341, 'MARK_RAN', '8:59e52a188f1d131bb62161ee3ab8f0b0', 'modifyDataType columnName=points_of_interest, tableName=metabase_table', 'Added 0.42.0 - modify type of metabase_table.points_of_interest from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-031', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.408', 342, 'MARK_RAN', '8:7d7a5bc0d758e61a5d48b9d0f46cdf9a', 'modifyDataType columnName=caveats, tableName=metric', 'Added 0.42.0 - modify type of metric.caveats from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-032', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.412', 343, 'MARK_RAN', '8:7d8e0965438cd14097b835a598bcfdf7', 'modifyDataType columnName=definition, tableName=metric', 'Added 0.42.0 - modify type of metric.definition from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798');     
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v42.00-033', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.417', 344, 'MARK_RAN', '8:ecfed282a484cb27d2ac0122a9861d9c', 'modifyDataType columnName=description, tableName=metric', 'Added 0.42.0 - modify type of metric.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-034', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.422', 345, 'MARK_RAN', '8:016c2de3176fa0b3c2d0238923e74e2e', 'modifyDataType columnName=how_is_this_calculated, tableName=metric', 'Added 0.42.0 - modify type of metric.how_is_this_calculated from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-035', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.426', 346, 'MARK_RAN', '8:c8e3cf661d802b8772fefb28d54cc4d2', 'modifyDataType columnName=points_of_interest, tableName=metric', 'Added 0.42.0 - modify type of metric.points_of_interest from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-036', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.43', 347, 'MARK_RAN', '8:18880508f09bb76535dffb5226055256', 'modifyDataType columnName=text, tableName=moderation_review', 'Added 0.42.0 - modify type of moderation_review.text from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-037', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.434', 348, 'MARK_RAN', '8:75b3734278af63ba604e709f3452330e', 'modifyDataType columnName=content, tableName=native_query_snippet', 'Added 0.42.0 - modify type of native_query_snippet.content from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-038', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.439', 349, 'MARK_RAN', '8:50c5ebd57728d39a79c5de02b78d446f', 'modifyDataType columnName=description, tableName=native_query_snippet', 'Added 0.42.0 - modify type of native_query_snippet.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-039', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.443', 350, 'MARK_RAN', '8:1126511637c1da363e26a8abfe0cd9a9', 'modifyDataType columnName=parameters, tableName=pulse', 'Added 0.42.0 - modify type of pulse.parameters from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-040', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.447', 351, 'MARK_RAN', '8:ffcc4cd6e10c850dd78016c75947943f', 'modifyDataType columnName=details, tableName=pulse_channel', 'Added 0.42.0 - modify type of pulse_channel.details from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-041', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.45', 352, 'MARK_RAN', '8:aeffafbd763b7b2b20246dc780e352e2', 'modifyDataType columnName=query, tableName=query', 'Added 0.42.0 - modify type of query.query from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-042', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.454', 353, 'MARK_RAN', '8:337f1a807936a453d20339d05ef6505e', 'modifyDataType columnName=error, tableName=query_execution', 'Added 0.42.0 - modify type of query_execution.error from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-043', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.458', 354, 'MARK_RAN', '8:d6d5d5f81726012b2c72e59d60a9894e', 'modifyDataType columnName=dataset_query, tableName=report_card', 'Added 0.42.0 - modify type of report_card.dataset_query from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-044', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.461', 355, 'MARK_RAN', '8:63f3133301c1baca7b13a6266cf11e8d', 'modifyDataType columnName=description, tableName=report_card', 'Added 0.42.0 - modify type of report_card.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798');        
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v42.00-045', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.465', 356, 'MARK_RAN', '8:b3c0fc88880ccd64a880d439f7668307', 'modifyDataType columnName=embedding_params, tableName=report_card', 'Added 0.42.0 - modify type of report_card.embedding_params from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-046', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.469', 357, 'MARK_RAN', '8:4b4c50c0dbc197c5a15f21d46cae81a9', 'modifyDataType columnName=result_metadata, tableName=report_card', 'Added 0.42.0 - modify type of report_card.result_metadata from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-047', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.473', 358, 'MARK_RAN', '8:35f9bd24b4a500f748168d03273d91bf', 'modifyDataType columnName=visualization_settings, tableName=report_card', 'Added 0.42.0 - modify type of report_card.visualization_settings from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-048', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.476', 359, 'MARK_RAN', '8:783ce0d26e51ba9244c5a25d0e8bfc1f', 'modifyDataType columnName=caveats, tableName=report_dashboard', 'Added 0.42.0 - modify type of report_dashboard.caveats from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-049', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.481', 360, 'MARK_RAN', '8:de19cbe028a00c5831d676a0e9bb9453', 'modifyDataType columnName=description, tableName=report_dashboard', 'Added 0.42.0 - modify type of report_dashboard.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-050', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.485', 361, 'MARK_RAN', '8:7f8278a770d9514f2d4518497bdd53d5', 'modifyDataType columnName=embedding_params, tableName=report_dashboard', 'Added 0.42.0 - modify type of report_dashboard.embedding_params from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-051', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.488', 362, 'MARK_RAN', '8:e3727da5c8fd5077ba3c541d05e9d329', 'modifyDataType columnName=parameters, tableName=report_dashboard', 'Added 0.42.0 - modify type of report_dashboard.parameters from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-052', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.492', 363, 'MARK_RAN', '8:bee03ae62b47cd8c7c7e78ef225be531', 'modifyDataType columnName=points_of_interest, tableName=report_dashboard', 'Added 0.42.0 - modify type of report_dashboard.points_of_interest from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-053', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.496', 364, 'MARK_RAN', '8:bf16b19d46ed69eb51663bbbec93d0a6', 'modifyDataType columnName=parameter_mappings, tableName=report_dashboardcard', 'Added 0.42.0 - modify type of report_dashboardcard.parameter_mappings from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-054', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.499', 365, 'MARK_RAN', '8:3088bdaabb4e1e04951ee3ab22487867', 'modifyDataType columnName=visualization_settings, tableName=report_dashboardcard', 'Added 0.42.0 - modify type of report_dashboardcard.visualization_settings from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-055', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.503', 366, 'MARK_RAN', '8:d6753fc353f44b790b9e750952a869f9', 'modifyDataType columnName=message, tableName=revision', 'Added 0.42.0 - modify type of revision.message from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-056', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.542', 367, 'EXECUTED', '8:6f1e02c9122309b99ac4329631724805', 'modifyDataType columnName=object, tableName=revision', 'Added 0.42.0 - modify type of revision.object from text to text', NULL, '4.10.0', NULL, NULL, '9120960798');           
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v42.00-057', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.545', 368, 'MARK_RAN', '8:21a0331ed3ba2796081a6ce6d5850ed8', 'modifyDataType columnName=caveats, tableName=segment', 'Added 0.42.0 - modify type of segment.caveats from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-058', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.549', 369, 'MARK_RAN', '8:123b3de75914cd8415b20dbc964ac655', 'modifyDataType columnName=definition, tableName=segment', 'Added 0.42.0 - modify type of segment.definition from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-059', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.553', 370, 'MARK_RAN', '8:edbe944897f5694257f7edc661b7067c', 'modifyDataType columnName=description, tableName=segment', 'Added 0.42.0 - modify type of segment.description from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-060', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.556', 371, 'MARK_RAN', '8:30b35e6afdbc2cdf9588fdf40d9bc1b5', 'modifyDataType columnName=points_of_interest, tableName=segment', 'Added 0.42.0 - modify type of segment.points_of_interest from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-061', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.56', 372, 'MARK_RAN', '8:ae76887a049949a201f45132bb7cc23c', 'modifyDataType columnName=value, tableName=setting', 'Added 0.42.0 - modify type of setting.value from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-062', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.564', 373, 'MARK_RAN', '8:b986105790c336d4f9e6c1a8755f23ca', 'modifyDataType columnName=task_details, tableName=task_history', 'Added 0.42.0 - modify type of task_history.task_details from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-063', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.567', 374, 'MARK_RAN', '8:69c5877d81b6cd3974530db1127f90b4', 'modifyDataType columnName=metadata, tableName=view_log', 'Added 0.42.0 - modify type of view_log.metadata from text to text on mysql,mariadb', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-064', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.571', 375, 'MARK_RAN', '8:9169e238663c5d036bd83428d2fa8e4b', 'modifyDataType columnName=results, tableName=query_cache', 'Added 0.42.0 - fix type of query_cache.results on upgrade (in case changeSet 97 was run before #16095)', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-065', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.608', 376, 'EXECUTED', '8:5befdc16aff1cda15744a577889f242a', 'addColumn tableName=core_user', 'Added 0.42.0 - Another modal dismissed state on user. Retaining the same suffix and boolean style to ease an eventual migration.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-066', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.62', 377, 'EXECUTED', '8:b43c6357a5dacd4f7eb3b49c7372b908', 'addColumn tableName=metabase_database', 'Added 0.42.0 - new columns for initial DB sync progress UX. Indicates whether a database has succesfully synced at least one time.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-067', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.635', 378, 'EXECUTED', '8:cc9373fbb8ae35f5599105b1612f762c', 'addColumn tableName=metabase_table', 'Added 0.42.0 - new columns for initial DB sync progress UX. Indicates whether a table has succesfully synced at least one time.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-068', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.647', 379, 'EXECUTED', '8:5f3144422c5fa86d1344f6fe0cf2049f', 'addColumn tableName=metabase_database', 'Added 0.42.0 - new columns for initial DB sync progress UX. Records the ID of the admin who added a database. May be null for the sample dataset, or for databases added prior to 0.42.0.', NULL, '4.10.0', NULL, NULL, '9120960798');     
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v42.00-069', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.653', 380, 'EXECUTED', '8:1497ad69b4a6855a232a4ea121687ba2', 'addForeignKeyConstraint baseTableName=metabase_database, constraintName=fk_database_creator_id, referencedTableName=core_user', 'Added 0.42.0 - adds FK constraint for creator_id column, containing the ID of the admin who added a database.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-070', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.748', 381, 'EXECUTED', '8:82016397101b9d4444381f63d584fa7a', 'addColumn tableName=metabase_database', 'Added 0.42.0 - add Database.settings column to implement Database-local Settings', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v42.00-071', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.763', 382, 'EXECUTED', '8:315c004fe2776340730f660504260575', 'sql', 'Added 0.42.0 - migrates the Sample Dataset to the name "Sample Database"', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-001', 'jeff303', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.749', 383, 'EXECUTED', '8:200f0cc5989f637c12a497a5cad56a58', 'sql', 'Added 0.43.0 - migrates any Database using the old bigquery driver to bigquery-cloud-sdk instead', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-002', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.756', 384, 'MARK_RAN', '8:f964db8e5d278f825b9eb6414195d54d', 'sql', 'Added 0.43.0. Create magic ''All Users'' Permissions Group if it does not already exist.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-003', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.76', 385, 'MARK_RAN', '8:d220feb098ef8e5c6bd44e94166a92d9', 'sql', 'Added 0.43.0. Create magic ''Administrators'' Permissions Group if it does not already exist.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-004', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.771', 386, 'EXECUTED', '8:1c28c6de37700b0ae5f679b86d335764', 'sql', 'Added 0.43.0. Add existing Users to ''All Users'' magic Permissions Group if needed.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-005', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.782', 387, 'EXECUTED', '8:17c0d62516f4af2090010ff9f0f1bf1c', 'sql', 'Added 0.43.0. Add existing Users with ''is_superuser'' flag to ''Administrators'' magic Permissions Group if needed.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-006', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.789', 388, 'EXECUTED', '8:e83e560209f8aa4e57e10a6745715483', 'sql', 'Added 0.43.0. Create root ''/'' permissions entry for the ''Administrators'' magic Permissions Group if needed.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-007', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.793', 389, 'MARK_RAN', '8:134265766925f53d8da208089e4e1082', 'sql', 'Added 0.43.0. Grant permissions for existing Databases to ''All Users'' permissions group.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-008', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.799', 390, 'MARK_RAN', '8:32b1397273c60028aa633d23428527ef', 'sql; sql', 'Added 0.43.0. Migrate legacy ''-site-url'' Setting to ''site-url''. Trim trailing slashes.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-009', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.809', 391, 'EXECUTED', '8:4042df2ae3ac452a896df3cd5f7a839e', 'sql; sql', 'Added 0.43.0. Make sure ''site-url'' Setting includes protocol.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-010', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.816', 392, 'EXECUTED', '8:a26d3c4c474c13897e0d8a677b7443ae', 'sql; sql', 'Added 0.43.0. Migrates value of legacy enable-advanced-humanization Setting to humanization-strategy Setting added in 0.28.0.', NULL, '4.10.0', NULL, NULL, '9120960798');             
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v43.00-011', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.822', 393, 'EXECUTED', '8:5760bcc26e036a34e918cf5eecd109ee', 'sql; sql', 'Added 0.43.0. Remove legacy enable-advanced-humanization Setting.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-012', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.829', 394, 'MARK_RAN', '8:a59acc0e562305bbef5721982deb2028', 'sql', 'Added 0.43.0. Set Field.has_field_values to ''list'' if semantic_type derives from :type/Category.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-014', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.833', 395, 'MARK_RAN', '8:bf03710cb176dd7c720a3e2e47ae7782', 'sql', 'Added 0.43.0. Add ''Migrated Dashboards'' Collection if needed and there are any Dashboards not in a Collection.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-015', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.837', 396, 'MARK_RAN', '8:f615da33f8be6bd251faac925bfc9bbd', 'sql', 'Added 0.43.0. Add ''Migrated Pulses'' Collection if needed and there are any Pulses not in a Collection.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-016', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.841', 397, 'MARK_RAN', '8:d31ad47d1aa56ddee95c15726b6810d8', 'sql', 'Added 0.43.0. Add ''Migrated Questions'' Collection if needed and there are any Cards not in a Collection.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-017', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.846', 398, 'MARK_RAN', '8:969b947a5066941617a9add82975de9a', 'sql', 'Added 0.43.0. Move Dashboards not in a Collection to ''Migrated Dashboards''.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-018', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.849', 399, 'MARK_RAN', '8:b105395ddb21d04c12756e8924ccba83', 'sql', 'Added 0.43.0. Move Pulses not in a Collection to ''Migrated Pulses''.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-019', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.853', 400, 'MARK_RAN', '8:6b2e7344dbf0f3be8ec39b4efdb7a4d5', 'sql', 'Added 0.43.0. Move Cards not in a Collection to ''Migrated Questions''.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-020', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.857', 401, 'MARK_RAN', '8:e3399a0ef504c5f5140e9e866a2e49fd', 'sql', 'Added 0.43.0. Grant the ''All Users'' Permissions Group readwrite perms for the Root Collection.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-021', 'adam-james', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.871', 402, 'EXECUTED', '8:6b432682f811c4099b7018083dfab7a2', 'createTable tableName=timeline', 'Added 0.43.0 - Timeline table for Events', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-022', 'adam-james', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.885', 403, 'EXECUTED', '8:d4a7fd96d5f8299825fbed4a3e001d33', 'createTable tableName=timeline_event', 'Added 0.43.0 - Events table', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-023', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.889', 404, 'EXECUTED', '8:68ea023407382a8f54dc282f601ac6cb', 'createIndex indexName=idx_timeline_collection_id, tableName=timeline', 'Added 0.43.0 - Index on timeline collection_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-024', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.893', 405, 'EXECUTED', '8:0056b773435253b7e8e40d5261897823', 'createIndex indexName=idx_timeline_event_timeline_id, tableName=timeline_event', 'Added 0.43.0 - Index on timeline_event timeline_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-025', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.897', 406, 'EXECUTED', '8:8839ff170d1faac11237f79ce729d637', 'createIndex indexName=idx_timeline_event_timeline_id_timestamp, tableName=timeline_event', 'Added 0.43.0 - Index on timeline timestamp', NULL, '4.10.0', NULL, NULL, '9120960798');      
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v43.00-026', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.94', 407, 'EXECUTED', '8:a04fac9421e10f1901979560afee3b7c', 'addColumn tableName=core_user', 'Added 0.43.0 - adds User.settings column to implement User-local Settings', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-027', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.944', 408, 'EXECUTED', '8:141420f027b84d0d08e944ffc0d005df', 'dropNotNullConstraint columnName=password, tableName=core_user', 'Added 0.43.0. Drop NOT NULL constraint for core_user.password', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-028', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.948', 409, 'EXECUTED', '8:c86e72e67598f29e10de00fe346095b3', 'dropNotNullConstraint columnName=password_salt, tableName=core_user', 'Added 0.43.0. Drop NOT NULL constraint for core_user.password_salt', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-029', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.953', 410, 'EXECUTED', '8:4d5632ee6fae1f8d0d5e6068700ccb2e', 'sql', 'Added 0.43.0. Clear local password for Users using LDAP auth.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-030', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.963', 411, 'EXECUTED', '8:3b73196410d9a3716f705cdc96a0b98b', 'createTable tableName=dashboard_bookmark', 'Added 0.43.0 - Dashboard bookmarks table', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-031', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.968', 412, 'EXECUTED', '8:1081aff22c7fef2be2c63cdec33aad06', 'addUniqueConstraint constraintName=unique_dashboard_bookmark_user_id_dashboard_id, tableName=dashboard_bookmark', 'Added 0.43.0 - Dashboard bookmarks table unique constraint', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-032', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.973', 413, 'EXECUTED', '8:573e98bd0b8392f3c207ae49b1eb20ce', 'createIndex indexName=idx_dashboard_bookmark_user_id, tableName=dashboard_bookmark', 'Added 0.43.0 - Dashboard bookmarks table index on user_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-033', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.977', 414, 'EXECUTED', '8:d9471b53e0666a6d3fc99e3c768ccafa', 'createIndex indexName=idx_dashboard_bookmark_dashboard_id, tableName=dashboard_bookmark', 'Added 0.43.0 - Dashboard bookmarks table index on dashboard_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-034', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.986', 415, 'EXECUTED', '8:1db8bd1c85b5337a1560c0da7fb8e062', 'createTable tableName=card_bookmark', 'Added 0.43.0 - Card bookmarks table', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-035', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.993', 416, 'EXECUTED', '8:9cce81eb78b0c25d01a23d2f74377eda', 'addUniqueConstraint constraintName=unique_card_bookmark_user_id_card_id, tableName=card_bookmark', 'Added 0.43.0 - Card bookmarks table unique constraint', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-036', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:41.999', 417, 'EXECUTED', '8:a107c119de1ee902e9526a0413158093', 'createIndex indexName=idx_card_bookmark_user_id, tableName=card_bookmark', 'Added 0.43.0 - Card bookmarks table index on user_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-037', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.007', 418, 'EXECUTED', '8:80b451e8506f3d3092347cb3f9a96c0c', 'createIndex indexName=idx_card_bookmark_card_id, tableName=card_bookmark', 'Added 0.43.0 - Card bookmarks table index on card_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-038', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.022', 419, 'EXECUTED', '8:12e445545dfcf946fd2f04b3f33e8bb7', 'createTable tableName=collection_bookmark', 'Added 0.43.0 - Collection bookmarks table', NULL, '4.10.0', NULL, NULL, '9120960798');    
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v43.00-039', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.032', 420, 'EXECUTED', '8:88c30bdf22c1bcae694850d81a65b175', 'addUniqueConstraint constraintName=unique_collection_bookmark_user_id_collection_id, tableName=collection_bookmark', 'Added 0.43.0 - Collection bookmarks table unique constraint', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-040', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.036', 421, 'EXECUTED', '8:455175f303c3f64cb9588aca5c6641e0', 'createIndex indexName=idx_collection_bookmark_user_id, tableName=collection_bookmark', 'Added 0.43.0 - Collection bookmarks table index on user_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-041', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.042', 422, 'EXECUTED', '8:b3a84ea8c47896be2931fb73e07459ce', 'createIndex indexName=idx_collection_bookmark_collection_id, tableName=collection_bookmark', 'Added 0.43.0 - Collection bookmarks table index on collection_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-042', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.05', 423, 'EXECUTED', '8:e0b982be997b8e591172f4a7c9dab869', 'sql', 'Added 0.43.0. Grant download permissions for existing Databases to ''All Users'' permissions group', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-043', 'howonlee', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.105', 424, 'EXECUTED', '8:2b0195448dad18ba671d64a0c35ceb79', 'addColumn tableName=metabase_field', 'Added 0.43.0 - Nested field columns in fields', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-044', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.111', 425, 'EXECUTED', '8:537bbbdc3a39703e704e80d757d8cead', 'sql', 'Added 0.43.0 - Removes MetaBot permissions group', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-046', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.121', 426, 'EXECUTED', '8:de349aff4c691f7abd7417421ed4e54e', 'createTable tableName=general_permissions_revision', 'Added 0.43.0 - create General Permission Revision table', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-047', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.128', 427, 'EXECUTED', '8:35c7324ab207528726cc332a5b433a58', 'sql', 'Added 0.43.0. Grant the ''All Users'' Group permissions to create/edit subscriptions and alerts', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-049', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.188', 428, 'EXECUTED', '8:3223a3f02b151cdca259da680de7f848', 'modifyDataType columnName=timestamp, tableName=view_log', 'Added 0.43.0 - Unify datatype with query_execution.started_at so comparable (see 168).', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-050', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.199', 429, 'EXECUTED', '8:d4bc347f147647b361bbe3740d035413', 'addColumn tableName=permissions_group_membership', 'Added 0.43.0. Add permissions_group_membership.is_group_manager', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-051', 'adam-james', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.21', 430, 'EXECUTED', '8:cd0b3deabba3be0abcabd7b8f7fe03c8', 'addColumn tableName=timeline', 'Added 0.43.0 - default boolean on timelines to indicate default timeline for a collection', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-052', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.218', 431, 'EXECUTED', '8:b3963d6c168f5c30f1288c222b8e0e83', 'createTable tableName=bookmark_ordering', 'Added 0.43.0 - bookmark ordering', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-053', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.223', 432, 'EXECUTED', '8:9660924a1b14881a4d5d11e535c6d838', 'addUniqueConstraint constraintName=unique_bookmark_user_id_type_item_id, tableName=bookmark_ordering', 'Added 0.43.0 - bookmark ordering', NULL, '4.10.0', NULL, NULL, '9120960798');            
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v43.00-054', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.229', 433, 'EXECUTED', '8:b353fff839dde25895deba810f64c704', 'addUniqueConstraint constraintName=unique_bookmark_user_id_ordering, tableName=bookmark_ordering', 'Added 0.43.0 - bookmark ordering', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-055', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.234', 434, 'EXECUTED', '8:bd8dd0c8f4391a2ed375f369971b4023', 'createIndex indexName=idx_bookmark_ordering_user_id, tableName=bookmark_ordering', 'Added 0.43.0 - bookmark ordering', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-056', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.253', 435, 'EXECUTED', '8:c418d33e471acbbcd9f86e57b1df4468', 'renameTable newTableName=application_permissions_revision, oldTableName=general_permissions_revision', 'Added 0.43.0 - Rename general permission revision table It''s safe to rename this table without breaking downgrades compatibility because this table was also added in 0.43.0.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-057', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.257', 436, 'MARK_RAN', '8:a96791b95827101abd2cb77361c847ce', 'sql', 'Added 0.43.0 - Rename general_permissions_revision_id_seq', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-058', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.262', 437, 'EXECUTED', '8:bbef3f445957c95a3d42b74b7c8b1fa3', 'sql', 'Added 0.43.0 - Rename general permissios to application permissions', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-059', 'adam-james', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.268', 438, 'EXECUTED', '8:57fb18b8a2b231c107b4d138521166dd', 'addNotNullConstraint columnName=icon, tableName=timeline', 'Added 0.43.0 - disallow nil timeline icons', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-060', 'adam-james', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.274', 439, 'EXECUTED', '8:25978d2800f7e2dd6e8f4ad61027dfa3', 'addNotNullConstraint columnName=icon, tableName=timeline_event', 'Added 0.43.0 - disallow nil timeline event icons', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v43.00-062', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.289', 440, 'EXECUTED', '8:2c24e7af74d3053920fb809b29190303', 'modifyDataType columnName=timestamp, tableName=revision', 'Added 0.43.0 - Unify datatype with revision.timestamp for timezone info (see 17829).', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-000', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.308', 441, 'EXECUTED', '8:05de4b32e627b65202e15435c344e135', 'createTable tableName=persisted_info', 'Added 0.44.0 - Persisted Info for models', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-001', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.313', 442, 'EXECUTED', '8:ca1fe70c2560c013653bbc00b58e2964', 'dropNotNullConstraint columnName=creator_id, tableName=persisted_info', 'Added 0.44.0 - Remove not null constraint from persisted_info.creator_id', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-002', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.333', 443, 'EXECUTED', '8:6dc28d92f89811023b6bcd9d77395634', 'addColumn tableName=metric', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-003', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.355', 444, 'EXECUTED', '8:9bd778cae47bb09833a901fdcf76fee8', 'addColumn tableName=segment', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-004', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.376', 445, 'EXECUTED', '8:4d9ac5fd2c5dbbb6768bb920bd2890cb', 'addColumn tableName=collection', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798');          
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v44.00-005', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.395', 446, 'EXECUTED', '8:8a3712f3787b8c58c3c6f307d5b641c5', 'addColumn tableName=report_dashboard', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-006', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.405', 447, 'EXECUTED', '8:9d9eee07c7b8a7a3c87f6f98e4856b13', 'addColumn tableName=dimension', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-007', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.419', 448, 'EXECUTED', '8:007f472f4397fba9deb7731ddd4a2a9e', 'addColumn tableName=pulse', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-008', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.441', 449, 'EXECUTED', '8:ea3332f011482a9a9e709f922830ba95', 'addColumn tableName=report_card', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-009', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.456', 450, 'EXECUTED', '8:ef0054e0f1d1ac22ff1c81cf01519d0b', 'addColumn tableName=native_query_snippet', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-010', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.467', 451, 'EXECUTED', '8:0e58282581d53882d032811c4ea52c8d', 'addColumn tableName=timeline', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-011', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.479', 452, 'EXECUTED', '8:6a606a9c9351749947263fea4255dc1e', 'addColumn tableName=report_dashboardcard', 'Added 0.44.0 - add entity_id column to all internal entities', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-023', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.506', 453, 'EXECUTED', '8:493153694fde9482c906922a6c63bf88', 'addColumn tableName=report_card', 'Added 0.44.0 - Add parameters to report_card', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-025', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.536', 454, 'EXECUTED', '8:653792e7485e6c6d9063cdd085d8584c', 'addColumn tableName=report_card', 'Added 0.44.0 - Add parameter_mappings to report_card', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-027', 'adam-james', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.541', 455, 'EXECUTED', '8:4fb924ff28472bf113fd4abf5ec8cf1b', 'dropNotNullConstraint columnName=first_name, tableName=core_user', 'Added 0.44.0. Drop NOT NULL constraint for core_user.first_name', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-028', 'adam-james', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.545', 456, 'EXECUTED', '8:8c5c6b0342b7970e15fb93ed618a44c3', 'dropNotNullConstraint columnName=last_name, tableName=core_user', 'Added 0.44.0. Drop NOT NULL constraint for core_user.last_name', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-029', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.556', 457, 'EXECUTED', '8:3380ac2de7c5c6a0b313c81c8a438f28', 'addColumn tableName=metabase_fieldvalues', 'Added 0.44.0 - Add has_more_values to metabase_fieldvalues', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-033', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.56', 458, 'MARK_RAN', '8:2407250e09ed3bd6e36f0fa340b206ac', 'sql', 'Added 0.43.0. Grant the ''All Users'' Permissions Group readwrite perms for the Root Snippets Collection.', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-035', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.568', 459, 'EXECUTED', '8:38dcbf6c407d7a19591ea6c7baa287e3', 'addColumn tableName=metabase_fieldvalues', 'Added 0.44.0. Add type to fieldvalues', NULL, '4.10.0', NULL, NULL, '9120960798');          
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v44.00-037', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.577', 460, 'EXECUTED', '8:6bb5be3d1c58c69d0dc42a38fa150d57', 'addColumn tableName=metabase_fieldvalues', 'Added 0.44.0. Add type to fieldvalues', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-038', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.602', 461, 'EXECUTED', '8:327897734fed2d9f16707cd16c0395f3', 'addColumn tableName=report_card', 'Added 0.44.0 - Add collection_preview to report_card', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-039', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.616', 462, 'EXECUTED', '8:381712e81a39de0ddec9107419c1450a', 'addColumn tableName=native_query_snippet', 'Added 0.44.0 - Add template_tags to native_query_snippet', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-041', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.625', 463, 'EXECUTED', '8:7fba8d5b9bfe7136d1a78c8d8d8fc402', 'addColumn tableName=pulse_card', 'Added 0.44.0 - add entity_id column to PulseCard, PulseChannel', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-042', 'braden', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.635', 464, 'EXECUTED', '8:ca3a5364fcac3da951d35f25d660144f', 'addColumn tableName=pulse_channel', 'Added 0.44.0 - add entity_id column to PulseCard, PulseChannel', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-044', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2022-11-22 12:42:42.646', 465, 'EXECUTED', '8:601311f94a0587a67013e27d793d2cc2', 'dropColumn columnName=template_tags, tableName=native_query_snippet', 'Added 0.44.0 - drop native_query_snippet.template_tags added in v44.00-039', NULL, '4.10.0', NULL, NULL, '9120960798'),
('v44.00-030', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.679791', 466, 'EXECUTED', '8:757a6d90116ca360a4d70bf9f910af1d', 'addColumn tableName=metabase_field', 'Added 0.44.0 - Add database_required to metabase_field', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-001', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.689432', 467, 'EXECUTED', '8:da99b71a4ac7eb662f6a95e69585935e', 'createTable tableName=action', 'Added 0.44.0 - writeback', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-002', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.699421', 468, 'EXECUTED', '8:6da7a6285edb138c404de0eeba209570', 'createTable tableName=query_action', 'Added 0.44.0 - writeback', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-003', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.70437', 469, 'EXECUTED', '8:512337d6d4af38016aa79585abbe03a1', 'addPrimaryKey constraintName=pk_query_action, tableName=query_action', 'Added 0.44.0 - writeback', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-011', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.717784', 470, 'EXECUTED', '8:dcf1cda9f20dca4b6ff8101b13b98c4a', 'addColumn tableName=report_card', 'Added 0.44.0 - writeback', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-012', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.724722', 471, 'EXECUTED', '8:aadf28229f585cff7c4b4c1918e558b2', 'createTable tableName=http_action', 'Added 0.44.0 - writeback', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-013', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.729465', 472, 'EXECUTED', '8:26dba276b14255d4346507a1a25d117b', 'addPrimaryKey constraintName=pk_http_action, tableName=http_action', 'Added 0.44.0 - writeback', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-022', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.741023', 473, 'EXECUTED', '8:d46fa24e4d75a11b2e92aecbf39c6ee1', 'createTable tableName=app', 'Added 0.45.0 - add app container', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-023', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.75126', 474, 'EXECUTED', '8:c6c1ff9ca3b62d4cda3a2d782dd86f2f', 'addForeignKeyConstraint baseTableName=app, constraintName=fk_app_ref_dashboard_id, referencedTableName=report_dashboard', 'Added 0.45.0 - add app container', NULL, '4.11.0', NULL, NULL, '0552011286');          
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v45.00-025', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.77156', 475, 'EXECUTED', '8:50a43cea3123ecdb602123825f5a7dbf', 'addColumn tableName=report_dashboard', 'Added 0.45.0 - mark app pages', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-026', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.789879', 476, 'EXECUTED', '8:ae77d4086998911877e3207fcf90c9c7', 'addColumn tableName=report_dashboardcard', 'Added 0.45.0 - apps add action_id to report_dashboardcard', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-027', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.796461', 477, 'EXECUTED', '8:40c3c8391c1416a3bce09ca3c7237173', 'addForeignKeyConstraint baseTableName=report_dashboardcard, constraintName=fk_report_dashboardcard_ref_action_id, referencedTableName=action', 'Added 0.45.0 - apps add fk for action_id to report_dashboardcard', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-028', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.802366', 478, 'EXECUTED', '8:f8f68f80627aeb2ef7f28f2af2b5a31b', 'renameColumn newColumnName=size_x, oldColumnName=sizeX, tableName=report_dashboardcard', 'Added 0.45.0 -- rename DashboardCard sizeX to size_x. See https://github.com/metabase/metabase/issues/16344', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-029', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.807539', 479, 'EXECUTED', '8:579957652133eab3ee023dd911162a1e', 'renameColumn newColumnName=size_y, oldColumnName=sizeY, tableName=report_dashboardcard', 'Added 0.45.0 -- rename DashboardCard size_y to size_y. See https://github.com/metabase/metabase/issues/16344', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-030', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.812111', 480, 'EXECUTED', '8:41eda097feb034c4d01b2dbda74753c8', 'addDefaultValue columnName=size_x, tableName=report_dashboardcard', 'Added 0.45.0 -- add default value to DashboardCard size_x -- this was previously done by Toucan', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-031', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.816852', 481, 'EXECUTED', '8:6416e373e335dc1c12c7571af674dede', 'addDefaultValue columnName=size_y, tableName=report_dashboardcard', 'Added 0.45.0 -- add default value to DashboardCard size_y -- this was previously done by Toucan', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-032', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.820912', 482, 'EXECUTED', '8:d97444fe24a2dca618a2804741335f6d', 'addDefaultValue columnName=created_at, tableName=report_dashboardcard', 'Added 0.45.0 -- add default value for DashboardCard created_at (Postgres/H2)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-033', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.825871', 483, 'MARK_RAN', '8:34df79fc79e086ab05bb2fd79bb4e322', 'sql', 'Added 0.45.0 -- add default value for DashboardCard created_at (MySQL/MariaDB)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-034', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.831384', 484, 'EXECUTED', '8:ba0505a87ef876026759cdcb4e704f41', 'addDefaultValue columnName=updated_at, tableName=report_dashboardcard', 'Added 0.45.0 -- add default value for DashboardCard updated_at (Postgres/H2)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-035', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.844834', 485, 'MARK_RAN', '8:dcee49781d80d9c4be5ad9dd51975a07', 'sql', 'Added 0.45.0 -- add default value for DashboardCard updated_at (MySQL/MariaDB)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-036', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.860684', 486, 'EXECUTED', '8:cd4009254bd2c56aaf281082038c1f0b', 'createTable tableName=model_action', 'Added 0.45.0 - add model action table', NULL, '4.11.0', NULL, NULL, '0552011286');     
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v45.00-037', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.869536', 487, 'EXECUTED', '8:56f548cc84a53cc6d18302761ee71554', 'addUniqueConstraint constraintName=unique_model_action_card_id_slug, tableName=model_action', 'Added 0.45.0 - model action', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-038', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.873434', 488, 'EXECUTED', '8:c38ddc295206e807c7254581ed9566c3', 'addDefaultValue columnName=created_at, tableName=metabase_database', 'Added 0.45.0 -- add default value for Database created_at (Postgres/H2)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-039', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.878457', 489, 'MARK_RAN', '8:2c539d76d3aead7f7366b15333132b30', 'sql', 'Added 0.45.0 -- add default value for Database created_at (MySQL/MariaDB)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-040', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.883727', 490, 'EXECUTED', '8:00ac7c24cfd3e7ea3a21f21f4e45dbcf', 'addDefaultValue columnName=updated_at, tableName=metabase_database', 'Added 0.45.0 -- add default value for Database updated_at (Postgres/H2)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-041', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.88729', 491, 'MARK_RAN', '8:82dc368fa3e0163a06929da6e9556fe2', 'sql', 'Added 0.45.0 -- add default value for Database updated_at (MySQL/MariaDB)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-042', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.897988', 492, 'EXECUTED', '8:d04207471480e335f14094e9a7a5d293', 'sql', 'Added 0.45.0 -- add default value for Database with NULL details', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-043', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.905009', 493, 'EXECUTED', '8:1d07a5435e51abd0663458d907865a6b', 'addNotNullConstraint columnName=details, tableName=metabase_database', 'Added 0.45.0 -- make Database details NOT NULL', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-044', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.916377', 494, 'EXECUTED', '8:0b23976c5d2248d511ac31b244efef22', 'createTable tableName=app_permission_graph_revision', 'Added 0.45.0 -- create app permission graph revision table', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-048', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.937689', 495, 'EXECUTED', '8:0aca8f157f163e62805b7202f8aa202f', 'addColumn tableName=collection', 'Added 0.45.0 -- add created_at to Collection', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-049', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.942728', 496, 'EXECUTED', '8:df2097d176fad99c142c5dd75ce8a3db', 'sql; sql; sql', 'Added 0.45.0 -- set Collection.created_at to User.date_joined for Personal Collections', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-050', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.954361', 497, 'EXECUTED', '8:65ecfe481e7c0141bb82bb3401cfa94e', 'sql; sql; sql', 'Added 0.45.0 -- seed Collection.created_at with value of oldest item for non-Personal Collections', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-051', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.957674', 498, 'MARK_RAN', '8:2378c7031da6871dcf1c737bf323d211', 'modifyDataType columnName=after, tableName=collection_permission_graph_revision', 'Added 0.45.0 - modify type of collection_permission_graph_revision.after from text to text on mysql,mariadb', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-052', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.961063', 499, 'MARK_RAN', '8:b7343eb9556c3e636b6f8dd70708c0b3', 'modifyDataType columnName=before, tableName=collection_permission_graph_revision', 'Added 0.45.0 - modify type of collection_permission_graph_revision.before from text to text on mysql,mariadb', NULL, '4.11.0', NULL, NULL, '0552011286');          
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v45.00-053', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.964389', 500, 'MARK_RAN', '8:fa552605d5a587c4fa74e0c6bd358097', 'modifyDataType columnName=remark, tableName=collection_permission_graph_revision', 'Added 0.45.0 - modify type of collection_permission_graph_revision.remark from text to text on mysql,mariadb', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-054', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.967745', 501, 'MARK_RAN', '8:60862c4ecf505727e839ac5e94f95528', 'modifyDataType columnName=after, tableName=permissions_revision', 'Added 0.45.0 - modify type of permissions_revision.after from text to text on mysql,mariadb', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-055', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.971394', 502, 'MARK_RAN', '8:717f0c266da5768098a2ead6168f3b18', 'modifyDataType columnName=before, tableName=permissions_revision', 'Added 0.45.0 - modify type of permissions_revision.before from text to text on mysql,mariadb', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-056', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.974809', 503, 'MARK_RAN', '8:a1f364d45a922c90b4fac741a22e66b3', 'modifyDataType columnName=remark, tableName=permissions_revision', 'Added 0.45.0 - modify type of permissions_revision.remark from text to text on mysql,mariadb', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v45.00-057', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.978194', 504, 'MARK_RAN', '8:650a5b435f8195765a2ab1e3e4bc7b14', 'modifyDataType columnName=value, tableName=secret', 'Added 0.45.0 - modify type of secret.value from blob to longblob on mysql,mariadb', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-000', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.983617', 505, 'EXECUTED', '8:97251413292221e51490e990b6f683f2', 'createTable tableName=implicit_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-001', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.989842', 506, 'EXECUTED', '8:4a90c7523749aa7e4e4d2ea9dd6db777', 'addColumn tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-002', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:11.995825', 507, 'EXECUTED', '8:b2b112f0df413692631b75822f658de1', 'addColumn tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-003', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.00199', 508, 'EXECUTED', '8:45b8358f31811335aaa93032726a042b', 'addColumn tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-004', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.007972', 509, 'EXECUTED', '8:0ce8ff05beffc5c72e2348bcec581eee', 'addColumn tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-005', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.013941', 510, 'EXECUTED', '8:84cf1fbf435c7c3f794c973de4d62fad', 'addColumn tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-006', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.019837', 511, 'EXECUTED', '8:df43ef08b76c33c5626dbf9b226717b5', 'addColumn tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-007', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.024363', 512, 'EXECUTED', '8:6830901cccc14ad22cdfd86bd3a2afe7', 'addForeignKeyConstraint baseTableName=action, constraintName=fk_action_model_id, referencedTableName=report_card', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286');  
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v46.00-008', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.029959', 513, 'EXECUTED', '8:6e73a8683d1b757c5f9034513ec8a581', 'addColumn tableName=query_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-009', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.035483', 514, 'EXECUTED', '8:2b4fd7cee77d5ed8de22fcc2fba158bc', 'addColumn tableName=query_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-010', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.03978', 515, 'EXECUTED', '8:77ca03e5a0dbe370461295da1c77cf0f', 'addForeignKeyConstraint baseTableName=query_action, constraintName=fk_query_action_database_id, referencedTableName=metabase_database', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-011', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.044832', 516, 'EXECUTED', '8:3c76c705376a9d70c98d26529db60efc', 'sql; sql; sql', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-012', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.048708', 517, 'EXECUTED', '8:7e4dffe8bbbb740207001ead696a8557', 'dropNotNullConstraint columnName=card_id, tableName=query_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-013', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.063958', 518, 'EXECUTED', '8:96dfaa20265be749af8590f75d465348', 'sql', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-014', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.072023', 519, 'EXECUTED', '8:585958ee7e90e23a9cc22ebf7e4228cb', 'dropForeignKeyConstraint baseTableName=query_action, constraintName=fk_query_action_ref_card_id', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-015', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.088321', 520, 'EXECUTED', '8:9b57260e146618caff3f468116031008', 'dropColumn columnName=card_id, tableName=query_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-016', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.101046', 521, 'EXECUTED', '8:cb79eef9f483e73b3d9b571f916b8598', 'sql', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-017', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.106942', 522, 'EXECUTED', '8:90525ade34e7bb883bf75cdf8a2b3340', 'dropColumn columnName=name, tableName=http_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-018', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.13168', 523, 'EXECUTED', '8:cf3c31a975dc86f1def6ee5d11f5f9dc', 'dropColumn columnName=description, tableName=http_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-019', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.149346', 524, 'EXECUTED', '8:a9f70163707cc7f798bdd0527a55854b', 'dropColumn columnName=is_write, tableName=report_card', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-020', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.15654', 525, 'EXECUTED', '8:2def45c139267d7424e1187764122669', 'addNotNullConstraint columnName=database_id, tableName=query_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-021', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.168798', 526, 'EXECUTED', '8:52c8107f4bcc6e9889b270e0a4954921', 'addNotNullConstraint columnName=dataset_query, tableName=query_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286');           
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v46.00-022', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.175764', 527, 'EXECUTED', '8:52c8107f4bcc6e9889b270e0a4954921', 'addNotNullConstraint columnName=dataset_query, tableName=query_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-023', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.182665', 528, 'EXECUTED', '8:33c91db1b039855af8bf1dc8315bd5d2', 'addNotNullConstraint columnName=model_id, tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-024', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.189841', 529, 'EXECUTED', '8:080ff435bae61f324535393d9e78de38', 'addNotNullConstraint columnName=name, tableName=action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-025', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.204512', 530, 'EXECUTED', '8:60016f3de98c7382602485f13bc4e04f', 'dropTable tableName=model_action', 'Added 0.46.0 - Unify action representation', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-026', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.216789', 531, 'EXECUTED', '8:948b9653bfbadeb29c847ef41d053dba', 'addColumn tableName=metabase_database', 'Added 0.46.0 -- add field for tracking DBMS versions', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-027', 'snoe', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.226889', 532, 'EXECUTED', '8:5f7773b797a3c85a99cd35cb60cfd0b3', 'addColumn tableName=metabase_fieldvalues', 'Added 0.46.0 -- add last_used_at to FieldValues', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-028', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.236496', 533, 'EXECUTED', '8:33cc1a038e926acb7dfd7cf29b4fa545', 'createTable tableName=parameter_card', 'Added 0.46.0 -- Join table connecting cards to dashboards/cards''s parameters that need custom filter values from the card', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-029', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.24374', 534, 'EXECUTED', '8:96336855a4180eaf51d7be4a97f3b1a4', 'dropUniqueConstraint constraintName=unique_dimension_field_id_name, tableName=dimension', 'Make Dimension <=> Field a 1t1 relationship. Drop unique constraint on field_id + name. (1/3)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-030', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.25345', 535, 'EXECUTED', '8:e1f67579cb8dc1102445df299636cb7b', 'sql', 'Make Dimension <=> Field a 1t1 relationship. Delete duplicate entries. (2/3)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-031', 'camsaul', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.260479', 536, 'EXECUTED', '8:a9b4c86de880b2bc01e208d8d4d8cf64', 'addUniqueConstraint constraintName=unique_dimension_field_id, tableName=dimension', 'Make Dimension <=> Field a 1t1 relationship. Add unique constraint on field_id. (3/3)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-032', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.273584', 537, 'EXECUTED', '8:2a7de9726282af199737a334395f1068', 'addUniqueConstraint constraintName=unique_parameterized_object_card_parameter, tableName=parameter_card', 'Added 0.46.0 -- Unique parameter_card', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-033', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.285802', 538, 'EXECUTED', '8:25bc5b1a806d4b352d43f5b16e7e6e20', 'createIndex indexName=idx_parameter_card_parameterized_object_id, tableName=parameter_card', 'Added 0.46.0 -- parameter_card index on connected object', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-034', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.298289', 539, 'EXECUTED', '8:5a6b5a2cf7160baec4f81f6675de898c', 'createIndex indexName=idx_parameter_card_card_id, tableName=parameter_card', 'Added 0.46.0 -- parameter_card index on connected card', NULL, '4.11.0', NULL, NULL, '0552011286');        
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v46.00-035', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.312734', 540, 'EXECUTED', '8:0639e4c0939848b4377792290311f239', 'addForeignKeyConstraint baseTableName=parameter_card, constraintName=fk_parameter_card_ref_card_id, referencedTableName=report_card', 'Added 0.46.0 - parameter_card.card_id foreign key', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-036', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.321324', 541, 'EXECUTED', '8:39d440f29a481e9f0915532106079a1a', 'dropTable tableName=app_permission_graph_revision', 'App containers are removed in 0.46.0', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-037', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.334305', 542, 'EXECUTED', '8:dbbe898501c554e3ee74c6b9ef9c1575', 'dropColumn columnName=is_app_page, tableName=report_dashboard', 'App pages are removed in 0.46.0', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-038', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.344938', 543, 'EXECUTED', '8:220a27bae93423a2c9a76f611f10b87b', 'dropTable tableName=app', 'App containers are removed in 0.46.0', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-039', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.351674', 544, 'EXECUTED', '8:7ed32de11fbe8565148d8491f908ad05', 'addColumn tableName=parameter_card', 'Added 0.46.0 - add entity_id to parameter_card', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-040', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.355744', 545, 'EXECUTED', '8:7fec881cac598cce34b62c98fcf37563', 'addDefaultValue columnName=size_x, tableName=report_dashboardcard', 'Added 0.46.0 -- Bump default dashcard size to 4x4', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-041', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.359488', 546, 'EXECUTED', '8:0214a8d0b94a9eb48aad75b1d50dd279', 'addDefaultValue columnName=size_y, tableName=report_dashboardcard', 'Added 0.46.0 -- Bump default dashcard size to 4x4', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-042', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.370914', 547, 'EXECUTED', '8:7b91ad83569565517c43e9f7b9bfa29a', 'createIndex indexName=idx_query_execution_executor_id, tableName=query_execution', 'Added 0.46.0 -- index query_execution.executor_id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-043', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.382575', 548, 'EXECUTED', '8:d9cab29076035068cfc49fb9570832af', 'createIndex indexName=idx_query_execution_context, tableName=query_execution', 'Added 0.46.0 -- index query_execution.context', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-045', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.389615', 549, 'EXECUTED', '8:7a9cabf1c693de8b0c9555f7deb072a4', 'addColumn tableName=action', 'Added 0.46.0 -- add public_uuid to action.', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-051', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.393603', 550, 'EXECUTED', '8:74e83fc2ee7c1a06a94f07830f361773', 'dropDefaultValue columnName=row, tableName=report_dashboardcard', 'Added 0.46.0 -- drop defaults for dashcard''s position and size', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-052', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.397416', 551, 'EXECUTED', '8:948c978fcb2d938d272a05b3e56808d1', 'dropDefaultValue columnName=col, tableName=report_dashboardcard', 'Added 0.46.0 -- drop defaults for dashcard''s position and size', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-053', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.401298', 552, 'EXECUTED', '8:04e092dbffdfda13f28b1e3ea38299a7', 'dropDefaultValue columnName=size_x, tableName=report_dashboardcard', 'Added 0.46.0 -- drop defaults for dashcard''s position and size', NULL, '4.11.0', NULL, NULL, '0552011286');        
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v46.00-054', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.405162', 553, 'EXECUTED', '8:bc3abf9ab94199aeaebb2be28dea77aa', 'dropDefaultValue columnName=size_y, tableName=report_dashboardcard', 'Added 0.46.0 -- drop defaults for dashcard''s position and size', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-055', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.41209', 554, 'EXECUTED', '8:48a516459b84a21e9edbdbfe1bffd671', 'addColumn tableName=action', 'Added 0.46.0 -- add made_public_by_id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-056', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.430028', 555, 'EXECUTED', '8:af93ab591b44b5d81d8d8a496600c1bc', 'createIndex indexName=idx_action_public_uuid, tableName=action', 'Added 0.46.0 -- add public_uuid and made_public_by_id to action. public_uuid is indexed', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-057', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.434161', 556, 'EXECUTED', '8:aff3b0e15dcfc36a4fd97faade0751c0', 'modifyDataType columnName=parameter_id, tableName=parameter_card', 'Added 0.46.0 -- parameter_card.parameter_id long enough to hold a uuid', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-058', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.441359', 557, 'EXECUTED', '8:11440c629413c7231e7f156347353761', 'addForeignKeyConstraint baseTableName=action, constraintName=fk_action_made_public_by_id, referencedTableName=core_user', 'Added 0.46.0 -- add FK constraint for action.made_public_by_id with core_user.id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-059', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.44877', 558, 'EXECUTED', '8:6ddec7d622e9200e36bd5e2e2e0a48c2', 'addColumn tableName=action', 'Added 0.46.0 -- add actions.creator_id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-060', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.45272', 559, 'EXECUTED', '8:fc1762a930726afb11131acf3a56312b', 'createIndex indexName=idx_action_creator_id, tableName=action', 'Added 0.46.0 -- action.creator_id index', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-061', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.45721', 560, 'EXECUTED', '8:d57393ae0e96a9b1a0bd7a66597cb485', 'addForeignKeyConstraint baseTableName=action, constraintName=fk_action_creator_id, referencedTableName=core_user', 'Added 0.46.0 -- action.creator_id index', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-062', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.464952', 561, 'EXECUTED', '8:20efdbd79df3c76cbf77318d871a9836', 'addColumn tableName=action', 'Added 0.46.0 -- add actions.archived', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-064', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.469234', 562, 'EXECUTED', '8:0ac10ca0d82f1bbe39737eb0a8fdcd7d', 'renameTable newTableName=sandboxes, oldTableName=group_table_access_policy', 'Added 0.46.0 -- rename `group_table_access_policy` to `sandboxes`', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-065', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.47631', 563, 'EXECUTED', '8:5cbb335952dd1ab7a137d80d6c1ab82e', 'addColumn tableName=sandboxes', 'Added 0.46.0 -- add `permission_id` to `sandboxes`', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-066', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.481062', 564, 'EXECUTED', '8:9479967ff9afb914290a1874b5a5af4c', 'sql', 'Added 0.46.0 -- backfill `permission_id` values in `sandboxes`', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-067', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.485013', 565, 'EXECUTED', '8:e0fbd2514cc960cc74106204ac65a3ea', 'sql', 'Added 0.46.0 -- remove orphaned entries in `sandboxes`', NULL, '4.11.0', NULL, NULL, '0552011286');               
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v46.00-070', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.492777', 566, 'EXECUTED', '8:d440a8d0aef0bbfdae24a9c70bd37605', 'addColumn tableName=action', 'Added 0.46.0 - add entity_id column to action', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-074', 'metamben', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.502805', 567, 'EXECUTED', '8:c1273a3003d82638a0a5413bf2aa6777', 'modifyDataType columnName=updated_at, tableName=report_card', 'Added 0.46.0 -- increase precision of updated_at of report_card', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-075', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.507368', 568, 'EXECUTED', '8:b789694fc9873daa18f73c95a0672d17', 'addForeignKeyConstraint baseTableName=sandboxes, constraintName=fk_sandboxes_ref_permissions, referencedTableName=permissions', 'Add foreign key constraint on sandboxes.permission_id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-076', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.511196', 569, 'EXECUTED', '8:1f3bca9964c047b0ce8787ec277ca8ee', 'dropForeignKeyConstraint baseTableName=sandboxes, constraintName=fk_sandboxes_ref_permissions', 'Remove foreign key constraint on sandboxes.permission_id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-077', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.515605', 570, 'EXECUTED', '8:963c0cd3a7bd2858e4dbfd4d4aad95cb', 'addForeignKeyConstraint baseTableName=sandboxes, constraintName=fk_sandboxes_ref_permissions, referencedTableName=permissions', 'Add foreign key constraint on sandboxes.permission_id with the appropriate onDelete policy', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-079', 'john-metabase', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:12.519627', 571, 'EXECUTED', '8:de167f33d3f7670246623466487d2e67', 'sql', 'Added 0.46.0 -- migrates Databases using deprecated and removed presto driver to presto-jdbc', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-080', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:14.128976', 572, 'EXECUTED', '8:022a846feb10103f2e9fe4b58cb792d6', 'customChange', 'Migrate data permission paths from v1 to v2 (splitting them into separate data and query permissions)', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-084', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:14.133514', 573, 'EXECUTED', '8:b4f465ca3be584028e077b907656b804', 'dropForeignKeyConstraint baseTableName=action, constraintName=fk_action_model_id', 'Added 0.46.0 - CASCADE delete for action.model_id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-085', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:14.149576', 574, 'EXECUTED', '8:17fe48c56aa457a6a09775099d44d7a5', 'addForeignKeyConstraint baseTableName=action, constraintName=fk_action_model_id, referencedTableName=report_card', 'Added 0.46.0 - CASCADE delete for action.model_id', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-086', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:14.326984', 575, 'EXECUTED', '8:677e076d8741275d31a02e97531fd930', 'customChange', 'Added 0.46.0 - Delete the abandonment email task', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v47.00-004', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-04-03 20:00:14.345174', 576, 'EXECUTED', '8:58ad79be7de00e413da51fab3c8beea0', 'addColumn tableName=metabase_field', 'Added 0.47.0 - Add auto_incremented to metabase_field', NULL, '4.11.0', NULL, NULL, '0552011286'),
('v46.00-088', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.341441', 577, 'EXECUTED', '8:ff9defc19920960db55ef71e4d32b4ea', 'sql', 'Added 0.46.5 -- backfill `permission_id` values in `sandboxes`. This is a fixed verison of v46.00-066 which has been removed, since it had a bug that blocked a customer from upgrading.', NULL, '4.11.0', NULL, NULL, '8449835168');       
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v46.00-089', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.347501', 578, 'EXECUTED', '8:e0fbd2514cc960cc74106204ac65a3ea', 'sql', 'Added 0.46.5 -- remove orphaned entries in `sandboxes`', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-001', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.374407', 579, 'EXECUTED', '8:14bf2732687c04256e9c036ba142aa93', 'sql', 'Added 0.47.0 -- set base-type to type/JSON for JSON database-types for postgres and mysql', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-002', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.412271', 580, 'EXECUTED', '8:963690f41f487b122464277c627823f6', 'addColumn tableName=metabase_field', 'Added 0.47.0 - Add json_unfolding column to metabase_field', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-003', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.417402', 581, 'EXECUTED', '8:97bccdf5e9bcdfacd1c315fa1342c167', 'sql', 'Added 0.47.0 - Populate metabase_field.json_unfolding based on base_type', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-005', 'winlost', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.436296', 582, 'EXECUTED', '8:ccf53f27a551fd0799d0103bd65cca99', 'addColumn tableName=report_dashboard', 'Added 0.47.0 - Add auto_apply_filters to dashboard', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-006', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.452377', 583, 'EXECUTED', '8:b63ff10d3d121bed42eece1ae3dbb177', 'createTable tableName=dashboard_tab', 'Added 0.47.0 - Add dashboard_tab table', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-007', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.465561', 584, 'EXECUTED', '8:e9f7d6b18d65be6fde07c0b5471b8760', 'addColumn tableName=report_dashboardcard', 'Added 0.47.0 -- add report_dashboardcard.dashboard_tab_id', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-008', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.472709', 585, 'EXECUTED', '8:e37c88d202007bd3e6a72b6404d1b0e9', 'addForeignKeyConstraint baseTableName=report_dashboardcard, constraintName=fk_report_dashboardcard_ref_dashboard_tab_id, referencedTableName=dashboard_tab', 'Added 0.47.0 -- add report_dashboardcard.dashboard_tab_id fk constraint', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-009', 'qwef', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.483506', 586, 'EXECUTED', '8:398124b0dd4dd6e117cdc1378152469b', 'sql', 'Added 0.47.0 - Replace user google_auth and ldap_auth columns with sso_source values', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-010', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.505169', 587, 'EXECUTED', '8:3c4f9fc116fbced18c50952def65b3e0', 'modifyDataType columnName=name, tableName=metabase_table', 'Added 0.47.0 - Make metabase_table.name long enough for H2 names', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-011', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.511011', 588, 'EXECUTED', '8:148b982debddfa511cb45b87179b8c46', 'modifyDataType columnName=display_name, tableName=metabase_table', 'Added 0.47.0 - Make metabase_table.display_name long enough for H2 names', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-012', 'qwef', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.536342', 589, 'EXECUTED', '8:bf19ef077bc6bc517c515dd78ca46e3b', 'dropColumn columnName=google_auth, tableName=core_user', 'Added 0.47.0 - Replace user google_auth and ldap_auth columns with sso_source values', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-013', 'qwef', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.542184', 590, 'EXECUTED', '8:044aec6d07049e3c5a45830797189ab0', 'sql', 'Added 0.47.0 - Replace user google_auth and ldap_auth columns with sso_source values', NULL, '4.11.0', NULL, NULL, '8449835168');            
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v47.00-014', 'qwef', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.560125', 591, 'EXECUTED', '8:6a973f3198ad4596ecade95e61b35991', 'dropColumn columnName=ldap_auth, tableName=core_user', 'Added 0.47.0 - Replace user google_auth and ldap_auth columns with sso_source values', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-015', 'escherize', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:15.57357', 592, 'EXECUTED', '8:d2d5eea99db75e656709006b3a7749f0', 'addColumn tableName=metabase_database', 'added 0.47.0 - Add is_audit to metabase_database', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-016', 'calherres', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.285426', 593, 'EXECUTED', '8:62290f0389eb2a17170a9c0351ac8a85', 'customChange', 'Added 0.47.0 - Migrate the report_card.visualization_settings.column_settings field refs from legacy format', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-018', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.296882', 594, 'EXECUTED', '8:7bacd2f60393eebd3bebcfdb0e952ecd', 'createTable tableName=model_index', 'Indexed Entities information table', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-019', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.30264', 595, 'EXECUTED', '8:7a5589d70c80b3ffc99a85722f440a91', 'createTable tableName=model_index_value', 'Indexed Entities values table', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-020', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.307352', 596, 'EXECUTED', '8:d32a4cf7b37f012a7db74628cdde48df', 'addUniqueConstraint constraintName=unique_model_index_value_model_index_id_model_pk, tableName=model_index_value', 'Add unique constraint on index_id and pk', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-023', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.311377', 597, 'EXECUTED', '8:5d9e81c3e950afad66cb5e9e823b1f03', 'createIndex indexName=idx_model_index_model_id, tableName=model_index', 'Added 0.47.0 -- model_index index', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-024', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.315849', 598, 'EXECUTED', '8:3079db8d91e54ff2b41050f7dab27936', 'addForeignKeyConstraint baseTableName=model_index, constraintName=fk_model_index_model_id, referencedTableName=report_card', 'Added 0.47.0 -- model_index foriegn key to report_card', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-025', 'dpsutton', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.320017', 599, 'EXECUTED', '8:6889e314a2016c9bc017a358b81ed24e', 'addForeignKeyConstraint baseTableName=model_index_value, constraintName=fk_model_index_value_model_id, referencedTableName=model_index', 'Added 0.47.0 -- model_index_value foriegn key to model_index', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-026', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.326882', 600, 'EXECUTED', '8:acf279edf538ee29a4ea9103d809b3da', 'createTable tableName=connection_impersonations', 'Added 0.47.0 - New table for connection impersonation policies', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-027', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.342801', 601, 'EXECUTED', '8:c720f3de8feed35e592c0ca9b9975a18', 'customChange', 'Added 0.47.0 - Migrate field_ref in report_card.result_metadata from legacy format', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-028', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.352442', 602, 'EXECUTED', '8:f38598170766acaaa8fd3b20ef683372', 'customChange', 'Added 0.47.0 - Add join-alias to the report_card.visualization_settings.column_settings field refs', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-029', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.358616', 603, 'EXECUTED', '8:c7625e5018087e915e547f9318b2b8f5', 'customChange', 'Added 0.47.0 - Stack cards vertically for dashboard with tabs on downgrade', NULL, '4.11.0', NULL, NULL, '8449835168');    
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v47.00-030', 'escherize', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.374165', 604, 'EXECUTED', '8:7919d959008457419a09fd3275d3ed00', 'addColumn tableName=collection', 'Added 0.47.0 - Type column for collections for instance-analytics', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-031', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.387614', 605, 'EXECUTED', '8:ad9bdb62df65cf26a5a9892a82779ea7', 'sql; sql', 'Added 0.47.0 - migrate dashboard grid size from 18 to 24', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-032', 'qnkhuat', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.498841', 606, 'EXECUTED', '8:98d2edfc9caa3a03d307aa965a3b51c9', 'customChange', 'Added 0.47.0 - migrate dashboard grid size from 18 to 24 for revisions', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-033', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.520923', 607, 'EXECUTED', '8:c4a38673bf2a702e807a2074c0d0b719', 'customChange', 'Added 0.47.0 - Migrate field refs in visualization_settings.column_settings keys from legacy format', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-034', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.531054', 608, 'EXECUTED', '8:bb77d686c5c204e480a1da5fcfb518e2', 'customChange', 'Added 0.47.0 - Add join-alias to the visualization_settings.column_settings field refs in card revisions', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-035', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.53574', 609, 'EXECUTED', '8:aeafa7ff310f799eb3fb2e14640a9e06', 'dropForeignKeyConstraint baseTableName=implicit_action, constraintName=fk_implicit_action_action_id', 'Added 0.47.0 - Drop foreign key constraint on implicit_action.action_id', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-036', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.545509', 610, 'EXECUTED', '8:e815729b6ebfd4799743b249409558aa', 'addPrimaryKey constraintName=pk_implicit_action, tableName=implicit_action', 'Added 0.47.0 - Set primary key to action_id for implicit_action table', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-037', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.550718', 611, 'EXECUTED', '8:58c705a18bb3441e3ed5d1167ec64fcb', 'addForeignKeyConstraint baseTableName=implicit_action, constraintName=fk_implicit_action_action_id, referencedTableName=action', 'Added 0.47.0 - Add foreign key constraint on implicit_action.action_id', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-043', 'calherres', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.565588', 612, 'EXECUTED', '8:5e030b73be03e7cd8b19a5a46f9b2a4c', 'customChange', 'Added 0.47.0 - Migrate report_dashboardcard.visualization_settings.column_settings field refs from legacy format', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-044', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.575982', 613, 'EXECUTED', '8:1828d1bd8e2da6eec14ca61e6c01a56f', 'customChange', 'Added 0.47.0 - Add join-alias to the report_dashboardcard.visualization_settings.column_settings field refs', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-045', 'calherres', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.585913', 614, 'EXECUTED', '8:d7f479a389877010f5af9dc7ec859b51', 'customChange', 'Added 0.47.0 - Migrate dashboard revision dashboard cards'' visualization_settings.column_settings field refs from legacy format', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-046', 'calherries', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.594929', 615, 'EXECUTED', '8:1e43c8712a5b36809a3c3fa9933a523c', 'customChange', 'Added 0.47.0 - Add join-alias to dashboard revision dashboard cards'' visualization_settings.column_settings field refs', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-050', 'tsmacdonald', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.609225', 616, 'EXECUTED', '8:a5d516f2b5ea92f401387646b49a9950', 'addColumn tableName=metabase_table', 'Added 0.47.0 - table.is_upload', NULL, '4.11.0', NULL, NULL, '8449835168');         
INSERT INTO "PUBLIC"."DATABASECHANGELOG" VALUES
('v47.00-051', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.614733', 617, 'EXECUTED', '8:83a8b7ad58b2deb0732e671db51fa608', 'dropForeignKeyConstraint baseTableName=connection_impersonations, constraintName=fk_conn_impersonation_db_id', 'Added 0.47.0 - Drop foreign key constraint on connection_impersonations.db_id', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-052', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.618526', 618, 'EXECUTED', '8:d170bef8f707027360cf08fb55e91452', 'dropForeignKeyConstraint baseTableName=connection_impersonations, constraintName=fk_conn_impersonation_group_id', 'Added 0.47.0 - Drop foreign key constraint on connection_impersonations.group_id', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-053', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.623408', 619, 'EXECUTED', '8:3b52631c2c82b88043b840391c7d9ef0', 'createIndex indexName=idx_conn_impersonations_db_id, tableName=connection_impersonations', 'Added 0.47.0 -- connection_impersonations index for db_id column', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-054', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.629678', 620, 'EXECUTED', '8:5404d7e3781f0dfcc984676ea434c842', 'createIndex indexName=idx_conn_impersonations_group_id, tableName=connection_impersonations', 'Added 0.47.0 -- connection_impersonations index for group_id column', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-055', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.634144', 621, 'EXECUTED', '8:295c4477995058b93eba2857090eb6f6', 'addUniqueConstraint constraintName=conn_impersonation_unique_group_id_db_id, tableName=connection_impersonations', 'Added 0.47.0 - unique constraint for connection impersonations', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-056', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.641233', 622, 'EXECUTED', '8:bd965141f770a65982ecebab51a565e9', 'addForeignKeyConstraint baseTableName=connection_impersonations, constraintName=fk_conn_impersonation_db_id, referencedTableName=metabase_database', 'Added 0.47.0 - re-add foreign key constraint on connection_impersonations.db_id', NULL, '4.11.0', NULL, NULL, '8449835168'),
('v47.00-057', 'noahmoss', 'migrations/000_migrations.yaml', TIMESTAMP '2023-10-27 23:37:16.648397', 623, 'EXECUTED', '8:fe79acdba9db58709b6fffbb7aac2844', 'addForeignKeyConstraint baseTableName=connection_impersonations, constraintName=fk_conn_impersonation_group_id, referencedTableName=permissions_group', 'Added 0.47.0 - re-add foreign key constraint on connection_impersonations.group_id', NULL, '4.11.0', NULL, NULL, '8449835168');   
CREATE CACHED TABLE "PUBLIC"."DATABASECHANGELOGLOCK"(
    "ID" INTEGER NOT NULL,
    "LOCKED" BOOLEAN NOT NULL,
    "LOCKGRANTED" TIMESTAMP,
    "LOCKEDBY" CHARACTER VARYING(255)
);          
ALTER TABLE "PUBLIC"."DATABASECHANGELOGLOCK" ADD CONSTRAINT "PUBLIC"."PK_DATABASECHANGELOGLOCK" PRIMARY KEY("ID");             
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.DATABASECHANGELOGLOCK;    
INSERT INTO "PUBLIC"."DATABASECHANGELOGLOCK" VALUES
(1, FALSE, NULL, NULL);    
CREATE CACHED TABLE "PUBLIC"."PERMISSIONS_REVISION" COMMENT 'Used to keep track of changes made to permissions.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "BEFORE" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the permissions before the changes.' NOT NULL,
    "AFTER" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the permissions after the changes.' NOT NULL,
    "USER_ID" INTEGER COMMENT 'The ID of the admin who made this set of changes.' NOT NULL,
    "CREATED_AT" TIMESTAMP COMMENT 'The timestamp of when these changes were made.' NOT NULL,
    "REMARK" CHARACTER LARGE OBJECT COMMENT 'Optional remarks explaining why these changes were made.'
);    
ALTER TABLE "PUBLIC"."PERMISSIONS_REVISION" ADD CONSTRAINT "PUBLIC"."PK_PERMISSIONS_REVISION" PRIMARY KEY("ID");               
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.PERMISSIONS_REVISION;     
CREATE CACHED TABLE "PUBLIC"."SETTING"(
    "KEY" CHARACTER VARYING(254) NOT NULL,
    "VALUE" CHARACTER LARGE OBJECT NOT NULL
);              
ALTER TABLE "PUBLIC"."SETTING" ADD CONSTRAINT "PUBLIC"."PK_SETTING" PRIMARY KEY("KEY");        
-- 15 +/- SELECT COUNT(*) FROM PUBLIC.SETTING; 
CREATE CACHED LOCAL TEMPORARY TABLE IF NOT EXISTS SYSTEM_LOB_STREAM(ID INT NOT NULL, PART INT NOT NULL, CDATA VARCHAR, BDATA VARBINARY);       
ALTER TABLE SYSTEM_LOB_STREAM ADD CONSTRAINT SYSTEM_LOB_STREAM_PRIMARY_KEY PRIMARY KEY(ID, PART);              
CREATE ALIAS IF NOT EXISTS SYSTEM_COMBINE_CLOB FOR 'org.h2.command.dml.ScriptCommand.combineClob';             
CREATE ALIAS IF NOT EXISTS SYSTEM_COMBINE_BLOB FOR 'org.h2.command.dml.ScriptCommand.combineBlob';             
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 0, U&'{"latest":{"version":"v0.47.4","released":"2023-10-11","patch":true,"highlights":["Update Apache POI","`load-from-h2` fails on `master` with Command failed with exception: ERROR Clearing default entries created by Liquibase migrations...","DashboardTab missing from `copy` command ","[Dashboard] Do not lose filters state on navigating back from Question","Dashboard loses effective filter values when auto-apply is turned off","Manual backport #33865 to 47","We don''t seem to be updating certificates when updating the connection","Hardly visible expand icon on collection hover","Postgres Custom Query Actions require explicit CAST() for date fields","Spinners change color and fonts change on signed embedding while loading","Corrupted dashboard filter makes it impossible to view the question (unless removed)"]},"older":[{"version":"v0.47.3","released":"2023-10-03","patch":true,"highlights":["\+01f916 backported \\"Use HTTPS when getting version-info\\"","Use HTTPS when getting version-info","Can''t apply category filters when a question has grouping and aggregation","Summarizing or sorting in query editor after Exploring results in a SQL question and creating a Custom Column breaks query editor ","Other count displays incorrect value when Language set to Arabic or Arabic (Saudi Arabia)","Backport #33898: Better deduplication for entities loader api queries","Date filters - inconsistent filter values displayed when a question is opened from a filtered dashboard","UI suggests it''s possible to delete an archived collection","Fix 33971: CSV uploads aren''t possible when native query editing is disabled","CSV uploads aren''t possible when native query editing is disabled","Search bar font size is too small on Safari","bad gateway 502 for API via reverse proxy (POST request ignores ''location'' v0.47.2)","Refactor useLeaveConfirmation hook to a component","Summarizing by custom date column does not allow date grouping","v.47-RC3 does not work custom range in conditional formatting","[Epic] Provide a heads up when Metabase is upgraded with what\2019s new","After hiding column in table settings on question based on another question, all joined columns unchecked in notebook editor when still selected","Unable to add joined columns in table settings after removing through notebook editor on nested Question","Inputting some values into Whitelabel \\"Landing Page\\" can cause the entire frontend to break"]},{"version":"v0.47.2","released":"2023-09-18","patch":true,"highlights":["Performance regression in how we parse query_metadata response leads to notebook being unusable","Clear cache when performing version upgrades","Metabase will not let you update the cert if it was rotated","Some table columns are unable to be rendered","Download results (.csv, .json, .xlsx) request does not include subpath when deploying on subpath","Table column is not visible in object detail view when its visibility is set to \\"only in detail views\\"","Not possible to include time when filtering dates in dashboards","Notebook Editor becomes very slow (or freezes browser), when there is a lot of fields/sections"],"announcement_url":"https://www.metabase.com/releases/Metabase-47?utm_source=product&utm_medium=banner&utm_campaign=47-announcement"},{"version":"v0.47.1","released":"2023-09-07","patch":true,"highlights":["Remove unused \\"No changes to permissions will be made.\\" confirmation in `PermissionsEditBar`","Don''t delete a connection impersonation policy when non-data perms are updated","Performance regression in how we parse query_metadata response leads to notebook being unusable","Switch pulse email sending to use bcc instead of sending a seperate email","Subscriptions should send a single email with all recipients in Bcc","Wrong URL manipulation when configuring GTAPs when running on a sub path","Change in Snowflake Driver adds a default role ACCOUNTADMIN instead of using user default","Only log session cookie SameSite=None warning when connection is insecure","Data Model Field Formatting settings should only show currency settings for currency fields","Impersonated securit', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 1, U&'y: a user who does not have an attribute defined to access the database can see the data","Role-based security at database level does not work if the role contains special characters such as the dot. (v0.47)","Pie charts cut off in dashboard","Link cards in dashboards shouldn''t open in a new window unless you command+click them","Question name not displayed when changing click behavior","Show new syncing tables as greyed out in data reference page","Invalid redirect URL when doing JWT SSO","Redundant network requests triggered in object detail modal","Some audit queries return empty results with an H2 application database","Redundant separator displayed in table filter popup","Empty column gets treated as series breakout in line chart","Bottom corner radius on buttons looks weird on new dashboard grid"," Assert failed: No more than 1024 pending puts are allowed on a single channel","[Epic] Update default and min size constraints for dashboard cards","Inconsistent icon position in pinned dashboard item loading state","Duplicating a model creates a new model that uses the original model","Formatting for field in Data Modeling is no longer working","Keyboard active when object detail modal is open","Stale UI for the Official collections menu","Do not prompt non-admin users to configure email or Slack","Broken added series on dashcard prevents you from editing the card "]},{"version":"v0.47.0","released":"2023-08-16","patch":false,"highlights":["Native parameters defaults change chart type after save or load","X ray cards load bottom to top","Deep copy dashboard with questions appends `-- Duplicate` with two dashes to duplicated questions","Query actions won''t work when the ID dashboard parameter linked with model ID and action parameter get values from the URL","Columns with long names cause the visualization options sidebar to scroll horizontally","Zero on axis not rounded, has many decimal places with single-row chart","Nothing happens when clicking on search results in a link card","Show new syncing tables as greyed out in data reference pane","Flaky test - table popover should not be scrollable horizontally (metabase#31339)","Action not found on dashboard on serdes v2","side_nav=true does not work when going straight to a dashboard","Bugs on People tab","Basic model action names are not translated","Can''t clear dashboard description","Metadata column formatting tab stopped working in v0.47.0-RC2","Enable parameter substitution to Heading text cards","Custom homepage search errors when previously set within the same session","Update CSV permission check for \\"Unrestricted\\" access on the schema rather than any table","Fade Link Cards in mapping mode","Don''t allow CSV uploads when sandboxing is enabled","Cannot read properties of undefined (reading ''name'') when adding an incomplete card","Don''t offer to add new questions/ask new in a dashboard in a read-only collection","Don''t offer to create new items on read only collections","Charts in admin Audit section load infinitely","Change number card minimum size to 2x2","Cards that are 1-2 grid units tall look broken in dashboard filter mapping mode","Force migration is broken","Adding filter of summarized field grouped by latitude and longitude on a map changes visualization type","\201cInvalid :expression reference: no expression named \2026\201d on stats","Provide admins with more context as to where they can change their homepage"]},{"version":"v0.46.7","released":"2023-08-08","patch":true,"highlights":["v0.46.6.4 : Migration from H2 to Postgres fails with Command failed with exception: ERROR: insert or update on table \\"metabase_table\\" violates foreign key constraint \\"fk_table_ref_database_id\\"","Prevent open redirects for JWT/SAML","Very Inefficient query causing Metabase DB load to go to 100% [v0.46.6.4]","LDAP Attribute sync no longer works","\\"Expected native source query to be a string, got: clojure.lang.PersistentArrayMap\\" on nested queries","Snowflake won''t sync without password (user using only private key)","Resizing columns in pivot tables in serialization breaks the car', NULL);           
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 2, U&'d on load",":has_question_and_dashboard from `api/user/current` is always false","Basic actions become unusable if clauses are added to the model later","Cyclic load dependency when loading `src/metabase/integrations/ldap.clj`","snowplow events for task details can be too large","New interface Laggy and slow ","Certain invalid URL causes error response from Jetty","Pulses with Conditional Formatting is displayed with black background, when value is above 999"]},{"version":"v0.46.6.4","released":"2023-07-28","patch":true,"highlights":[]},{"version":"v0.46.6.3","released":"2023-07-28","patch":true,"highlights":[]},{"version":"v0.46.6.2","released":"2023-07-24","patch":true,"highlights":["Fix Google sign-in failing for some geolocations."]},{"version":"v0.46.6.1","released":"2023-07-21","patch":true,"highlights":["Upgrade your Metabase installation IMMEDIATELY. A recently discovered security vulnerability almost certainly affects you, and we recommend you upgrade your Metabase Installation right away."]},{"version":"v0.46.6","released":"2023-06-29","patch":true,"highlights":["Remove `task` snowplow event","Incorrect query on nested questions in BigQuery","Snowflake won''t sync without password (user using only private key)","Don''t auto-run sql questions when there''s an edit","Error custom column \\"only binary :- is supported\\""]},{"version":"v0.46.5","released":"2023-06-13","patch":true,"highlights":["Add to Dashboard/Save Question Menu doesn''t respect Collection Alphabetical order as in Main Menu","Downloading data from cards in dashboards does not respect download limit","Respect alphabetical order of collections in \\"Move\\" modal","Attempting to upload RSA private key (PEM PK8) to connect to Snowflake fails with Private key provided is invalid or not supported","Dump broken on 46.x on instances with more than 65K categorical fields","MySQL default timeout needs to be increased","Question with source query containing aggregation and sorting by that aggregation fails on mongodb","Upgrade to 1.46 fails due to invalid state in permissions table","Reverting to an earlier version of a dashboard creates an erroneous event in revision history","Model caching not working anymore in 0.46.x with MySQL if query takes more than 29 seconds","Question breaks after trying to create pivot table and edit on aggregated results that are not grouped","Not able to Enable/Disable Actions when Choose when syncs and scans happen is Enabled","Native editor buttons are incorrectly rendering on top of model metadata screen","Unable to summarize models","Sporadic \\"we''re a little lost...\\" pop-up when scrolling up and down my query after expanding a row","Basic actions (CUD) display order is non-deterministic","Do not offer to save database changes if there were none","There is no confirmation when running an action without parameters in dashboards","Make the \\"save\\" modal context-aware","SSO does not respect Metabase subpath","MB_SESSION_TIMEOUT behavior does not match documentation","Doing \\"Zoom in\\" from dashboard drops fields from joined tables","Google Sign-in ignores \\"Notify admins of new SSO users\\" toggle","Drill-through to questions with add columns (implicit join) causes no filtering to be defined","Better error message/validation if SAML Keystore has no private key","Cannot run native queries against MongoDB unless explicitly selecting the table","When setting/resetting password, `sign in with your new password` shouldn''t make you retype your password again"]},{"version":"v0.46.4","released":"2023-05-24","patch":true,"highlights":["Link Cards that link to internal entities should open the object in the same iFrame in Full-App embedding","Activity feed leaks metadata","Mongodb won\2019t work if version does fall into the \201csemantic-version-gte\201d pattern (Percona)","46 regression: `datetimeAdd` is apparently supposed to allow non-integer amounts","If you bring the sample dataset back then go to ''Browse Data'' it does not appear unless you refresh the page","Add series modal pulls all cards and viz settings and it''s unusable on big instances","/r', NULL);       
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 3, 'ecent_views endpoint query uses non-indexed fields"]},{"version":"v0.46.3","released":"2023-05-18","patch":true,"highlights":[]},{"version":"v0.46.2","released":"2023-04-28","patch":true,"highlights":["Users with No Access to the Collection Our Analytics are not able to define a dropdown list from models/questions","MongoDB Custom Column SUM with arithmetic operation producing wrong MongoQL","Race condition after deleting the Sample Database","Include checklist task to migrate off h2","[Snowflake] Syntax error: unexpected \"?\" when using filters inside window frames, or inside INTERVAL syntax","Revision history erratically loads and removes historic changes","\"People can pick\" ->multiple values in dashboards and custom dropdown filter don''t go together","Changing column order on model view then almost saving without preview breaks model with custom columns","Metric tooltip description gets cut","Metadata is required when trying join on an SQL based questions","Adding more than one field filter blows up the frontend in Mongo and MySQL","Filter values no longer work inside single quoted strings","Serialization v1 errors when trying to load an instance with actions","Cannot get into a card from a dashboard on \"no self-service\" permissions","\"First day of the week\" not changing calendar widget on filters"]},{"version":"v0.46.1","released":"2023-04-05","patch":true,"highlights":["drill-through not working correctly in legend for stacked charts","SSO mapping: users are removed from groups that are not mapped","Date Filter (Specific Dates) doesn''t show first days of the month","Fix implicit actions not created in a deterministic order","Currency list: Add Mauritania ouguiya (MRU) as currency","Big xslx file downloaded from BigQuery are corrupted in v0.45.3 and were not in v0.45.1","Infinite loop, logging at warn level, filling disk for a GCP BigQuery connection","Dashboard sticky filter incorrectly positioned, when moving between dashboards","Unable to properly filter on an aggregation"]},{"version":"v0.46.0","released":"2023-03-28","patch":false,"highlights":["Cannot save dashboard when using \"Add a saved question\" text","Ensure we use the ssh tunnel on action execution","Under specific circumstances, when editing an existing sandbox, the \"Parameter or variable\" dropdown for a filter is incorrectly grayed out","Date Filter \"Exclude\" option fails on Dashboard if you are on a different language than English","Exclude non required PKs from implicit create action","Adding classname prop to ObjectDetail","Object Detail View is no longer scrollable inside Query Builder","Let users download questions as a PNG in-product","Offer question downloads from dashboard cards","\"Pulse card query error\" on user without native SQL permissions","Don''t include auto-incremented fields in the implicit create action form if it''s an auto increment ID","pulling out column title logic and sharing with settings","Chartsettings use custom column names","Updated Column names are not present in Chart Settings","GUI Cached models that have joins will generate the query incorrectly and fail","Remove personal collections from collection detail page","Standardize chart settings icon buttons","Updating Close Icon","Centering tab labels","Viz Charts don''t support customisation of series with more than 20 groups","Fix exclusion of CLJS devtools from release builds","The order of series in a visualization should match the order in the sidebar","Release script can stomp over root `./deps.edn` dependencies and break the build ","Personal collection shows up as a sub-collection of \"Our analytics\"","[Epic] Improve Upgrade CTA Tracking","Adding flex grow to card wrapper","update the row chart style","stack area chart with breakouts","open chart settings when clicking active display type","Keep filter and fields clauses in trivial nested queries"]},{"version":"v0.45.3","released":"2023-02-21","patch":true,"highlights":["Fix ObjectDrill on queries with joined tables","Send \"threads blocked\" via Prometheus exporter","Make educational messaging in native', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 4, U&' questions less distracting","Fix \\"Powered by Metabase\\" badge partially invisible with transparent theme","Pre-existing category filters were not migrated to new ones","Doing \\"Zoom in\\" from dashboard drops fields from joined tables","Links for the IDs are showing wrong objects when table join is in place","Column filters not working on Questions using custom columns","Drill-through to questions with add columns (implicit join) causes no filtering to be defined","Data selector not working in FullApp embedding if going directly from location that hasn''t loaded `/api/database` yet"]},{"version":"v0.45.2.1","released":"2023-01-27","patch":true,"highlights":[]},{"version":"v0.45.2","released":"2023-01-17","patch":true,"highlights":["Log4j2.xml file not read on 0.45","Cannot select fields for double aggregated metrics, and existing sections gets removed on change","Background color on hover for items in data picker looks off","Static viz fails when there''s an unused column returned","\\"Something''s gone wrong\\" error when moving between dashboards that has/hasn''t filters","Changing sorting does not apply for X-axis anymore","Number filter with `0` (zero) as default value shows as empty in the widget","Relieve db pressure on api/health check","Static viz fails when date formatting contains day","\\"Replace missing values with\\" set to `Zero` or `Nothing` causes the line to become zeroed/hidden","Update token check URL","Static viz fails when date formatting is abbreviated","Disable Athena driver IAM role-based auth in Cloud","Improve collection breadcrumbs with embedding parameters","Snowflake sync is consuming more resources than necessary","Click Behavior cannot handle absolute URLs outside of Metabase","Avoid updating dashboard cards unless filter changes","Using filter Contains on dashboard is case-insensitive, but on drill-through to question becomes case-sensitive","BigQuery data type `BIGDECIMAL` is recognized as mixed string/numeric","Text filter over a custom column in simple embedding expects a number","Comma separated filter value would not hand over from dashboard to question","Embedding Dashboard with Locked parameters does not allow numeric values","Column name auto-classification not working for _latitude","Corrupted question shows \\"Something''s gone wrong\\" with no more info, and breaks \\"Add series\\" modal on the dashboard, and breaks Archive page","unset MB_API_KEY for notify endpoint could use some feedback"]},{"version":"v0.45.1","released":"2022-12-07","patch":true,"highlights":["SQL Server driver not loaded in 0.45.0"]},{"version":"v0.45.0","released":"2022-12-05","patch":false,"highlights":["Editing a model''s metadata bricks the question when mapping to an underlying DB column that has an enum mapping","Remove `is_write` card property on the FE","Audit dashboards click behavior does not work","Fixes remapped columns support for the row chart type","`has-user-setup` Setting does not actually cache truthy results like it says","Visualization settings can crash Query Builder","Build datetime filters as datetime before question is saved","Analysis of Sample DB on initial startup takes ~2 minutes","[Epic] Let users know why there\2019s no drill-through on their SQL/native questions","Record application database version in Snowplow metrics","In Mongo, the filter does not work for uuid fields","Sync of new tables stops working if an existing table has a description set to empty (not null)","BigQuery Arrays are not exported correctly to CSV","Dashboard sticky filter incorrectly positioned, when moving between dashboards","Sidebar covers dashboard sticky filters, when scrolling on dashboard","Changing permissions can fail with `Data too long for column ''before'' at row 1` when using MySQL/MariaDB application database","Serdes v2: it should be possible to load content to an instance without the serialized data model (if the target instance already contains the data model)","Serdes v2 is not transferring `report_card.result_metadata` on models","Model list appears empty when creating new question, even though models ex', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 5, 'ist","Click Behavior not working for Funnel","Modal filtering doesn''t work on joined table when Question has a filter after aggregation ","Reordering columns in pivot tables breaks the UI","Dashboard Slack Subscription hits slack API max characters allowed per block","Notify endpoint will always return 200 even if the tables don''t exist","[Epic] metabase-lib consolidation","Add journey to create fresh Model using New button","Add page to create Model without a Question using Native Query Editor","Add page to create Model without a Question using Notebook Editor","Data Model keeps resetting input fields while editing","Persistent caching for Models fails to enable for MySQL"]},{"version":"v0.44.6","released":"2022-11-01","patch":true,"highlights":["Google Sign-in fails because of unannounced change by Google","Load in serialization with --mode update fails on upserts","Between() in custom filter expression switches min and max upon adding new filter","Collection list fails to display if there''s an invalid parameter in a question","Inconsistent behavior when sending certain payloads to /permissions/graph","Loss of old translations in v0.44.1"]},{"version":"v0.44.5","released":"2022-10-18","patch":true,"highlights":["Slack request error leads to sensitive authorization token being logged","Synchronized tables that were initially marked as `cruft` has their `initial_sync_status` as `incomplete`","Cannot drill-through \"View these ...\" when aggregated results are filtered"]},{"version":"v0.44.4","released":"2022-09-29","patch":true,"highlights":["When LDAP is enabled but password login is disabled, login doesn''t work","Bump Postgres driver to 42.5.0","404 on loading models when instance is configured in another language","Loading spinners in filters don''t appear anymore","Inform admins if their account is in bad standing","Bump MinaSSHD to 2.9.1","MYSQL disable JSON unfolding doesn''t work","MySQL unfolding of JSON fails for `boolean` and `bigint` attributes","Aggregation in Models causes the column name to incorrectly be parsed down to questions based on that Model","Envar to disable custom maps / GeoJSON","Changing filters on Simple question drops anything after first aggregation","Metabase Prometheus Exporter","Changing filters on Simple question drops aggregated filters","Drill through / underlying records action doesn''t respect filters in metric definitions"]},{"version":"v0.44.3","released":"2022-09-15","patch":true,"highlights":["SessionStorage can become filled causing the frontend to throw errors until browser restart","Filters incorrectly showing as linked to all fields on combined charts","First created question not in Saved Questions inside Data Selector until page reload","Cannot change email From-name and Reply-to-address when environment variables are used for other settings","Column filters not working on multi-aggregation","Tooltip periods are not displayed nicely on SQL questions","Can''t change filters via ''Show filters''","Bubble size not consistent across multiple series","A hidden Database Sync doesn''t allow descriptions for tables or fields to be edited","Newly created Model not an option when creating a new question","Dashboard filter does not show Search widget when trying to workaround other filter issues","Chinese weekdays in calendar widget are incorrect","Field filter linked to Boolean column causes an error when refreshing a public question","Slack files channel can be confusing after initial setup"]},{"version":"v0.44.0","released":"2022-08-04","patch":false,"highlights":["Blank screen if user without permissions to view dashboard card tries to edit the dashboard filter","Bump jetty-server to 9.4.48.v20220622","Click behavior to another dashboard/question makes the browser open the destination on a new window","False warning that `No self-service` means higher access than `Block` permissions","Bookmark icon not updated when question is converted to model and vice-versa","Scalars show short number before showing the full number","Default /api/collection/tree call does not include \"exclude-archived', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 6, '=true\"","Archive page does not render all items","Revert buttons shown on dashboard revision history for users without edit permissions","Search returns irrelevant matches for non-native questions","Can''t embed cards with filters after v0.44.0-RC1 - Invalid Parameters: \"missing id\"","CASE statements don''t evaluate to False if using `, False` and nested CASE statements","\"Custom...\" model refresh setting does not work on first request","\"Our analytics\" appears on \"Save question\" collection search header even when user doesn''t have access to it","Exports fail on specific date styles","Bubble size is scaling according to y-axis on scatter charts","Error sending emails when reply-to setting contains empty string","Email settings needs to use real password, not obfuscated password","Wrong username/password on Office365 for email settings has misleading error","Bulk Filter Modal v3","Add snowplow tracking for new records on TaskHistory","Missing full-screen button on public dashboards","Primary color is not being used on background colors, so branding is not kept consistent","Full Screen Night Mode Dashboard Has light background when scrolled down","Dark primary color in data visualization makes icons almost disappear.","Primary color in text with dark backgrounds makes text hard to read","Relative Date filters on dashboard does not include the filter on drill-through","Dashboard causes scrollbars to constantly go on/off depending on viewport size","Items in the saved question picker are sorted case-sensitive","Sandboxed group managers can''t see other users in the People tab"]},{"version":"v0.43.4.2","released":"2022-07-29","patch":true,"highlights":[]},{"version":"v0.43.4.1","released":"2022-07-28","patch":true,"highlights":[]},{"version":"v0.43.4","released":"2022-06-28","patch":true,"highlights":["Blank screen on questions with certain orphaned visualization settings","Metabase returns \"No results!\" when the SSH tunnel is down on a query","Changing account password to a non-complex password misleads the user with a success message even though the process fails","Relative \"quarter\" filter doesn''t work in SQL queries","New Slack setup not working, because App isn''t joining the files channel","Tooltips goes outside of iframe in some cases","\"Can''t pop empty vector\" when binning JSON fields","Collection name under dashboard title wraps weirdly when viewport is narrow","Incorrect use of types during Postgres JSON unfolding","Cannot filter `time` columns unless using the QB Sidebar","Frontend incorrectly shows empty boolean values as `false`"]},{"version":"v0.43.3","released":"2022-06-13","patch":true,"highlights":["Slack setup doesn''t work if channels cache was recently cleared","Custom Expression field is not respecting the modal size","Bump google oauth version","Relative filter with a lower \"Starting from\" period is confusing","Cannot print large dashboards (multi page)","Sync of JSON columns fails in schemas where schema names contains system characters","Sync of fields fails, when table name contains uppercase characters","Preview function in Notebook does not respect the columns selected on base source","Viewing Metadata for a Model and cancelling can result in error, and further in blank screen","Do not offer \"Explore results\" unless the database supports it","Cannot view Object Detail of non-numeric IDs","Incorrect use of types during Postgres JSON unfolding","Click Behavior not redirecting in some cases","Uploading certificates causes failure in TrustManager/KeyManager because of bad MIME-type","New Slack App does not allow selecting private channels for pulses","Query executions hitting the cache are not recorded","Pulse fails when there is a column type `time`"]},{"version":"v0.43.2","released":"2022-05-31","patch":true,"highlights":["Bump transitive com.google.code.gson/gson","Login page: Whitelabeled logo clips top of page if vertical","Sign in input fields are outside of screen on mobile","Filters are taking 100% viewport width on mobile/tablet in v.43.1","Updating data permissions counts questio', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 7, U&'ns as tables","Fix deadlock in pivot table connection management","Size of bubbles not respected on scatter chart","Strings in the time series chrome UI aren''t tagged for translation","dont read settings at require time","Unable to edit field name and description in Field page","Custom Expression aggregation in Metrics does not work","CPU spiking every hour since v0.43.0 upgrade","Negative Y axis points not rendered on scatter plot","X-ray charts don''t seem to respect whitelabel colors","Users with `block` permissions see ambiguous error message when they open a dashboard","It is possible to change filter column when filter date columns from the table header","We should cut the \\"Navigation bar color\\" option from /admin/settings/whitelabel","Site URL setting reverting to default randomly","Cannot use Click Behavior for filters with multiple options selected","Click Behavior with filter pass-thru causes permission error (even for admins)"]},{"version":"v0.43.1","released":"2022-05-16","patch":true,"highlights":[]},{"version":"v0.43.0","released":"2022-05-02","patch":false,"highlights":["Inconsistent colors in relative datetime filtering in sidebar","Non-admin database manager can delete database using the API","Query Builder data picker can \\"forget\\" about multiple schemas","Data Model > Visibility buttons should \\"signal\\" they are clickable","Date filter in the chart footer shows \\"Previous\\" filter type when \\"All Time\\" is selected","\\"Next\\" relative filter tokens should read \\"from now\\" instead of \\"ago\\"","Can''t change a relative month filter''s values when using the \\"starting from\\" feature","Date preview is wrong when using the \\"Starting from\2026\\" action when it pushes back before the current year","`Include this quarter` action is missing the words \\"this quarter\\"","Purple borders in date filter popover should be blue","In the relative date picker, changing the granularity of the Past/Next range picker should change the granularity of the Starting From picker","Let''s add the \\"Metabase tips\\" link for installers, too","Errors when hiding/unhiding specific columns in table","moving timelines and default interact poorly","Sidebar stays open after entering a dashboard''s fullscreen mode","Exports fail when certain columns are hidden and a field is remapped","Random comma in \\"Display values\\" section of data model settings for a field","Selecting language Indonesian causes error","Can not get the minimum or maximum of some SQL fields","MAX/MIN aggregation on categories incorrectly inferred as numbers","[Data Permissions] Saved questions showing in the list of databases","Textbox on dashboards are difficult move and missing options","Permission graph does not support schemas with slashes","Backend should deserialize dashboard `Starting From`/`Exclude` datetime filters","Datetime shortcut \\"Relative dates...\\" should default to \\"Past\\" filters","Embedding/Public sharing of questions does not show download button in the footer","Dashboard shows scrollbar in fullscreen","Subscriptions button shown on dashboard in fullscreen","Global search input is shorter than the field","Popover menu position floating too far initiator"]},{"version":"v0.42.4","released":"2022-04-07","patch":true,"highlights":[]},{"version":"v0.42.3","released":"2022-03-23","patch":true,"highlights":["Exclude /_internals from production build (#21162)","Upgrade MySQL/MariaDB JDBC driver to version 2.7.5","Comma Separate Numbers filter not working as it previously did","Markdown parsing on backend doesn''t support autolinks","Subscription fails, when there''s specific characters that causes Markdown failure","Custom Column allows aggregation functions together with algebra, which fails on query","Cannot connect Google Analytics because of deprecated OAuth OOB","Postgres certificate SSL key reference incorrect","Embedding with Locked parameters does not allow numeric values","Models should not be shareable (embedding/public)","BigQuery: Aggregating by a datetime in a saved question fails because of bad aliasing","\\"Saved\\" overlay in data model UI in w', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 8, 'eird location on smaller screen","\"Compare to the rest\" action in drill-through menu looks busted","Autocomplete suggestions are not working for most of the database tables","Permissions paths validation is `GET` API endpoints is too strict; causes numerous endpoints to 500 if unknown entry is present","Main page loading spinner spins forever on API error","Cannot use Data Selector when going directly to a question in new tab (or browser refresh)","\"Show error details\" in Query Builder should be toggleable","No visual feedback when setting column properties in Admin > Data Model","QP/MBQL: `[:relative-datetime :current]` doesn''t work inside `[:between]` filter","Icon on empty activity page is misaligned","Google Analytics updated Credentials aren''t used for Connection","Google Analytics database connection stopped working.","Binning not working in table with a single row","Fix error in send-abandonment-emails task","Can''t change Google Analytics DB settings","when adding google analytics as source, it''s not clear that I have to enable the API"]},{"version":"v0.42.2","released":"2022-02-28","patch":true,"highlights":["Dashboards breaks when there''s filters to cards that a user don''t have permissions to view","Questions with Field Filter with widget type \"None\" will not show results","Can''t combine saved questions on a dashboard card ","Setting a filter to \"Locked\" in Embedding question is not possible","Nested queries with long Data Model names causes failing query with incorrect aliasing","Dropdown list filtering not working, when there''s nulls","BigQuery - nested query generating bad aliases, when columns are renamed in Data Model","Summarizing with implicit join does not allow subsequent joins and nested query","Databases shows sync-spinner and doesn''t allow to remove it or do a forced sync"]},{"version":"v0.42.1","released":"2022-02-17","patch":true,"highlights":["Filter dropdown only allows filtering on \"starts with\"","Unable to filter dashboards for dashboard subscription emails","Dashboard filter with defaults, doesn''t work if values are removed, query fails","Pulse Question Alert to Slack sending cropped images","Cannot remove Google Sign-in setup","Embed dashboard Field Filter cannot work when choosing single option","Custom expression - Count needs parentheses, but deletes them afterwards","Cannot open Model sidebar in some cases","BigQuery incorrectly aliasing, which can make the query fail","Filtering on nested questions causes error in Public and Embedding","BigQuery nested query with ambiguous columns causes error","Setting a filter to \"Locked\" in Embedding is not possible","Remove unused dep on aleph (and thus unused transient dep on Netty)","Oracle queries don''t work when aliases (auto-generated or otherwise) contain double quotes or null characters","When no-data user views a nested question, then all editing options are exposed","When no-data user views a nested question, then \"Ask question\" and \"Browse data\" appears","Oracle fails queries on joins with tables with long display names","Pivot Table: Cannot change name of fields used for \"values\""]},{"version":"v0.42.0","released":"2022-02-08","patch":false,"highlights":["Waterfall static viz default settings","\"By coordinates\" map in People X-ray shows a nonsensical pin map","Pins do not appear on pin map","\"Explore results\" shown for no-data users resulting in blank screen when clicked","Blank screen when accessing Models with no-data user","Secret connection property file path is not retained when revisiting database edit page","Licensing page goes into reload-loop if token is expired","Descriptions missing in search results"," the Time picker AM and PM color can not be distinguished obviously","Horizontal scroll of pinned table doesn''t work on Firefox","Metadata tooltip popup on colum header casues data table to reset for number columns that are all NULLs ","Certain visualization_settings can cause empty/missing columns on export","Postgres unnecessarily casts `timestamptz` and `date` columns to `timestamp` inside `date_trunc()` "', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 9, ',"Alert Stopped email is Unhelpful","Exports ignore column ordering regression in v0.41.6","Premature calls to `to-sql` inside `sql.qp/->honeysql` methods","Visualization \"auto-viz\" doesn''t keep existing settings, when changing fields returned","Can''t add a filter if the value isn''t in the field filters dropdown","Clean up database guide usability during configuration","defsetting `:tag` metadata should be on the arglists themselves, not the var","Clean up how we show deprecated database drivers","SQLite/Redshift/SQL Server/MySQL queries don''t work correctly with multiple column aliases with same name but different case","Archived sub-collections are still showing in Permissions","Clean up how we show deprecated database drivers","XLSX exports are leaving temporary files, which can block instance from working","Add a way to return to previous page from sign in cases","Consolidate first db sync modal and X-ray selection","[Epic] Migrate Slack implementation from Bot to App","Improve Filters for 42","Clean Up Settings Navigation"]},{"version":"v0.41.6","released":"2022-01-14","patch":true,"highlights":["Specific visualization_settings can cause empty export","Cannot change Field Filter reference to another schema/table if viewing the question directly","Upgrade Log4j to 2.17.1","Names of schemas or namespaces in the Data Model should wrap","Broken layout on Data Model page on locales with longer text"]},{"version":"v0.41.5","released":"2021-12-16","patch":true,"highlights":["Upgrade Log4j to 2.16.0","X-rays fails if there''s a filter in the question","XLSX export does not respect \"Separator style\"","One cannot change any of the LDAP Settings once it''s been initially setup","Custom Expression `coalesce` is using wrong field reference when nested query","Custom Expression `case` is using wrong field reference when nested query","Dashboard causes permission error, when \"Click Behavior\" linking to dashboard/question without access","Site URL validation too strict, doesn''t accept underscore","Reverse proxy reset email should use site URL in email body and not localhost"]},{"version":"v0.41.4","released":"2021-12-10","patch":true,"highlights":[]},{"version":"v0.41.3.1","released":"2021-12-02","patch":true,"highlights":["BigQuery and Google Analytics drivers broken on x.41.3","BigQuery connection error on 0.41.1"]},{"version":"v0.41.3","released":"2021-12-01","patch":true,"highlights":["Static viz creates Picaso painting, when data is unordered Timeseries","Harmonize Google dependency versions, which could cause conflict between GA and new BigQuery driver","Saving/updating questions can take a very long time (seconds or minutes) on large instances","Funnel chart showing retained NaN% when all rows from aggregate column are zero","Changing a (old) pivoted table to less than 3 columns results in blank screen","Exports fails, when there''s invalid visualization `column_settings` references","Cannot send test emails before creating subscription, when using non-default filter values","Native editor autocomplete suggestions makes object lookup without `limit`","Strip whitespace from Google sign-in client IDs","Validate Google sign-in client IDs","Dashboard causes permission error, when \"Click Behavior\" linking to dashboard/question without access","Clicking on legend in native question breaks the UI","Trend tile on dashboard differs from tile on full screen"]},{"version":"v0.41.2","released":"2021-11-09","patch":true,"highlights":["Frontend crashes when opening admin database permissions page","Cannot access Notebook for questions that uses a Custom Column as joining column","Requests to `GET /api/card/123` is making slow queries on larger instances","BigQuery can cause conflict with some column names like `source`","\"Verify this question\" button is shown even when content moderation feature is not enabled","New BigQuery driver with \"Project ID (override)\" defined causes different Field Filter references","Dashboard subscription send by Email fails with xlsx attachements","Textbox markdown links on images difficult to click",', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 10, '"Some questions with old field dimensions or changed columns cannot be viewed, because of Javascript loop","Multi-column join interface defaults binning for numeric fields causing incorrect results","Sandboxing queries fails with caching is enabled","Changing redshift db details leads to closed or broken resource pool","Audit visualizations does not show correct information, when there''s more than 1000 aggregated dates","\"Set up your own alert\" text needs padding ","Dashboard Subscriptions are not deactivated, when dashboard is archived","Update Uberjar builds on CircleCI to new build script","ED25519 keys not working for built-in SSH tunnels","Pin Maps with more than 1000 results (LeafletTilePinMap) not working with native queries"]},{"version":"v0.41.1","released":"2021-10-21","patch":true,"highlights":["Not all endpoints are called, when doing FullApp embedding","XLSX export of large columns fails because of formatting limitations","Caching on 0.41.0 caches results for very long time (does not respect settings defined)","Exporting large amount of data can result in OutOfMemory","Chart descriptions (except table) is not shown in dashboards","Better approach for column ordering in exports","Remapped (display value) columns are dropped in downloads","Tools for fixing errors problems with postgres semantics of limits (blank display of error table)","Filtering null-column via the drill-through action menu causes blank screen","Data Model shows blank page if there are any hidden tables in the database","Columns missing from exports, when viz settings are using older field dimensions","Pulses with rounded floats render a hanging decimal point in 0.41.0","Raise MB_DB_CONNECTION_TIMEOUT_MS to 10000 as default","Pulse/Subscription table cards with two columns (string, integer) fail to render","[Add Database > Presto] Multiple JDBC field options","Impossible to choose fields from different schema on Field Filters","In email subscription, the original question title is shown instead of the curated title (v41)","Audit > Questions > Total runtime displays link instead of an actual time","KeyExchange signature verification failed for key type=ssh-rsa","Export to XLSX can fail, when there''s a very high integer value","Questions -> all questions in Audit feature sorts by null values","Allow caching of fonts and images","Dashboard Subscription test email button does not show error messages","EE Audit App frontend does not display error messages if queries fail","Dashboard Textbox does not render links unless using Markdown","Pin map only containing null location results causes the frontend to constantly reload or blank page","X-Rays: Table field is shown as \"null\" in the title","Custom Column with the same name as a table column returns incorrect results when grouped","Adding data series to dashboard widget lags then sometimes hangs the UI"]},{"version":"v0.41.0","released":"2021-10-06","patch":false,"highlights":["Went setting up multiple Dashboard Subscriptions, \"Send email now\" always sends the first one you set up until you refresh the page","Pull in translations for 0.41","Export in 0.41.0-rc1 does not include aggregated columns","Whitelabel color options are not translatable","Error inserting to view_log in 41-RC1","Fix filter alignment in emails with many or long values","Whitelabel includes `Metabase` in the subject for Alerts","XLSX download fails, when settings still has the old `k:mm` hour-format instead of `HH:mm`","History of last edited questions","Search fields in `Tools > Errors` should be disabled when there are no questions","\"Rerun Selected\" button is always enabled (even when there are no broken questions)","Dragging dashboards filters makes them hidden while dragging","Fix x-ray dashboards crash on first open","Fix Audit logging not showing ad-hoc native queries","X-ray dashboards crash on first opening","Send to Slack/Send email now buttons on dashboard subscriptions send the wrong dashboard","master - the upper-corner Run/Reload button has become very big","Schemas with only hidden tables are shown in the', NULL);       
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 11, U&' data selector","Saved Question: changing the breakout field (summarize) removes order-by (sort)","Notebook Join UI display wrong table name with multiple join (master)","Active filter widget are not using whitelabel color on border","Data point value can be slightly cut-off for the top Y-axis values","Dashboard sticky filter section is visible even when there aren''t any filters","Click Behavior does not work with old Pivot","BigQuery Custom Column difficult to use because of name restrictions","Revision history does not update until page reload","Visualizations are not always using whitelabel colors by default","BigQuery Custom Expression function `Percentile` and `Median` not using correct backtick quoting","BigQuery `BIGNUMERIC` is recognized as `type/*` and displayed as string","Joining behavior on datetime columns needs to be clearer"]},{"version":"v0.40.5","released":"2021-09-21","patch":true,"highlights":["\+01f916 backported \\"GeoJSON URL validation fix\\"","Grid map causes frontend reload or blank screen, when hovering the grids if there is no metric","Cannot create more than 2 metrics, when UI language is Turkish - screen goes blank or displays \\"Something went wrong\\"","Visualizations with more than 100 series just shows a blank chart","Data point values uses formatting Style of first serie on all series"]},{"version":"v0.40.4","released":"2021-09-09","patch":true,"highlights":["Dashboard filter autocomplete not working with mixed Search/Dropdown when dropdown has a `null` value","Not possible to delete Dashboard Subscription unless dashboard is in root collection","Possible to not input recipient of Subscription, which will then cause blank screen","Valid Email settings disappear on save, but re-appear after refresh","Unable to click \\"Learn more\\" on custom expression","Editing an alert causes it to be deleted in some circumstances","New databases with \\"This is a large database ...\\" still uses the default sync+scan settings","Adding cards to dashboard via search can cause the card to show spinner until browser refresh","Cannot login with OpenAM SAML since 1.38.3","Native question \\"Filter widget type\\"=\\"None\\" hides the filter widget even after changing it to something else"]},{"version":"v0.40.3.1","released":"2021-08-26","patch":true,"highlights":[]},{"version":"v0.40.3","released":"2021-08-25","patch":true,"highlights":["\+01f916 backported \\"Keep `collection_id` of dashboard subscriptions in sync with same field on dashboard\\"","Run-overlay not going away on GUI question","Dashboard causes scrollbars to constantly go on/off depending on viewport size ","Serialization `--mode skip` incorrectly updates some objects","Serialization crashes on dump if there''s no collections","Serialization: Cannot load into empty/blank target","Clicking the column formatting button when the sidebar is already open should correctly open that column''s formatting sidebar","Dashboard Subscription doesn''t follow the order of the cards on the dashboard","Clicking away from Sandbox modal breaks perms page"]},{"version":"v0.40.2","released":"2021-08-03","patch":true,"highlights":["Update strings for 0.40.2","Docs for 40.2","Snippet folder permissions are always applied to root","Cannot start development in VS Code because of missing Node.js","Search widget on question builder hangs tab, API field search limit not respected","Only 50 groups are displayed","People search dropdown goes outside of the screen","Only 50 users shown in email autocomplete and \\"Other user''s personal collection\\"","Dashboard - Adding \2018Click Behavior\2019 to an image field converts image to URL","Cannot upgrade to v0.40.x on AWS Elastic Beanstalk due to AWS Inspector not being available in certain regions","Add Metabase Cloud link to admin settings for hosted instances","Fix dashboard card hovering buttons drag behaviour","Elastic Beanstalk nginx config is not updated on latest EB docker images","Cannot deactivate users after the first 50 users","Tabs in the Audit section look broken","Duplication of the displayed table","Allow selecting text in Textbox cards, while dashbo', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 12, 'ard is in edit-mode","Metabase on old AWS Elastic Beanstalk (Amazon Linux w/ old Docker) upgrade to 0.40 failed","Popover footer is displaced when using filter with a search input","Public Sharing footer is double-size because action buttons are stacked","Error when setting column type to Number in data model settings","Site URL can sometimes be incorrectly defined during startup","Padding needed for button on map settings page","LDAP/Email settings gets cleared if validation fails","Serialization: Visualization column settings lost","Waterfall visualization does not work with ordinal X-axis","Clicking \"Cancel\" on collection archive modal should let you stay in that same collection","Snowflake Connector Requires Deprecated Region Id","Modify instead of replace default EB nginx config"]},{"version":"v0.40.1","released":"2021-07-14","patch":true,"highlights":["An error occurs when opening a public question with filters having default parameters","Remove Multi-Release from manifest","Questions filters does not work in Embedded/Public","Long titles in collections push out the last-edited-by and last-edited-at columns","Only first 50 databases are displayed","After hiding the column and then setting a required default value for SQL field filter (connected to that column) shows all fields as hidden and breaks SQL filters completely","Global search suggestions dropdown appears behind the dataset search widget when starting a simple question","Clean up the user-facing strings for coercion options","Clicking Visualize in Notebook makes the question \"dirty\" even if no changes was made"]},{"version":"v0.40.0","released":"2021-07-08","patch":false,"highlights":["Avoid error when user searches with no data perms","Updated saved question data picker - styling improvements","The pinned items from the main collection are not showed on the front page anymore","[0.40 blocker] Handle personal collections better in the new saved question data picker","Remove \"Something went wrong\"","Filter flag causes overlay for required \"Number\" filter with the default value set","Do not show Cloud CTA for Enterprise Edition","The list of collections available on homepage \"Our analytics\" depends on the name of the first 50 objects","Filter feature flag causes Run-overlay of results in Native editor unless editor is expanded","Error message missing when logging in to a disabled account with Google sign-in","unix-timestamp->honeysql implementation for h2 is incorrect for microseconds","Fix funnel appearance","Confusing UI when adding GeoJSON with no identifiers","Better error handling when adding malformed GeoJSON","Can''t archive a question from the Question page","Can''t move item to \"Our analytics\" using drag-n-drop","Can''t \"Select All\" collection items if all items are pinned","Bulk archive doesn''t work","Selecting bin count on intermediate data question fails","Collections Metadata FE Implementation","Group by on a `:Coercion/YYYYMMDDHHMMSSBytes->Temporal` postgres column fails","Double binning menu for date fields when using Saved Question (Native)","Cannot filter only on longitude/latitude range - UX is forcing user to fill out values for both fields","Bug in values on data points for waterfall charts","Table view on Permissions shows error on browser refresh","Password login on SSO instance drops the redirect URL","No error is reported when adding SQLite database that doesn''t exist","Specific combination of filters can cause frontend reload or blank screen","Dashboard Contains filter doesn''t remain when clicking on Question title","Normal login errors are not surfaced if SSO is also active"]},{"version":"v0.39.4","released":"2021-06-16","patch":true,"highlights":["Javascript error when enabling JWT authentication","Switch to column settings when sidebar is already open","Questions on MongoDB return ''No results!'' after upgrade from 0.38.5 to 0.39.0 when filtering against array ","Login blocked till timeout if Metabase can''t reach GeoJS API","Missing tooltip for sharing individual question","Histograms should filter out null x values","Shi', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 13, 'fted chart values on line with ordinal x axis","Don''t show Custom Expression helper, when input is not in focus","Dashboard filters dropdown only list the first 100 values","Cannot use arithmetic between two `case()` function in Custom Expression","LDAP login fails with Group Sync when user is assigned to 1 group","LDAP auth errors with \"did not match stored password\" if `givenName` or `sn` is missing","Cannot join Saved Questions that themselves contains joins","Human-reable numering not working properly","Time series filter and granularity widgets at bottom of screen are missing","LDAP group sync - LDAPException after removing user from a mapped group","Dashboard text cards aren''t scrolling"]},{"version":"v0.39.3","released":"2021-05-27","patch":true,"highlights":["Feature flag causes problems with Number filters in Native query","Revoking access to users in multiple groups does not correctly cleanup GTAP","LDAP settings form hitting wrong API endpoint on save","ExpressionEditor loses value when user resizes browser window","ExpressionEditor loses value when user clicks away from associated name input","Filter dropdown not working for non-data users, when field has 300+ distinct values.","Tooltip only shows first Y-axis value when X-axis is numeric and style is Ordinal/Histogram","Gauge visualization on small screens can cause frontend refresh on hover","Serialization: `field-literal` converted to `field` since 1.39.0","Serialization dumps with static references instead of paths in 1.39.0","Fix Serialization P1s","Incorrect result + loss of user input when summarizing with Saved Question","Some places shows `{0}` placeholder instead of expected value","Serialization load-process does not update `source-table` in joins, leading to broken questions","Unchecking \"Remember me\" box has no effect -- close the browser and reopen, then go back to your MB instance and you''re still logged in","Serialization `dump` includes Personal Collections","Serialization: Nested question references questions in other collection are moved and becomes corrupted","Serialization: Snippet folders and Collections collide on `dump` because of missing namespace separation","Serialization: Snippets are not transferred correctly, leading to incorrect references and broken queries","Serialization: Click Behavior not translating entitiy ID on dump, potentially referencing wrong entities on load","Wrong LDAP port input (non-numeric) can cause complete lockout","Nested queries using metric got wrong SQL","Cannot aggregate question with unix timestamp column that is converted/cast in Metabase","Test LDAP settings before saving","Nested queries using metrics need to include all columns used in metric filters"]},{"version":"v0.39.2","released":"2021-05-17","patch":true,"highlights":["Regression combining Druid date filters with dimension filters","Regression in filtering Druid table where greater than date","Variable Field Type after upgrade \"Input to parse-value-to-field-type does not match schema\"","Whitelabel favicon does not work correctly in all browsers","Show right versions on enterprise custom builds","Not possible to select pinned collection item using checkbox","The new \"contains\" behavior for field value lookup doesn''t work outside of dashboards","Cannot restore table visibility in Data Model, when database is down","LDAP user authorization failed with `$` in password","Difficult to use some filters, when user has no data permissions [FE - Filter widget stops working if API endpoint returns 403]","Serialization: Dashboard cards are corrupted, when questions are outside of dashboard collection","Collection tree loader causes UI jump","Filters with dropdown lists uses query on the database","Login Failing for LDAP if user email isn''t lowercase","Startup warning about unsupported class will impact performance","Auth Returns 400 Bad Request instead of 401 Unauthorized upon wrong credentials submission","Need better instructions for setting up Google Auth"]},{"version":"v0.39.1","released":"2021-04-27","patch":true,"highlights":["Tooltip shows', NULL);    
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 14, ' incorrect values on unaggregated data with breakout","Can''t use parentheses as expected in filter expressions","UI prevents adding 2 parameters to `Percentile()` function","Login logo is left-aligned on EE, when whitelabel features are enabled","No loading spinner when clicking a Collection on the home page","Tooltip on unaggregated data does not show summed value like the visualization","Table with multiple Entity Key columns incorrectly filtering on \"Connected To\" drill-through"]},{"version":"v0.39.0.1","released":"2021-04-20","patch":false,"highlights":["Cannot select category Field Filter in Native query on 0.39.0","map category/location to string so we can treat them like string/= in UI"]},{"version":"v0.39.0","released":"2021-04-19","patch":false,"highlights":["Strings with placeholders like {0} aren''t translating correctly","Wrong tooltip labels and values for multiple series charts in dashboard","Add feature flag for the new 0.39.0 dashboard filter types","Pulse fails when visualization_settings is referring to a field-literal column","Login History not recording correct IP address","Add an ENV var setting for typeahead search","BigQuery with filter after aggregation of join table fails query with wrong alias reference on 38.x","Dashboard Textbox images are 100% width","Questions based on Saved Questions is not using the same query for date filters leading to wrong results","0.39 string translations","0.39 Docs","Add missing \"is\" assertions to various tests","Custom Expression autocomplete operator selection is appended to what was typed","Custom Expression formula starts with high cursor placement on Firefox","Custom Expression filter not setting the \"Done\" button to current state of the formula until onblur","Custom Expression editor is removing spaces too aggressive","Hitting return when modifying a custom expression incorrectly discards changes","metabase/metabase-enterprise-head Docker image doesn''t have enterprise extensions","Custom expressions: UI is too wide when shown in the sidebar","Search: some results are as being in a folder which doesn''t exist in the data reference","Error saving metric in data reference","Dashboard Subscription Filters: Set Parameter Values","Normalize queries in URL fragments on FE","Support string and number filter operators in dashboard parameter filters ","defsetting macro throw an Exception if you try to define a setting that''s already defined in a different namespace","Fix render error when removing a dashboard parameter","Upgrade HoneySQL version to latest","Dashboard Filter Improvements (to support large-scale rollout)","SSH Connectivity Improvements","MBQL Refactor: Combine various Field clauses into one new clause"]},{"version":"v0.38.4","released":"2021-04-12","patch":true,"highlights":["Not possible to position Y-axis if there''s only one series","Tooltip on unaggregated data does not show summed value like the visualization","For a new Custom column, I can set Style to \"Currency\", but cannot choose the Unit of Currency","Add Kyrgyz Som to currency list"]},{"version":"v0.38.3","released":"2021-04-01","patch":true,"highlights":["Overflow text on Ask a question page ","Filtering on coerced column doesn''t always know its coerced","Wrong series label in multiple series scatterplot","Dashboard Subscription fails for all SQL questions with a Field Filter on date column connected on dashboard","Dashboard Subscription Emails do not work with filtered Native Queries","Dashboard Subscription sidebar broken for Sandboxed users","Provide more logging information on permission errors when creating Cards"," In Settings > Email, Save Changes is enabled even when there are no changes","Exports always uses UTC as timezone instead of the selected Report Timezone","Invalid Redirect Location After SAML Sign-in via Full App Embed","Cannot download XLSX if there''s more than 1 million results","Frontend load issue: SMTP Email","Pie chart sometimes does not show total","Users with collections \"edit\" permissions and no data access permissions can''t edit question metadata","Add Bitco', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 15, 'in as a unit of currency","Column \"Custom title\" not working in tooltips","Schema sync does not update changes in column type case","Error on visualization change of a question with SQL queries view only permission","Line chart dots don''t have `cursor: pointer` when hovering"]},{"version":"v0.38.2","released":"2021-03-17","patch":true,"highlights":["Data model not showing PostgreSQL tables when they are partitioned","Migrate old pre-1.37 \"Custom Drill-through\" settings to x.37+ \"Click Behavior\"","Regression with URL links"]},{"version":"v0.38.1","released":"2021-03-03","patch":true,"highlights":["Serialization `dump` of aggregated questions are not copied over on `load`","Serialization doesn''t update Sub-Query variable reference","Oracle, BigQuery filtering by column with day-of-week bucketing not working","Pivot Table export not working on unsaved questions","Pivot Table does not work for users without data permissions","Pivot Table not working with Sandboxed user","BigQuery: Joins in the query builder generate invalid table aliases","BigQuery: Question Stays running until timeout when query is error in Native Query","Serialization: Archived items are included in `dump`","Breadcrumbs can be confusing (the current one \"seems\" clickable when it''s not)","regexextract breaks query on sandboxed table","Multi-level aggregations fails when filter is the last section","Pivot queries aren''t recorded to query execution log","Start of Week not applied to Field Filter in Native question, which can lead to incorrect results","In Safari 14, add-grouping button disappears randomly but consistently","Serialization does not initialize 3rd party drivers when loading a dump","Wrong day names are displayed when using not-Sunday as start of the week and grouping by \"Day of week\"","Difficult to see which cells has \"Click behavior\" vs normal behavior","Object Detail previous/next buttons not working correctly","Global number formatting does not apply to percentages","Native question filter widget reordering doesn''t work"]},{"version":"v0.38.0.1","released":"2021-02-19","patch":false,"highlights":[]},{"version":"v0.38.0","released":"2021-02-16","patch":false,"highlights":["Sandboxed question with `case` Custom Field doesn''t substitute the \"else\" argument''s table","Custom Expression using `case()` function fails when referencing the same column names","Filtering a Custom Column does not give correct results when using \"Not equal to\"","Cannot remove columns via QB sidebar, then query fails, but works if being removed via Notebook","fix(rotate-encryption-key) settings-last-updated is not encrypted","For Pivot Tables, download popup doesn''t show","Dashboard Subscriptions: Have to click the close button multiple times after viewing a Subscription","Advanced Sandboxing ignores Data Model features like Object Detail of FK","Publish \"latest\" OSS JAR","Custom GeoJSON files are not sorted in the dropdown","user@password JDBC connection strings for application DB no longer work","Shrunken bubbles shown in question for null values","Drilling down by a Region Map assigns the wrong value to the filter","Using \"Reset to defaults\" on textbox causes it to become a corrupted card on dashboard","Add a lightweight notify api endpoint","Sandboxing on tables with remapped FK (Display Values) causes query to fail","Allow usage of PKCS-12 certificates with Postgres connections","dump-to-h2 does not return a non-zero exit code on failure","Advanced Sandboxing using questions that return more/other columns than the sandboxed table is not possible anymore, but the errors are not helpful","Bar chart x-axis positions can cause different spacing depending on the dates returned","Custom Columns breaks Pivot Table","Pivot tables broken on dashboard after resize","dump-to-h2 with --dump-plaintext should check for presence of MB_ENCRYPTION_SECRET_KEY","Right alignment of pivot table value cells looks broken","Don''t inform admins about MB cloud on EE instances","add cmd rotate-encryption-key","Token check retry is too aggressive","Login page should automatic', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 16, 'ally focus on the email input field","Dashboard subscriptions including cards no longer in dashboard","UI should update when a collection changes parent"]},{"version":"v0.37.9","released":"2021-02-11","patch":true,"highlights":[]},{"version":"v0.37.8","released":"2021-01-29","patch":true,"highlights":["Cannot add (date) filter if calendar is collapsed"]},{"version":"v0.37.7","released":"2021-01-20","patch":true,"highlights":[]},{"version":"v0.37.6","released":"2021-01-13","patch":true,"highlights":[]},{"version":"v0.37.5","released":"2021-01-05","patch":true,"highlights":["Linked filters breaking SQL questions on v0.37.2","Embedding loading slow","Cannot toggle off ''Automatically run queries when doing simple filtering and summarizing'' "]},{"version":"v0.37.4","released":"2020-12-17","patch":true,"highlights":["Error in Query: Input to aggregation-name does not match schema","Revert #13895","Exports always uses UTC as timezone instead of the selected Report Timezone","Between Dates filter behaves inconsistently based on whether the column is from a joined table or not"]},{"version":"v0.37.3","released":"2020-12-03","patch":true,"highlights":["Fix chain filtering with temporal string params like ''last32weeks''","Linked filters breaking SQL questions on v0.37.2","Running with timezone `Europe/Moscow` shows Pulse timezone as `MT` instead of `MSK` and sends pulses on incorrect time","Order fields to dump by ID","Remove object count from log output"]},{"version":"v0.37.2","released":"2020-11-16","patch":true,"highlights":["When visualization returns `null` (No results), then UI becomes broken"]},{"version":"v0.37.1","released":"2020-11-12","patch":true,"highlights":["Table schema sync performance impact","v0.37.0.2 doesn''t sync Vertica schema","Pie chart shows spinner, when returned measure/value is `null` or `0`","Wrong day names are displayed when using not-Sunday as start of the week and grouping by \"Day of week\"","When result row is `null`, then frontend incorrectly shows as \"No results!\"","Snowflake tables with a GEOGRAPHY column cannot be explored","Cannot edit BigQuery settings without providing service account JSON again","Sync crashes with OOM on very large columns/row samples [proposal]","500 stack overflow error on collection/graph API call","Custom Column after aggregation creates wrong query and fails","The expression editor shouldn''t start in error mode without any user input","Pulse attachment file sent without file extension","Metric with unnamed Custom Expression breaks Data Model for table","Nested queries with duplicate column names fail","pulse attachment file(question name) Korean support problem","Pulse Bar Chart Negative Values Formatting"]},{"version":"v0.37.0.2","released":"2020-10-26","patch":false,"highlights":[]},{"version":"v0.36.8.2","released":"2020-10-26","patch":true,"highlights":[]},{"version":"v0.37.0.1","released":"2020-10-23","patch":false,"highlights":[]},{"version":"v0.36.8.1","released":"2020-10-23","patch":true,"highlights":[]},{"version":"v0.37.0","released":"2020-10-22","patch":false,"highlights":["Fix null handling in filters regression","Add translation for Bulgarian","0.37.0-rc3: Click behavior to Dashboard shown on Public/Embedded","NO_COLOR/MB_COLORIZE_LOGS does not remove all ansi codes","0.37.0-rc3: Filtering a joined table column by \"Is not\" or \"Does not contain\" fails","Update translations for final 0.37 release","0.37.0-rc2: Monday week start displays incorrectly on bar chart","0.37.0-rc2: Linked filter showing all values (not filtering)","Only get substrings in fingerprinting when supported [ci drivers]","0.37.0-rc2: log4j should not output to file by default","0.37-RC2: we should suppress drag behavior when custom click behavior is set","0.37-RC2: disable Done button in cases where click behavior target isn''t specified","0.37-RC2: weird edit state when saving a dashboard with incomplete click behavior","0.37-RC2: Interactivity summary tokens squashed on small dashboard cards","0.37.0-rc2: Hovering on custom map no longer displays region name, displays region identi', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 17, U&'fier instead","0.37.0-rc1: \\"Click behavior\\" to URL for non-table card, doesn''t show reference fields to use as variables","0.37.0-rc1: Variables from Saved Question are referencing the same question","0.37.0-rc2: Cannot create custom drill-through to dashboard","0.37-rc1: after clicking a custom link that passes a value to a param, clicking Back shouldn''t bring that value to the original dashboard","0.37-rc1: When mapping dashboard filters to columns, SQL questions should display the name of the column mapped to the field filter","0.37-rc1: customizing a dashboard card''s click behavior without specifying a destination causes strange behavior","0.37-rc1: canceling the dashboard archive action takes you to the collection","Embedded versions of new chain filters endpoints ","\\"Does not contain\\" and \\"Is not\\" filter also removes nulls","Docs - 37 release - new dashboard functionality","forward slash on table name causes ORA-01424 and blocks the sync step","Update login layout and illustration.","MySQL grouping on a TIME field is not working","Field Filter variables in SQL question don\2019t show table name when connecting filters in dashboard","Upgrade to log4j 2.x"]},{"version":"v0.36.8","released":"2020-10-22","patch":true,"highlights":[]},{"version":"v0.36.7","released":"2020-10-09","patch":true,"highlights":["Presto not respecting SSL and always uses http instead of https","Footer (with export/fullscreen/refresh buttons) on Public/Embedded questions disappears when using Premium Embedding","Postgres sync not respecting SSH tunneling"]},{"version":"v0.36.6","released":"2020-09-15T22:58:04.727Z","patch":true,"highlights":["Various bug fixes"]},{"version":"v0.36.5.1","released":"2020-09-11T23:16:26.199Z","patch":true,"highlights":["Remappings should work on broken out fields"]},{"version":"v0.36.4","released":"2020-08-17T22:41:20.449Z","patch":true,"highlights":["Various bug fixes"]},{"version":"v0.36.3","released":"2020-08-04T23:57:45.595Z","patch":true,"highlights":["Support for externally linked tables"]},{"version":"v0.36.2","released":"2020-07-31T17:46:34.479Z","patch":true,"highlights":["Various bug fixes"]},{"version":"v0.36.1","released":"2020-07-30T18:10:44.459Z","patch":true,"highlights":["Various bug fixes"]},{"version":"v0.36.0","released":"2020-07-21T19:56:40.066Z","patch":false,"highlights":["SQL/native query snippets","Language selection"]},{"version":"v0.35.4","released":"2020-05-29T17:31:58.191Z","patch":true,"highlights":["Security fix for BigQuery and SparkSQL","Turkish translation available again","More than 20 additional bug fixes and enhancements"]},{"version":"v0.35.3","released":"2020-04-21T21:18:24.959Z","patch":true,"highlights":["Various bug fixes"]},{"version":"v0.35.2","released":"2020-04-10T23:03:53.756Z","patch":true,"highlights":["Fix email and premium embedding settings","Fix table permissions for database without a schema","Fix \\"Error reducing result rows\\" error"]},{"version":"v0.35.1","released":"2020-04-02T21:52:06.867Z","patch":true,"highlights":["Issue with date field filters after v0.35.0 upgrade","Unable to filter on manually JOINed table"]},{"version":"v0.35.0","released":"2020-03-25T18:29:17.286Z","patch":false,"highlights":["Filter expressions, string extracts, and more","Reference saved questions in your SQL queries","Performance improvements"]},{"version":"v0.34.3","released":"2020-02-25T20:47:03.897Z","patch":true,"highlights":["Line, area, bar, combo, and scatter charts now allow a maximum of 100 series instead of 20.","Chart labels now have more options to show significant decimal values.","Various bug fixes"]},{"version":"v0.34.2","released":"2020-02-05T22:02:15.277Z","patch":true,"highlights":["Various bug fixes"]},{"version":"v0.34.1","released":"2020-01-14T00:02:42.489Z","patch":true,"highlights":["Various bug fixes"]},{"version":"v0.34.0","released":"2019-12-20T01:21:39.568Z","patch":false,"highlights":["Added support for variables and field filters in native Mongo queries","Added option to display data values on Line, Bar, and Area charts","Many Timezone fixes"]},{"ver', NULL);        
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 18, 'sion":"v0.33.7.3","released":"2019-12-17T01:45:45.720Z","patch":true,"highlights":["Important security fix for Google Auth login"]},{"version":"v0.33.7","released":"2019-12-13T20:35:14.667Z","patch":true,"highlights":["Important security fix for Google Auth login"]},{"version":"v0.33.6","released":"2019-11-19T20:35:14.667Z","patch":true,"highlights":["Fixed regression that could cause saved questions to fail to render (#11297)","Fixed regression where No Results icon didn''t show (#11282)","Pie chart visual improvements (#10837)"]},{"version":"v0.33.5","released":"2019-11-08T20:35:14.667Z","patch":true,"highlights":["Added Slovak translation","Fixed support for MySQL 8 with the default authentication method","Fixed issues with X-axis label formatting in timeseries charts"]},{"version":"v0.33.4","released":"2019-10-08T20:35:14.667Z","patch":true,"highlights":["Custom expression support for joined columns","Fixed issue with filtering by month-of-year in MongoDB","Misc Bug Fixes"]},{"version":"v0.33.3","released":"2019-09-20T08:09:36.358Z","patch":true,"highlights":["Chinese and Persian translations now available again","Misc Bug Fixes "]},{"version":"v0.33.2","released":"2019-09-04T08:09:36.358Z","patch":true,"highlights":["Fixed Cards not saving","Fixed searrch not working "]},{"version":"v0.33.1","released":"2019-09-04T08:09:36.358Z","patch":true,"highlights":["Fixed conditional formatting not working","Fixed an issue where some previously saved column settings were not applied ","Fixed an issue where pulses were not loading "]},{"version":"v0.33.0","released":"2019-08-19T08:09:36.358Z","patch":false,"highlights":["Notebook mode + Simple Query Mode","Joins","Post Aggregation filters"]},{"version":"v0.32.10","released":"2019-07-28T08:09:36.358Z","patch":true,"highlights":["Fix User can''t logout / gets automatically logged in.","Fix No data displayed when pivoting data","Fixed Dashboard Filters on Linked Entities Broke"]},{"version":"v0.32.9","released":"2019-06-14T08:09:36.358Z","patch":true,"highlights":["Fix issues connecting to MongoDB Atlas Cluster","Fix database addition on setup","Fixed numeric category error with Postgres"]},{"version":"v0.32.8","released":"2019-05-13T08:09:36.358Z","patch":true,"highlights":["Fix i18n"]},{"version":"v0.32.7","released":"2019-05-09T08:09:36.358Z","patch":true,"highlights":["Fix published SHA Hash"]},{"version":"v0.32.6","released":"2019-05-08T12:09:36.358Z","patch":true,"highlights":["Fixed regression where Dashboards would fail to fully populate","Performance improvements when running queries","Security improvements"]},{"version":"v0.32.5","released":"2019-04-20T12:09:36.358Z","patch":true,"highlights":["Improve long-running query handling","Fix H2 to MySQL/Postgres migration issue","Fix issue with embedded maps with custom GeoJSON"]},{"version":"v0.32.4","released":"2019-04-09T12:09:36.358Z","patch":true,"highlights":["Fix issue where Google Auth login did not work","FFix issue where Google Auth login did not work"]},{"version":"v0.32.3","released":"2019-04-08T12:09:36.358Z","patch":true,"highlights":["Fixed Snowflake connection issues","Fixed Dashboard copy","Fixed non-root context logins"]},{"version":"v0.32.2","released":"2019-04-03T12:09:36.358Z","patch":true,"highlights":["Fixed dashboard date filters ","Fixed SSL error using Quartz w/ MySQL","Fix colors in dashboards"]},{"version":"v0.32.1","released":"2019-03-29T12:09:36.358Z","patch":true,"highlights":["Fixed MySQL connections with SSL","Fixed table sync issue"]},{"version":"v0.32.0","released":"2019-03-28T12:09:36.358Z","patch":false,"highlights":["Modular Drivers (reducing memory consumption)","Async queries (improving responsiveness)","Reduced memory consumption."]},{"version":"v0.31.2","released":"2018-12-07T12:09:36.358Z","patch":true,"highlights":["Added German translation","Fixed Heroku out-of-memory errors","Fixed issue with Slack-based Pulses due to rate limiting."]},{"version":"v0.31.1","released":"2018-11-21T12:09:36.358Z","patch":true,"highlights":["Ability to clone dashboards","Faster startup time and lower me', NULL);       
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 19, 'mory consumption","Migration issue fixes."]},{"version":"v0.31.0","released":"2018-11-08T12:09:36.358Z","patch":false,"highlights":["New visualizations and combo charts","Granular formatting controls","Snowflake Support"]},{"version":"v0.30.4","released":"2018-09-27T12:09:36.358Z","patch":true,"highlights":["Metabase fails to launch in Chinese","Fix token status checking","Fix BigQuery SQL parameters with encrypted DB details"]},{"version":"v0.30.3","released":"2018-09-13T12:09:36.358Z","patch":true,"highlights":["Localization for Chinese, Japanese, Turkish, Persian","Self referencing FK leads to exception","Security improvements"]},{"version":"v0.30.2","released":"2018-09-06T12:09:36.358Z","patch":true,"highlights":["Localization for French + Norwegian","Stability fixes for HTTP/2"]},{"version":"v0.30.1","released":"2018-08-08T12:09:36.358Z","patch":true,"highlights":["Localization for Portuguese","Timezone fix","SQL Template tag re-ordering fix"]},{"version":"v0.30.0","released":"2018-08-08T12:09:36.358Z","patch":false,"highlights":["App wide search","Enhanced Collection permissions","Comparison X-Rays"]},{"version":"v0.29.3","released":"2018-05-12T12:09:36.358Z","patch":true,"highlights":["Fix X-ray rules loading on Oracle JVM 8"]},{"version":"v0.29.2","released":"2018-05-10T12:09:36.358Z","patch":true,"highlights":["Fix Spark Driver"]},{"version":"v0.29.1","released":"2018-05-10T11:09:36.358Z","patch":true,"highlights":["Better heroku memory consumption","Fixed X-Ray Bugs","Drill through from line chart selects wrong date"]},{"version":"v0.29.0","released":"2018-05-01T11:09:36.358Z","patch":false,"highlights":["New and Improved X-Rays","Search field values","Spark SQL Support"]},{"version":"v0.28.6","released":"2018-04-12T11:09:36.358Z","patch":true,"highlights":["Fix chart rendering in pulses"]},{"version":"v0.28.5","released":"2018-04-04T11:09:36.358Z","patch":true,"highlights":["Fix memory consumption for SQL templates","Fix public dashboards parameter validation","Fix Unable to add cards to dashboards or search for cards, StackOverflowError on backend"]},{"version":"v0.28.4","released":"2018-03-29T11:09:36.358Z","patch":true,"highlights":["Fix broken embedded dashboards","Fix migration regression","Fix input typing bug"]},{"version":"v0.28.3","released":"2018-03-23T11:09:36.358Z","patch":true,"highlights":["Security improvements"]},{"version":"v0.28.2","released":"2018-03-20T11:09:36.358Z","patch":true,"highlights":["Security improvements","Sort on custom and saved metrics","Performance improvements for large numbers of questions and dashboards"]},{"version":"v0.28.1","released":"2018-02-09T11:09:36.358Z","patch":true,"highlights":["Fix admin panel update string","Fix pulse rendering bug","Fix CSV & XLS download bug"]},{"version":"v0.28.0","released":"2018-02-07T11:09:36.358Z","patch":false,"highlights":["Text Cards in Dashboards","Pulse + Alert attachments","Performance Improvements"]},{"version":"v0.27.2","released":"2017-12-12T11:09:36.358Z","patch":true,"highlights":["Migration bug fix"]},{"version":"v0.27.1","released":"2017-12-01T11:09:36.358Z","patch":true,"highlights":["Migration bug fix","Apply filters to embedded downloads"]},{"version":"v0.27.0","released":"2017-11-27T11:09:36.358Z","patch":false,"highlights":["Alerts","X-Ray insights","Charting improvements"]},{"version":"v0.26.2","released":"2017-09-27T11:09:36.358Z","patch":true,"highlights":["Update Redshift Driver","Support Java 9","Fix performance issue with fields listing"]},{"version":"v0.26.1","released":"2017-09-27T11:09:36.358Z","patch":true,"highlights":["Fix migration issue on MySQL"]},{"version":"v0.26.0","released":"2017-09-26T11:09:36.358Z","patch":true,"highlights":["Segment + Metric X-Rays and Comparisons","Better control over metadata introspection process","Improved Timezone support and bug fixes"]},{"version":"v0.25.2","released":"2017-08-09T11:09:36.358Z","patch":true,"highlights":["Bug and performance fixes"]},{"version":"v0.25.1","released":"2017-07-27T11:09:36.358Z","patch":true,"highlights":["After upgrading to 0.25, unknown p', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 20, 'rotocol error.","Don''t show saved questions in the permissions database lists","Elastic beanstalk upgrades broken in 0.25 "]},{"version":"v0.25.0","released":"2017-07-25T11:09:36.358Z","patch":false,"highlights":["Nested questions","Enum and custom remapping support","LDAP authentication support"]},{"version":"v0.24.2","released":"2017-06-01T11:09:36.358Z","patch":true,"highlights":["Misc Bug fixes"]},{"version":"v0.24.1","released":"2017-05-10T11:09:36.358Z","patch":true,"highlights":["Fix upgrades with MySQL/Mariadb"]},{"version":"v0.24.0","released":"2017-05-10T11:09:36.358Z","patch":false,"highlights":["Drill-through + Actions","Result Caching","Presto Driver"]},{"version":"v0.23.1","released":"2017-03-30T11:09:36.358Z","patch":true,"highlights":["Filter widgets for SQL Template Variables","Fix spurious startup error","Java 7 startup bug fixed"]},{"version":"v0.23.0","released":"2017-03-21T11:09:36.358Z","patch":false,"highlights":["Public links for cards + dashboards","Embedding cards + dashboards in other applications","Encryption of database credentials"]},{"version":"v0.22.2","released":"2017-01-10T11:09:36.358Z","patch":true,"highlights":["Fix startup on OpenJDK 7"]},{"version":"v0.22.1","released":"2017-01-10T11:09:36.358Z","patch":true,"highlights":["IMPORTANT: Closed a Collections Permissions security hole","Improved startup performance","Bug fixes"]},{"version":"v0.22.0","released":"2017-01-10T11:09:36.358Z","patch":false,"highlights":["Collections + Collections Permissions","Multiple Aggregations","Custom Expressions"]},{"version":"v0.21.1","released":"2016-12-08T11:09:36.358Z","patch":true,"highlights":["BigQuery bug fixes","Charting bug fixes"]},{"version":"v0.21.0","released":"2016-12-08T11:09:36.358Z","patch":false,"highlights":["Google Analytics Driver","Vertica Driver","Better Time + Date Filters"]},{"version":"v0.20.3","released":"2016-10-26T11:09:36.358Z","patch":true,"highlights":["Fix H2->MySQL/PostgreSQL migrations, part 2"]},{"version":"v0.20.2","released":"2016-10-25T11:09:36.358Z","patch":true,"highlights":["Support Oracle 10+11","Fix H2->MySQL/PostgreSQL migrations","Revision timestamp fix"]},{"version":"v0.20.1","released":"2016-10-18T11:09:36.358Z","patch":true,"highlights":["Lots of bug fixes"]},{"version":"v0.20.0","released":"2016-10-11T11:09:36.358Z","patch":false,"highlights":["Data access permissions","Oracle Driver","Charting improvements"]},{"version":"v0.19.3","released":"2016-08-12T11:09:36.358Z","patch":true,"highlights":["fix Dashboard editing header"]},{"version":"v0.19.2","released":"2016-08-10T11:09:36.358Z","patch":true,"highlights":["fix Dashboard chart titles","fix pin map saving"]},{"version":"v0.19.1","released":"2016-08-04T11:09:36.358Z","patch":true,"highlights":["fix Dashboard Filter Editing","fix CSV Download of SQL Templates","fix Metabot enabled toggle"]},{"version":"v0.19.0","released":"2016-08-01T21:09:36.358Z","patch":false,"highlights":["SSO via Google Accounts","SQL Templates","Better charting controls"]},{"version":"v0.18.1","released":"2016-06-29T21:09:36.358Z","patch":true,"highlights":["Fix for Hour of day sorting bug","Fix for Column ordering bug in BigQuery","Fix for Mongo charting bug"]},{"version":"v0.18.0","released":"2016-06-022T21:09:36.358Z","patch":false,"highlights":["Dashboard Filters","Crate.IO Support","Checklist for Metabase Admins","Converting Metabase Questions -> SQL"]},{"version":"v0.17.1","released":"2016-05-04T21:09:36.358Z","patch":true,"highlights":["Fix for Line chart ordering bug","Fix for Time granularity bugs"]},{"version":"v0.17.0","released":"2016-05-04T21:09:36.358Z","patch":false,"highlights":["Tags + Search for Saved Questions","Calculated columns","Faster Syncing of Metadata","Lots of database driver improvements and bug fixes"]},{"version":"v0.16.1","released":"2016-05-04T21:09:36.358Z","patch":true,"highlights":["Fixes for several time alignment issues (timezones)","Resolved problem with SQL Server db connections"]},{"version":"v0.16.0","released":"2016-05-04T21:09:36.358Z","patch":false,"highlights":["Fullscreen (and fabu', NULL);        
INSERT INTO SYSTEM_LOB_STREAM VALUES(0, 21, 'lous) Dashboards","Say hello to Metabot in Slack"]}]}', NULL);    
INSERT INTO "PUBLIC"."SETTING" VALUES
('redirect-all-requests-to-https', 'false'),
('site-url', 'http://localhost:3000'),
('site-name', 'ExchangesDashboard'),
('admin-email', 'exchanges@dashboard.com'),
('site-locale', 'en'),
('anon-tracking-enabled', 'false'),
('version-info-last-checked', '2023-10-19T18:15:00.004863Z'),
('version-info', SYSTEM_COMBINE_CLOB(0)),
('analytics-uuid', '08ae9653-e95f-417f-8991-d01cd7f32f0b'),
('instance-creation', '2022-11-21T20:57:59.152'),
('site-uuid', 'b2fe924c-9003-4ae7-aa2a-5483ffae46c9'),
('startup-time-millis', '5155'),
('settings-last-updated', '2023-10-27 23:41:20.067346+00'),
('site-uuid-for-version-info-fetching', 'e8c296af-d111-4309-9d95-561bb73d78fc'),
('custom-formatting', '{"type/Temporal":{"time_style":"HH:mm"}}');            
CREATE CACHED TABLE "PUBLIC"."METRIC_IMPORTANT_FIELD"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "METRIC_ID" INTEGER NOT NULL,
    "FIELD_ID" INTEGER NOT NULL
);          
ALTER TABLE "PUBLIC"."METRIC_IMPORTANT_FIELD" ADD CONSTRAINT "PUBLIC"."PK_METRIC_IMPORTANT_FIELD" PRIMARY KEY("ID");           
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.METRIC_IMPORTANT_FIELD;   
CREATE INDEX "PUBLIC"."IDX_METRIC_IMPORTANT_FIELD_METRIC_ID" ON "PUBLIC"."METRIC_IMPORTANT_FIELD"("METRIC_ID" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_METRIC_IMPORTANT_FIELD_FIELD_ID" ON "PUBLIC"."METRIC_IMPORTANT_FIELD"("FIELD_ID" NULLS FIRST);      
CREATE CACHED TABLE "PUBLIC"."HTTP_ACTION" COMMENT 'An http api call type of action'(
    "ACTION_ID" INTEGER COMMENT 'The related action' NOT NULL,
    "TEMPLATE" CHARACTER LARGE OBJECT COMMENT 'A template that defines method,url,body,headers required to make an api call' NOT NULL,
    "RESPONSE_HANDLE" CHARACTER LARGE OBJECT COMMENT 'A program to take an api response and transform to an appropriate response for emitters',
    "ERROR_HANDLE" CHARACTER LARGE OBJECT COMMENT 'A program to take an api response to determine if an error occurred'
);         
ALTER TABLE "PUBLIC"."HTTP_ACTION" ADD CONSTRAINT "PUBLIC"."PK_HTTP_ACTION" PRIMARY KEY("ACTION_ID");          
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.HTTP_ACTION;              
CREATE CACHED TABLE "PUBLIC"."SANDBOXES" COMMENT 'Records that a given Card (Question) should automatically replace a given Table as query source for a given a Perms Group.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "GROUP_ID" INTEGER COMMENT 'ID of the Permissions Group this policy affects.' NOT NULL,
    "TABLE_ID" INTEGER COMMENT 'ID of the Table that should get automatically replaced as query source for the Permissions Group.' NOT NULL,
    "CARD_ID" INTEGER COMMENT 'ID of the Card (Question) to be used to replace the Table.',
    "ATTRIBUTE_REMAPPINGS" CHARACTER LARGE OBJECT COMMENT 'JSON-encoded map of user attribute identifier to the param name used in the Card.',
    "PERMISSION_ID" INTEGER COMMENT 'The ID of the corresponding permissions path for this sandbox'
);            
ALTER TABLE "PUBLIC"."SANDBOXES" ADD CONSTRAINT "PUBLIC"."PK_GROUP_TABLE_ACCESS_POLICY" PRIMARY KEY("ID");     
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.SANDBOXES;
CREATE INDEX "PUBLIC"."IDX_GTAP_TABLE_ID_GROUP_ID" ON "PUBLIC"."SANDBOXES"("TABLE_ID" NULLS FIRST, "GROUP_ID" NULLS FIRST);    
CREATE CACHED TABLE "PUBLIC"."PARAMETER_CARD" COMMENT 'Join table connecting cards to entities (dashboards, other cards, etc.) that use the values generated by the card for filter values'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 RESTART WITH 4) NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'most recent modification time' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'creation time' NOT NULL,
    "CARD_ID" INTEGER COMMENT 'ID of the card generating the values' NOT NULL,
    "PARAMETERIZED_OBJECT_TYPE" CHARACTER VARYING(32) COMMENT 'Type of the entity consuming the values (dashboard, card, etc.)' NOT NULL,
    "PARAMETERIZED_OBJECT_ID" INTEGER COMMENT 'ID of the entity consuming the values' NOT NULL,
    "PARAMETER_ID" CHARACTER VARYING(36) NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);      
ALTER TABLE "PUBLIC"."PARAMETER_CARD" ADD CONSTRAINT "PUBLIC"."PK_PARAMETER_CARD" PRIMARY KEY("ID");           
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.PARAMETER_CARD;           
INSERT INTO "PUBLIC"."PARAMETER_CARD" VALUES
(1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:00.736557+00', TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:00.736557+00', 103, 'dashboard', 1, '26dff5a5', 'JZle-GdML6XOlX4zT9tjn');
CREATE INDEX "PUBLIC"."IDX_PARAMETER_CARD_PARAMETERIZED_OBJECT_ID" ON "PUBLIC"."PARAMETER_CARD"("PARAMETERIZED_OBJECT_ID" NULLS FIRST);        
CREATE INDEX "PUBLIC"."IDX_PARAMETER_CARD_CARD_ID" ON "PUBLIC"."PARAMETER_CARD"("CARD_ID" NULLS FIRST);        
CREATE CACHED TABLE "PUBLIC"."TASK_HISTORY" COMMENT 'Timing and metadata info about background/quartz processes'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 304 RESTART WITH 113412) DEFAULT ON NULL SELECTIVITY 100 NOT NULL,
    "TASK" CHARACTER VARYING(254) SELECTIVITY 1 COMMENT 'Name of the task' NOT NULL,
    "DB_ID" INTEGER SELECTIVITY 1,
    "STARTED_AT" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP SELECTIVITY 99 NOT NULL,
    "ENDED_AT" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP SELECTIVITY 99 NOT NULL,
    "DURATION" INTEGER SELECTIVITY 16 NOT NULL,
    "TASK_DETAILS" CHARACTER LARGE OBJECT COMMENT 'JSON string with additional info on the task'
);          
ALTER TABLE "PUBLIC"."TASK_HISTORY" ADD CONSTRAINT "PUBLIC"."PK_TASK_HISTORY" PRIMARY KEY("ID");               
-- 11 +/- SELECT COUNT(*) FROM PUBLIC.TASK_HISTORY;            
INSERT INTO "PUBLIC"."TASK_HISTORY" VALUES
(113380, 'sync', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.166124+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.559925+00', 1393, NULL),
(113381, 'sync-dbms-version', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.167568+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.210623+00', 43, '{"flavor":"H2","version":"2.1.214 (2022-06-13)","semantic-version":[2,1]}'),
(113382, 'sync-timezone', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.211489+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.258833+00', 47, '{"timezone-id":"UTC"}'),
(113383, 'sync-tables', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.258999+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.308033+00', 49, '{"updated-tables":0,"total-tables":8}'),
(113384, 'sync-fields', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.308197+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.999376+00', 691, '{"total-fields":71,"updated-fields":0}'),
(113385, 'sync-fks', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:20.999654+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.059373+00', 59, '{"total-fks":6,"updated-fks":0,"total-failed":0}'),
(113386, 'sync-metabase-metadata', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.059464+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.559786+00', 500, NULL),
(113387, 'analyze', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.62662+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.797117+00', 170, NULL),
(113388, 'fingerprint-fields', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.62665+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.709463+00', 82, '{"no-data-fingerprints":0,"failed-fingerprints":0,"updated-fingerprints":0,"fingerprints-attempted":0}'),
(113389, 'classify-fields', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.709555+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.748433+00', 38, '{"fields-classified":0,"fields-failed":0}'),
(113390, 'classify-tables', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.748523+00', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:21.797061+00', 48, '{"total-tables":8,"tables-classified":0}');
CREATE INDEX "PUBLIC"."IDX_TASK_HISTORY_END_TIME" ON "PUBLIC"."TASK_HISTORY"("ENDED_AT" NULLS FIRST);          
CREATE INDEX "PUBLIC"."IDX_TASK_HISTORY_DB_ID" ON "PUBLIC"."TASK_HISTORY"("DB_ID" NULLS FIRST);
CREATE CACHED TABLE "PUBLIC"."DATA_MIGRATIONS"(
    "ID" CHARACTER VARYING(254) NOT NULL,
    "TIMESTAMP" TIMESTAMP NOT NULL
);
ALTER TABLE "PUBLIC"."DATA_MIGRATIONS" ADD CONSTRAINT "PUBLIC"."PK_DATA_MIGRATIONS" PRIMARY KEY("ID");         
-- 13 +/- SELECT COUNT(*) FROM PUBLIC.DATA_MIGRATIONS;         
INSERT INTO "PUBLIC"."DATA_MIGRATIONS" VALUES
('add-users-to-default-permissions-groups', TIMESTAMP '2022-11-21 20:55:28.535'),
('add-admin-group-root-entry', TIMESTAMP '2022-11-21 20:55:28.562'),
('add-databases-to-magic-permissions-groups', TIMESTAMP '2022-11-21 20:55:28.569'),
('copy-site-url-setting-and-remove-trailing-slashes', TIMESTAMP '2022-11-21 20:55:28.577'),
('ensure-protocol-specified-in-site-url', TIMESTAMP '2022-11-21 20:55:28.584'),
('populate-card-database-id', TIMESTAMP '2022-11-21 20:55:28.592'),
('migrate-humanization-setting', TIMESTAMP '2022-11-21 20:55:28.597'),
('mark-category-fields-as-list', TIMESTAMP '2022-11-21 20:55:28.617'),
('add-legacy-sql-directive-to-bigquery-sql-cards', TIMESTAMP '2022-11-21 20:55:28.623'),
('clear-ldap-user-local-passwords', TIMESTAMP '2022-11-21 20:55:28.632'),
('add-migrated-collections', TIMESTAMP '2022-11-21 20:55:28.669'),
('migrate-click-through', TIMESTAMP '2022-11-21 20:55:28.686'),
('migrate-remove-admin-from-group-mapping-if-needed', TIMESTAMP '2022-11-22 12:42:42.735');       
CREATE INDEX "PUBLIC"."IDX_DATA_MIGRATIONS_ID" ON "PUBLIC"."DATA_MIGRATIONS"("ID" NULLS FIRST);
CREATE CACHED TABLE "PUBLIC"."COLLECTION_PERMISSION_GRAPH_REVISION" COMMENT 'Used to keep track of changes made to collections.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "BEFORE" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the collections graph before the changes.' NOT NULL,
    "AFTER" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the collections graph after the changes.' NOT NULL,
    "USER_ID" INTEGER COMMENT 'The ID of the admin who made this set of changes.' NOT NULL,
    "CREATED_AT" TIMESTAMP COMMENT 'The timestamp of when these changes were made.' NOT NULL,
    "REMARK" CHARACTER LARGE OBJECT COMMENT 'Optional remarks explaining why these changes were made.'
);        
ALTER TABLE "PUBLIC"."COLLECTION_PERMISSION_GRAPH_REVISION" ADD CONSTRAINT "PUBLIC"."PK_COLLECTION_REVISION" PRIMARY KEY("ID");
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.COLLECTION_PERMISSION_GRAPH_REVISION;     
CREATE CACHED TABLE "PUBLIC"."ACTIVITY"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 233 RESTART WITH 295) DEFAULT ON NULL NOT NULL,
    "TOPIC" CHARACTER VARYING(32) NOT NULL,
    "TIMESTAMP" TIMESTAMP NOT NULL,
    "USER_ID" INTEGER,
    "MODEL" CHARACTER VARYING(16),
    "MODEL_ID" INTEGER,
    "DATABASE_ID" INTEGER,
    "TABLE_ID" INTEGER,
    "CUSTOM_ID" CHARACTER VARYING(48),
    "DETAILS" CHARACTER LARGE OBJECT NOT NULL
);             
ALTER TABLE "PUBLIC"."ACTIVITY" ADD CONSTRAINT "PUBLIC"."PK_ACTIVITY" PRIMARY KEY("ID");       
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.ACTIVITY; 
INSERT INTO "PUBLIC"."ACTIVITY" VALUES
(1, 'install', TIMESTAMP '2022-11-21 20:55:29.303', NULL, 'install', NULL, NULL, NULL, NULL, '{}');     
CREATE INDEX "PUBLIC"."IDX_ACTIVITY_TIMESTAMP" ON "PUBLIC"."ACTIVITY"("TIMESTAMP" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_ACTIVITY_USER_ID" ON "PUBLIC"."ACTIVITY"("USER_ID" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_ACTIVITY_CUSTOM_ID" ON "PUBLIC"."ACTIVITY"("CUSTOM_ID" NULLS FIRST);
CREATE CACHED TABLE "PUBLIC"."LABEL"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "NAME" CHARACTER VARYING(254) NOT NULL,
    "SLUG" CHARACTER VARYING(254) NOT NULL,
    "ICON" CHARACTER VARYING(128)
);   
ALTER TABLE "PUBLIC"."LABEL" ADD CONSTRAINT "PUBLIC"."PK_LABEL" PRIMARY KEY("ID");             
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.LABEL;    
CREATE INDEX "PUBLIC"."IDX_LABEL_SLUG" ON "PUBLIC"."LABEL"("SLUG" NULLS FIRST);
CREATE CACHED TABLE "PUBLIC"."DEPENDENCY"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "MODEL" CHARACTER VARYING(32) NOT NULL,
    "MODEL_ID" INTEGER NOT NULL,
    "DEPENDENT_ON_MODEL" CHARACTER VARYING(32) NOT NULL,
    "DEPENDENT_ON_ID" INTEGER NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL
);      
ALTER TABLE "PUBLIC"."DEPENDENCY" ADD CONSTRAINT "PUBLIC"."PK_DEPENDENCY" PRIMARY KEY("ID");   
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.DEPENDENCY;               
CREATE INDEX "PUBLIC"."IDX_DEPENDENCY_MODEL" ON "PUBLIC"."DEPENDENCY"("MODEL" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_DEPENDENCY_MODEL_ID" ON "PUBLIC"."DEPENDENCY"("MODEL_ID" NULLS FIRST);              
CREATE INDEX "PUBLIC"."IDX_DEPENDENCY_DEPENDENT_ON_MODEL" ON "PUBLIC"."DEPENDENCY"("DEPENDENT_ON_MODEL" NULLS FIRST);          
CREATE INDEX "PUBLIC"."IDX_DEPENDENCY_DEPENDENT_ON_ID" ON "PUBLIC"."DEPENDENCY"("DEPENDENT_ON_ID" NULLS FIRST);
CREATE CACHED TABLE "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) DEFAULT ON NULL NOT NULL,
    "USER_ID" INTEGER NOT NULL,
    "GROUP_ID" INTEGER NOT NULL,
    "IS_GROUP_MANAGER" BOOLEAN DEFAULT 'false' COMMENT 'Boolean flag to indicate whether user is a group''s manager.' NOT NULL
);     
ALTER TABLE "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP" ADD CONSTRAINT "PUBLIC"."PK_PERMISSIONS_GROUP_MEMBERSHIP" PRIMARY KEY("ID");               
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.PERMISSIONS_GROUP_MEMBERSHIP;             
INSERT INTO "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP" VALUES
(1, 1, 1, FALSE),
(2, 1, 2, FALSE); 
CREATE INDEX "PUBLIC"."IDX_PERMISSIONS_GROUP_MEMBERSHIP_GROUP_ID" ON "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP"("GROUP_ID" NULLS FIRST);          
CREATE INDEX "PUBLIC"."IDX_PERMISSIONS_GROUP_MEMBERSHIP_USER_ID" ON "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP"("USER_ID" NULLS FIRST);            
CREATE INDEX "PUBLIC"."IDX_PERMISSIONS_GROUP_MEMBERSHIP_GROUP_ID_USER_ID" ON "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP"("GROUP_ID" NULLS FIRST, "USER_ID" NULLS FIRST);           
CREATE CACHED TABLE "PUBLIC"."DASHBOARD_FAVORITE" COMMENT 'Presence of a row here indicates a given User has favorited a given Dashboard.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "USER_ID" INTEGER COMMENT 'ID of the User who favorited the Dashboard.' NOT NULL,
    "DASHBOARD_ID" INTEGER COMMENT 'ID of the Dashboard favorited by the User.' NOT NULL
);        
ALTER TABLE "PUBLIC"."DASHBOARD_FAVORITE" ADD CONSTRAINT "PUBLIC"."PK_DASHBOARD_FAVORITE" PRIMARY KEY("ID");   
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.DASHBOARD_FAVORITE;       
CREATE INDEX "PUBLIC"."IDX_DASHBOARD_FAVORITE_USER_ID" ON "PUBLIC"."DASHBOARD_FAVORITE"("USER_ID" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_DASHBOARD_FAVORITE_DASHBOARD_ID" ON "PUBLIC"."DASHBOARD_FAVORITE"("DASHBOARD_ID" NULLS FIRST);      
CREATE CACHED TABLE "PUBLIC"."DIMENSION" COMMENT 'Stores references to alternate views of existing fields, such as remapping an integer to a description, like an enum'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "FIELD_ID" INTEGER COMMENT 'ID of the field this dimension row applies to' NOT NULL,
    "NAME" CHARACTER VARYING(254) COMMENT 'Short description used as the display name of this new column' NOT NULL,
    "TYPE" CHARACTER VARYING(254) COMMENT 'Either internal for a user defined remapping or external for a foreign key based remapping' NOT NULL,
    "HUMAN_READABLE_FIELD_ID" INTEGER COMMENT 'Only used with external type remappings. Indicates which field on the FK related table to use for display',
    "CREATED_AT" TIMESTAMP COMMENT 'The timestamp of when the dimension was created.' NOT NULL,
    "UPDATED_AT" TIMESTAMP COMMENT 'The timestamp of when these dimension was last updated.' NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);           
ALTER TABLE "PUBLIC"."DIMENSION" ADD CONSTRAINT "PUBLIC"."PK_DIMENSION" PRIMARY KEY("ID");     
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.DIMENSION;
CREATE INDEX "PUBLIC"."IDX_DIMENSION_FIELD_ID" ON "PUBLIC"."DIMENSION"("FIELD_ID" NULLS FIRST);
CREATE CACHED TABLE "PUBLIC"."QUERY" COMMENT 'Information (such as average execution time) for different queries that have been previously ran.'(
    "QUERY_HASH" BINARY VARYING(32) SELECTIVITY 100 COMMENT 'The hash of the query dictionary. (This is a 256-bit SHA3 hash of the query dict.)' NOT NULL,
    "AVERAGE_EXECUTION_TIME" INTEGER SELECTIVITY 46 COMMENT 'Average execution time for the query, round to nearest number of milliseconds. This is updated as a rolling average.' NOT NULL,
    "QUERY" CHARACTER LARGE OBJECT COMMENT 'The actual "query dictionary" for this query.'
);        
ALTER TABLE "PUBLIC"."QUERY" ADD CONSTRAINT "PUBLIC"."PK_QUERY" PRIMARY KEY("QUERY_HASH");     
-- 954 +/- SELECT COUNT(*) FROM PUBLIC.QUERY;  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5e6ba288a9d397756e642017a6a16b3a0da3e5a3408edc45564280c663e61c17', 196, '{"database":2,"query":{"source-table":8},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9ca912290e54faa0306ac23bb83857a9a5c04317722c9709cc15014b01823f75', 418, '{"database":2,"query":{"source-table":5},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4a1edd59efdd262561f7c849fb1647484b597908654a461a96f0a72cf1a2ca72', 115, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":7},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'38ce170487fdfcec8a33b73a0d52ce8d6dfa08cc7ba6c3a03adacf1478140d36', 302, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":5},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",44,null]]}],"async?":true,"cache-ttl":null}'),
(X'3b24f72327d8f0d4599fb56ec93156f7a8eb04f1046cac64cd9f9f6bf4d28e27', 133, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":7},"async?":true,"cache-ttl":null}'),
(X'103fe9e491bf5de3905337700fad9ae72e10c9f462e1b1b35534d4c9c2a57c5e', 67, '{"database":2,"query":{"source-table":7},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd5d84c82cc0f58917200efe8a24fa4292c2b6a3b8d42717119315735216290f1', 83, '{"type":"query","query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'efa0b81fefdbbc5b9fdab3f5fd6b2d316276e5435dccbc118ba70fb7c661f4c0', 33, '{"type":"native","native":{"query":"SELECT round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure\nFROM POSITION, BALANCE","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9a996d162aac2c8e544ea3d613f7831f886703fc1c296204e0d6dc0bdc0bf2ac', 23, '{"type":"query","query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'25550ae8b8beea3c95b943589423714408c19fa6c8b120478ed866094de75d52', 68, '{"type":"query","query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3a563462b91a3c9bfeca2aee92daafc67ca59fc40ebde3e4d38cbbadd61d6e0c', 23, '{"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a922165266abaea2948d6d9ad4628d3433ebf70fa2edc107bd3999d5b4f8c1e7', 89, '{"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b4dbf8eff50ceb70d2ac3620e5820d35350c643b97bec48ecb4dfb1896805fec', 52, '{"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'fd227e49d6b73045f56661b383a834964c63d0cf8c8f6ad3f3e96acd1b356396', 58, '{"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e492c5cb54e9639fd3dde3ae9af01f95e4f1165c64a7b9d82faf3333a3df16a9', 31, '{"type":"query","query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'75f34126623e5a9ab7830c3c5ecdf8242449ec5e35a6164946e272369c5cb9ad', 27, '{"type":"query","query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day",{}],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b965e17776cd908f79a6e346fb3befe18045b573b392bc15d1daa960d92367b8', 50, '{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"order-by":[["desc",["field",49,null]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'11bd5b6075c997be5823f3946ad80b8f49d5c36023424b41a7d53453737a1905', 66, '{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"order-by":[["desc",["field",49,null]]],"fields":[["field",49,{"temporal-unit":"default"}],["field",47,null]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8f4ea8c468d3c8472861f9885b4bdb8d9418e7def5c53323841cfa17d60c4fc3', 21, '{"type":"native","native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n\t\t\t\tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n\t\t\t\tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n\t\t\t\tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n\t\t\t\t(SELECT totalWalletBalance\n\t\t\t\t FROM DAILY_BALANCE db \n\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\torder by day desc) as Balance\nFROM \"INCOME\"\nWHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n  AND \"INCOME\".\"symbol\" IS NOT NULL\nGROUP BY date(\"INCOME\".\"time\", ''start of month'')\nORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0c3c34436c2957722adc92bed645d85cb3caa69db97a21220d45d67a8bc8fd4c', 311, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":5},"async?":true,"cache-ttl":null}'),
(X'9841de9b26bbda1bd89b66d4579ad7c55d745581041cfc45a8d84f9ec0cff85c', 26, '{"type":"native","native":{"query":"select *\n  from (select p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a2d10b24de0f1d876c558b5005c3be6c7a572a234e724247fc723cb27c39618d', 45, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",44,null]]}],"async?":true,"cache-ttl":null}'),
(X'9640c0b1dd9b832930c300a84e9475569c2fed87571369593e9dc88e646becc3', 141, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ef835630462e0f1d0823d6b70559f64b83fab15e7b7ab85d37c785cd4af8e197', 52, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'90d090582c95f67466233f2731d4ed36ae26c821b643ff840969a5f1e12880f6', 86, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c14ecd9dc13f0a7ced5b500b48dcf6657a3e7e8b7bae71d8108108e024c1e79b', 46, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a57dd459f54703b04133d55efdbd490d70494b8f75503afaa0c6bd22ca52277a', 143, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e5cb1bab4f777909f947d0c973a05a592284b1770a8797ed1d0024208de999af', 119, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'6790bf3705c1ab67ae6ac8fca14b91a38a77caa3f4d12eb6a9ffef0fb22150af', 63, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",44,null]]}],"async?":true,"cache-ttl":null}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'bcd04919a38472b191687ab36ef6336e853bdf70010aae29367faa78c00e15ae', 122, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",81,null]]}],"async?":true,"cache-ttl":null}'),
(X'317ec8633a9265ac8840fdd60f8aec83bc72a37c898f0904aedbe53146ba2d05', 140, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"order-by":[["desc",["field",49,null]]],"fields":[["field",49,{"temporal-unit":"default"}],["field",47,null]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'232461067bed46ac63d700622986c7c848435432e831946b19db3092782e96b1', 226, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'f927f7a069fca63f0644024f3e28f94f3c61a03f346d0bd3ee86471091eaa672', 183, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'cab27c0a267cba5266ad4035d39a2eba65f0f1b951eb4aa810e896d4ec5264ae', 130, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'2ceb45389700c24e6dd28654d34346aab274a8248e8b59a20085de8ac34401ed', 139, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'e6c9a094d4a97cbd4f2eae5e5a1987d80ca033814a180263f1f27e7b830455b6', 109, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'7314bb287a4e8e7d2b3b79e2be32ca7d5a9619b7e4a1ae6a6fef8844cd946ab0', 198, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'94d49e3233d493d4fab2c8dbbd5338b64b27f3b672aa018eed8f600e628711fa', 156, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'cc64ca2417807e15285c6f062342a0f447c2e1f11c726dfdb5d7b6deb536a701', 18, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'09d2aa9601e9b8589426c8bf105c8bff7a80b436cef9edbdf0003d072fe04891', 47, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e0f2cddb1c7678d4c1f9a7803b52724be99226a567152f31f970162525dd9ec8', 53, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'cc3a3341f4e5477adc15d2ba3e42ae0f3f4e61cc1f01d7d1d2d97029b204b6b7', 54, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f9bb53eeea3625e77bb9a39cefaa0fbcf8bb9b7ee03dcfc404df053849c30503', 166, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'2b633deaee3f6e69c47792ced48d5a43c7325b208f8f78f943605e97af17a564', 190, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"order-by":[["desc",["field",49,null]]],"fields":[["field",49,{"temporal-unit":"default"}],["field",47,null]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",50,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'44ac18082b0e565e3ccfc7eb4999a2a9504bcc392179d72e2ab9bd5c435fb17f', 33, '{"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]]},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3e308bb459925425658a4566792bcc4d9865a90662b1c339aba5595b8b6b12f3', 180, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"order-by":[["desc",["field",49,null]]],"fields":[["field",49,{"temporal-unit":"default"}],["field",47,null]]},"async?":true,"cache-ttl":null}'),
(X'fb2116721175672bc9088d54e5bb7fe4db279783ff614154515b23d6424a30f6', 43, '{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2a7673dfadfa91c51a63da34c9d81bcc63d915a55ddeec8d0dec2c07d57bce18', 43, '{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'92a85a466c39ab419f8bbf14bf0b3e5160214b273dae614df83498e492abbdc7', 264, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'fe45a85b4f26ebe2817344af6bbd5c725a6d01088c3f73a432b515267f41439b', 151, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'41de8db09f0cd77f8895206bac699ced0bd6b3f34ddf2eb03575e1b8530679fe', 47, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'bf4dc44a8a2ca2d0d61e6ddee9ce8098b1aa9f2d7c6012877a3066b32f24ecc4', 10, '{"type":"native","native":{"query":"SELECT round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure\nFROM POSITION p\nINNER JOIN BALANCE b\nON p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1304f91020f726a00aeaf0eea7af4ed5a17596523a056fc4c595db59206b3c1c', 10, '{"type":"native","native":{"query":"SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\nFROM POSITION p\nINNER JOIN BALANCE b\nON p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'049fba0692e4474e209b917be2dfa6594f6417f85592e4cfdcdf6646635f46e6', 3, '{"type":"native","native":{"query":"FROM POSITION p\n        INNER JOIN BALANCE b\n        ON p.account = b.account)","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3c75731a49920dd63bd7065047437fc14b88aa261cbcf06f70cfeaca06564d6f', 20, '{"type":"native","native":{"query":"SELECT AVG(e.Exposure)\nFROM (SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p\n        INNER JOIN BALANCE b\n        ON p.account = b.account) as e","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5cb03ef46961e351a66a8b81bfba56287a209a6a059271841cfe44f3662c7a93', 22, '{"type":"native","native":{"query":"SELECT MAX(e.Exposure)\nFROM (SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p\n        INNER JOIN BALANCE b\n        ON p.account = b.account) as e","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'00a5791d8de9356c408edc8b6fc24d4b9d6b15b967f42005d90d19da2693ff21', 23, '{"type":"native","native":{"query":"SELECT MIN(e.Exposure)\nFROM (SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p\n        INNER JOIN BALANCE b\n        ON p.account = b.account) as e","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'da97a088a967a5928161bfd40eb99f3d44eb8bce8065bab4e0d8b704012db027', 19, '{"type":"native","native":{"query":"SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p\n        INNER JOIN BALANCE b\n        ON p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'055c9ad167b323f394a7553c59ccb0ee621bcbf90deef3d83b7dd27bdc207e19', 9, '{"type":"native","native":{"query":"SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure, account\n        FROM POSITION p\n        INNER JOIN BALANCE b\n        ON p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'cddd5e02122f4cb009cb952bd1f53ea8ecd99ef2a7746379f2763a905ba2c34b', 3, '{"type":"native","native":{"query":"\n        INNER JOIN BALANCE b\n        ON p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'534c019555e3107137f5db88ff445b86b5446af1cce2463078b057f0081e64e8', 19, '{"type":"native","native":{"query":"SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure, p.account\n        FROM POSITION p\n        INNER JOIN BALANCE b\n        ON p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7924d1787356e04867835ac210d514e12a003b2acb21d361e520ddabab087102', 15, '{"type":"native","native":{"query":"SELECT * FROM BALANCE","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b8dad54dfae54310d3a20df98347e22388f767c63ee7e14bc96d8aab40c1283f', 488, '{"type":"native","native":{"query":"SELECT * FROM POSITION","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8709c2690549d19f64f766e3c75f4b15261b23dedef33cb12ed916a03c5540ea', 9, '{"type":"native","native":{"query":"SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure, account\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8d26cb659fbac499399ba685e130298e58f0efa06e05b8c5e96bfcad5e8d5267', 14, '{"type":"native","native":{"query":"SELECT round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure, b.account\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd93a61584c8233b3ad8c8c193fec1b4b5bdcea878cc76405c2560f7fa8947cd7', 19, '{"type":"native","native":{"query":"SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8433c1325fa0a56e2ad821bc0d3f8703032d3458e54ddc6485f94c366393e30a', 5, '{"type":"native","native":{"query":"SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        GROUP BY p.account\n        WHERE p.account = b.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'fedb7876d2dc2692b202652a99dcd40bd76dee2a618bce46c755b7b42b90e89b', 20, '{"type":"native","native":{"query":"SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\nFROM POSITION p, BALANCE b\nWHERE p.account = b.account\nGROUP BY p.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7d72da142f44fa1891a51100286db7d445d8fbdfbf929b7d2a7ec2b69fbace69', 28, '{"type":"native","native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        GROUP BY p.account) as e","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'853323134d389ec73f9ab94876c26249eb186ff4ace14cd23d20026037e1bd04', 57, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure\nFROM POSITION, BALANCE","template-tags":{}},"database":2,"async?":true,"cache-ttl":null}'),
(X'61f7c8b57961c1b4856296e9f132fb66cd9f9d31134467531b3db995a82b8212', 213, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd54ff7fffefba99f623da1e8d45fc4a881c564fda68bd36bd3143cf661b47a92', 30, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        GROUP BY p.account) as e","template-tags":{}},"database":2,"async?":true,"cache-ttl":null}'),
(X'557f3595dcba0d390e7804e256a2ebc79fe95449ff30fc82fc72805ad36f8994', 237, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{}},"database":2,"async?":true,"cache-ttl":null}'),
(X'5101642e660483339dc4d022ce719ce73a5dde1e2124bc44165b55fccf88909e', 172, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'33094ff68fed96a0d67e6b379c1f82b6d1d2a46db754432138f85ed55ebe8cf5', 286, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'81284abc5745cc58f0b4b13ca8faebbaa64968aac42046616829d929ad09f147', 91, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"but","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'2878ee21ff8aae9ce33902eced9cdaaf591478ad5c5b0546104fbe690abe2c4c', 93, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'2f34d2de7a2cdc1239d2da0615b960d03c9bd5c694da3c8a63f9f595d44d72d0', 102, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'cd8d1bd6046553332557d5dcdfdcb9f82849aafb88ebbf11f774c573c9e6e36c', 88, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",81,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'64bf480023b40265433f68b916317dd655d7515f9def604135155f1a92145f9e', 187, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"but","target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'01a27177466890fc5d30ed3f077266683b610d41c0c41876ce2890df2bbd6c3d', 55, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"but","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'efb76ac0402a64c034cff0d2c71433da71f9d1be75a17a253e7a11b3dcf57f8f', 290, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'f287b038f9f44c013b50bc29a4d5933fe2e5e64ee1b7b59d2849ba91be50948a', 104, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",50,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'd14cdbf7c98f3d379dd060c5ff8b26480d681bdcc0d9781b8066dd40ed4139dc', 163, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'4d8128a0834a5e555976700f41a86bb8fde9dbda7729ba518917b827c19a3cf3', 181, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'5d640d5e8034d0e56c28ac0484c8ce0bbb119181dd7ee7684c92b2b3af67b441', 133, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'fc0897829349381e320abb84add804fb07c1e8fb732a4125bbb1780a7eef0e8b', 116, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"but","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'8aad1cf45df3baa9791117572e4ebd0f9fa6e501312fb93fbb6716ebe822171e', 107, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'b1426e9cff1396a0a02c5311c2f972684cc6aa640fd2f7225a02cc1c9800a982', 72, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["buv"],"target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'190c8c99721a99af6bd4852b6418acc9334a2d811bd571a0e8807135e7d1aea2', 130, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'6b8f373b7a21c2d6f28c016b9fbcade2d2bb389d13d78f94980c41d278ea6c8b', 130, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'f661453bc18df25678ffcc75c8cf26bf6bc8f9caaeae3ace3f6f2cf5d8ef1856', 161, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",81,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'dd8b19bad2436622cbb64b09e1bd6dbb6052e5c6504fa1acf75ff2b73ea3ed2c', 166, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6fc5eb2dea848d3e1935e5033b24c11d05d71efc0415ed185344ece801c71e1d', 18, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["buv"],"target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'9bbcbe99493d779a61f70412eba9a0f30bc0fad9fbab09c3b3bf0ee6ff499877', 319, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'1206e3743952b7b0beb99f2367f396226a5895881603a6355e43ec86fe3a94d6', 144, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",50,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'27f27ab9a5c18d916a9ee05d6506a737b4e80171ef0d664b15b110aed54a1e7c', 137, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'25abe76264b29b8a3095f77db05dcf5d9f89f7468c79ae7cbc4fe780bce34aa5', 165, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'099de73dd4a5b2d2511709c475350067a8d48eab7e79f32744376ef0f33324b9', 345, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'880f74055861f7a223d772841fcb58d448e938d4b3505f38f30100fea09bebb1', 189, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["buv"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'f7f5adee97b8dc2e606a4642a684dde7be7710ff36edc7fd51e6abf158d80a12', 18, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["buv"],"target":["variable",["template-tag","Account"]],"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82"}],"async?":true,"cache-ttl":null}'),
(X'2a57c4a078ec29512edc3a2fd71381aad2e332f01baa5f26a00fc4da2f042c9f', 10, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["buv"],"target":["variable",["template-tag","Account"]],"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5602d0561575e76c7c4cd90b786416a217c4dbfaa5a50473046b7a9d67b16b61', 35, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c6c57c9931c2754c62bba1594a569cf1281927b5e344a6efb9d953daebcf0155', 120, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   AND \"INCOME\".\"account\" = \"buv\"\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f3101bec788e50d585a8ea2fc529ce6e5905d6763f637131dce6b3a4708a4000', 120, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   AND \"INCOME\".\"account\" = \"buv\"\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   AND \"INCOME\".\"account\" = \"buv\"\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'08eee98d668d8b7d89516cac733b7ee25e5832e78101635533319638aaddedce', 120, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = \"{{Account}}\"]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   AND \"INCOME\".\"account\" = \"buv\"\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b883cc686396ae1eb57595a317aa763c5751125b1a73b296967904a00089aaff', 11, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = \"{{Account}}\"]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   AND \"INCOME\".\"account\" = \"buv\"\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6a0fae40e0a515c3fa4b0343e28a4583bb51808e56539f7f6e99e00245dde4f7', 157, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   AND \"INCOME\".\"account\" = \"buv\"\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'21e40e7bdc65671ebf3a127b1612e66a9a4ff646b1b9781c60df3b650e8e20ea', 118, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3d7f56c9488620d721821be4e6a604e497f7ab62d3c18ec47641e8ad0cb6f18e', 228, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'3cdd80a508e8f5440502153043517913846dd0c5c90726e918682b93e5ba9734', 277, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'01fe6fa326ec31af25117f026ad89a98675f0feff132976e1fd61c0ad720d808', 58, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",81,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'745608843e0c6d2b3c2a0e809ef2c2061af2083f0b906fdeed8e637aba22443d', 78, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'7df95404d458a7ac98f2f2384375efe471561070a13f4d9bc10957d9f52623b4', 52, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restarr","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'8f2eefc7a088acd094b3b0c664386d2679bbc11a8091aa9d0e9a84d40a37d01e', 72, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'488ce22141c069995a0ce2098b408a022b4f66e71ca6156f5f6bd0c7dff55543', 199, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'10fd976a341bf4a0997abef43ada645ccfbb84802cd91b7a92cce7495cfb4e5f', 73, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",50,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'7882a3d82ef8300ecf56d6e703f01b8a6df03ac2cf52377f4d050d5148c6a5a7', 168, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'5e4ace9531c2a652836bccd07bfd9638534c781b5744c99447fb5bc63bf2badb', 332, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'cfffaa41dc4447abe8cbcdd48fdf1f5b479d7b68fc5b1d19ea70e6adc5dc327a', 168, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restarr","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'4a44e2213ae3594203e6046fc3d1dbcd78d0b1abb46a216a10390af38d6907cb', 187, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'0038bead2be4de2b88884c795c06be030421b30ddcaaa07fcbe12415f6681580', 172, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'402b5de1c68a94a422f4ac037375f7bafcb2463e007d813dbbc40e7d2bc36a9a', 222, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"restarr","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'1fbdd34c77266322aca91ebe1b3e0ee0c5f703b660bc219f4ab4097624eceb7a', 150, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restart","target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'453ee1bd1aab525a1db39d53c777f5af3de222789cbe797a4f74c21a41ffc802', 214, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restart","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'1e0e04f673edb876c3c476ff1934bb034e9f205851a366f4d89fd015a4ca6467', 225, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'193aae3d9475cfd41d937bdbbd5fdaa0c4de1a0e78feadbb1782ad29101f39d2', 9, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   AND \"DAILY_BALANCE\".\"account\" = i.account\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\" i\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'94ec4dc370853db7d2dc36d5638fedbdc3e80432c84820e926c4dfb6972b2569', 21, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\" i\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'55ab44913641cfc27879de01fa43bb438510cb8aa6ef6e9bc006e806faee486c', 123, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9acaf2a31e881156ebbe5660ff59f41497364776250b490e462376ae1322607a', 13, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   AND \"DAILY_BALANCE\".\"account\" = i.account\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\" i\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f02461319ff23fc6994d5479208de9fbbc6fc8f769dedb09919fe1667b8ca93c', 9, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   AND \"DAILY_BALANCE\".\"account\" = i.account\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\" AS i\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7ae9607c17d66dd1fb88aef3c4406698c20adb5c7950c3533226dc3e35a2e0a4', 122, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'72c2417342bc5cb32b433f4a31a6ffcd4deb8197f66f57ef3db2d80f51d0d571', 118, '{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n          SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n            FROM \"DAILY_BALANCE\"\r\n            WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n               AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n               AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n               [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n            ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n            LIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'fbf9c3bc82c36d6f993f01006e3f2e4c41953d65d0a7b3140afb7dc3414e717f', 75, '{"type":"native","native":{"query":"SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n          SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n            FROM \"DAILY_BALANCE\"\r\n            WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n               AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n               AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n               [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n            ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n            LIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f0e920bb1ede5aa8a54b730fd42f802d5830a4be66b0675840c95ed2890d7159', 134, '{"type":"native","native":{"query":"SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n          SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n            FROM \"DAILY_BALANCE\"\r\n            WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n               AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n               AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n               [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n            ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n            LIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'12e3cd988727136f2692c84d474e5d548fc0f56201425b2eff89fcf0d587331c', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", AVG(100*sum(\"INCOME\".\"income\") / (\r\n          SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n            FROM \"DAILY_BALANCE\"\r\n            WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n               AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n               AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n               [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n            ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n            LIMIT 1)) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'911dcde9c6efe2fec12516ede4d57a9ca09f8d251abe89b9c6a9d5ea7ea2d41e', 12, '{"type":"native","native":{"query":" ","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'976a0330989ed215ed168db5d9ca4620948ed0a8aa74b6aca61306a8ae5049cb', 146, '{"type":"native","native":{"query":"SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n          SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n            FROM \"DAILY_BALANCE\"\r\n            WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n               AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n               AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n               [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n            ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n            LIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd623411371ce094eb67d7244ac051344b89785e0b3206947ddfba8b6bd745fba', 133, '{"type":"native","native":{"query":"SELECT account, time, adg\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'dd8fea3fa812bebe9776eae52ead003c7ac3f6652550de135a1a7cb0a629babf', 133, '{"type":"native","native":{"query":"SELECT account, \r\n       time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ab7adea467318fd2b9525eeb1e39cf3ab47feff5d5b93bf786ac9b6539c68c79', 131, '{"type":"native","native":{"query":"SELECT account, \r\n       time, \r\n       adg\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'545df76c36f7c1a14c7662001d083ee391d76aac4329f35de434b4c83c7ba7c3', 142, '{"type":"native","native":{"query":"SELECT account, \r\n       time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY account, time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'85ddbcda03bf9d2995b5e2681977d1e1c37622881aee63d13d9c1abfed9b364f', 125, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"05f73420-986c-cf71-fe4c-c5bb801860b7"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a51188db4d362c48540793ea247684375ff127f88310ad52630c0ac59744b12c', 117, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restart","target":["variable",["template-tag","Account"]],"id":"05f73420-986c-cf71-fe4c-c5bb801860b7"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'294c7ce786758af7e8d01b5f645676d31ecb58b3f89aeca53eaaf96dde03a4cd', 137, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd68e36ef1737b4bf50477501bcbee0a15f4e721bde642a8d6457a85a7eb092cb', 279, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n\t\t\t\tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n\t\t\t\tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n\t\t\t\tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n\t\t\t\t(SELECT totalWalletBalance\n\t\t\t\t FROM DAILY_BALANCE db \n\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\torder by day desc) as Balance\nFROM \"INCOME\"\nWHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n  AND \"INCOME\".\"symbol\" IS NOT NULL\nGROUP BY date(\"INCOME\".\"time\", ''start of month'')\nORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2,"async?":true,"cache-ttl":null}'),
(X'7f8bf298a23b02b9b54780e3ba2efddc3063d728548563490675486ce7c48b65', 21, '{"type":"native","native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n\t\t\t\tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n\t\t\t\tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n\t\t\t\tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n\t\t\t\t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n\t\t\t\t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n\t\t\t\t(SELECT totalWalletBalance\n\t\t\t\t FROM DAILY_BALANCE db \n\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\torder by day desc) as Balance\nFROM \"INCOME\" AS i\nWHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n  AND \"INCOME\".\"symbol\" IS NOT NULL\nGROUP BY date(\"INCOME\".\"time\", ''start of month'')\nORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3ac4b7dc17b096fc82e96deb4498701fc8f89bc23f9715dc71acb035a2660ea7', 14, '{"type":"native","native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n\t\t\t\tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n\t\t\t\tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n\t\t\t\tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n\t\t\t\t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n\t\t\t\t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n\t\t\t\t(SELECT totalWalletBalance\n\t\t\t\t FROM DAILY_BALANCE db \n\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\torder by day desc) as Balance\nFROM \"INCOME\" i\nWHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n  AND \"INCOME\".\"symbol\" IS NOT NULL\nGROUP BY date(\"INCOME\".\"time\", ''start of month'')\nORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'64820f39db196e2a4b5878331a2ca3a16bdd4fdb3520b1670d9243a5915a9cf8', 182, '{"type":"native","native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n\t\t\t\tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n\t\t\t\tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n\t\t\t\tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n\t\t\t\t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n\t\t\t\t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n\t\t\t\t(SELECT totalWalletBalance\n\t\t\t\t FROM DAILY_BALANCE db \n\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\torder by day desc) as Balance\nFROM \"INCOME\"\nWHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n  AND \"INCOME\".\"symbol\" IS NOT NULL\nGROUP BY date(\"INCOME\".\"time\", ''start of month'')\nORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');             
INSERT INTO SYSTEM_LOB_STREAM VALUES(1, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constra', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(1, 1, 'ints?":true}}', NULL);             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'61c821ead36d617d670996eeef2b5ed88e32196ed160388a815d32a6f166e676', 176, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\nFROM POSITION, BALANCE\nGROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'939512a37747560ee84507b68ed35baaf2a8afa47e585dfe21b6255a6d3b757e', 11, SYSTEM_COMBINE_CLOB(1));          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ccff587e7cea54d777cab10aa81a2c80c5e87b7a3a9d751695365763c87591ae', 58, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ff92e44f1fc3850b9b3c7ebea2962f2916c832831218d62d3b821e06a75d8e07', 11, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO SYSTEM_LOB_STREAM VALUES(2, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice, POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice, POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(2, 1, '":true,"add-default-userland-constraints?":true}}', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(3, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice, BALANCE.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice, POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?"', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(3, 1, ':true,"add-default-userland-constraints?":true}}', NULL);          
INSERT INTO SYSTEM_LOB_STREAM VALUES(4, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.account = p.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice, POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(4, 1, 'to-string?":true,"add-default-userland-constraints?":true}}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(5, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, POSITION.entryPrice as entryPrice, POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":t', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(5, 1, 'rue}}', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(6, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","dis', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(6, 1, 'play-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);   
INSERT INTO SYSTEM_LOB_STREAM VALUES(7, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPe', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(7, 1, 'rcent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);        
INSERT INTO SYSTEM_LOB_STREAM VALUES(8, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(8, 1, '-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(9, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"d', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(9, 1, 'caPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);   
INSERT INTO SYSTEM_LOB_STREAM VALUES(10, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\n-- union\n-- select *\n--   from (select p.account,\n--     p.symbol,\n--     p.side,\n--     coalesce(o.nr_orders, 0) as order_count,\n--     p.quantity as \"Position size\",\n--     e.entryPrice as \"Entry Price\",\n--     e.entryPrice*p.quantity as \"Position value\",\n--     o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n--     tp_orders.tp_price as \"Next TP\", \n--     ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n--     e.Exposure\n--     [[, p.quantity as \"Position size\",\n--     pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n--     (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\n-- from position p\n-- left outer join (\n--                     select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n--                       from orders o\n--                       where o.side = ''SELL''\n--                       group by symbol, account\n--                  ) as o\n--                  on p.symbol = o.symbol and p.account = o.account\n-- left outer join (\n--                     select symbol, min(tp_o.price) as tp_price, account\n--                       from orders tp_o\n--                       where tp_o.side = ''BUY''\n--                       group by symbol, account\n--                  ) as tp_orders\n--                  on p.symbol = tp_orders.symbol and p.account = tp_orders.account\n-- left outer join price pr on p.symbol = pr.symbol and pr.account = p.account\n-- left outer join (SELECT DISTINCT POSITION.symbol, \n--                         round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n--                         POSITION.entryPrice as entryPrice, \n--                         POSITION.account as account\n--                   FROM POSITION, BALANCE\n--                   WHERE POSITION.account = BALANCE.account\n--               GROUP BY POSITION.symbol) as e\n-- on p.symbol = e.symbol and p.account = e.acc', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(10, 1, 'ount\n-- where p.quantity != 0\n--   and p.side = ''SHORT''\n--   )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL); 
INSERT INTO SYSTEM_LOB_STREAM VALUES(11, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\n-- union\n-- select *\n--   from (select p.account,\n--     p.symbol,\n--     p.side,\n--     coalesce(o.nr_orders, 0) as order_count,\n--     p.quantity as \"Position size\",\n--     e.entryPrice as \"Entry Price\",\n--     e.entryPrice*p.quantity as \"Position value\",\n--     o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n--     tp_orders.tp_price as \"Next TP\", \n--     ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n--     e.Exposure\n--     [[, p.quantity as \"Position size\",\n--     pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n--     (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\n-- from position p\n-- left outer join (\n--                     select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n--                       from orders o\n--                       where o.side = ''SELL''\n--                       group by symbol, account\n--                  ) as o\n--                  on p.symbol = o.symbol and p.account = o.account\n-- left outer join (\n--                     select symbol, min(tp_o.price) as tp_price, account\n--                       from orders tp_o\n--                       where tp_o.side = ''BUY''\n--                       group by symbol, account\n--                  ) as tp_orders\n--                  on p.symbol = tp_orders.symbol and p.account = tp_orders.account\n-- left outer join price pr on p.symbol = pr.symbol and pr.account = p.account\n-- left outer join (SELECT DISTINCT POSITION.symbol, \n--                         round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n--                         POSITION.entryPrice as entryPrice, \n--                         POSITION.account as account\n--                   FROM POSITION, BALANCE\n--                   WHERE POSITION.account = BALANCE.account\n--               GROUP BY POSITION.symbol) as e\n-- on p.symbol = e.symbol and', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(11, 1, ' p.account = e.account\n-- where p.quantity != 0\n--   and p.side = ''SHORT''\n--   )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(12, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(12, 1, 'count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(13, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  [[WHERE account = {{Acco', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(13, 1, 'unt}}]]\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"486042a0-fe4a-a6e9-c86b-623a00c84ab2","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(14, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  [[WHERE account = {{Acco', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(14, 1, 'unt}}]]\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"486042a0-fe4a-a6e9-c86b-623a00c84ab2","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"486042a0-fe4a-a6e9-c86b-623a00c84ab2"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(15, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(15, 1, '\n  [[and account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(16, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(16, 1, '\n  [[and account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(17, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHOR', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(17, 1, 'T''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);           
INSERT INTO SYSTEM_LOB_STREAM VALUES(18, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP B', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(18, 1, 'Y POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["dimension",["field",44,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}', NULL);        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'2dd1f3704cfbfbe31b5a8f288cc443cc9e5bc0ea0e668f22f1a42e5f6ee09839', 42, SYSTEM_COMBINE_CLOB(2)),
(X'5975f28b673a93eb128c392ec51f682bbd5903ac6f4cd571aaa2b6d316f3662d', 48, SYSTEM_COMBINE_CLOB(3)),
(X'1dc0478345d9a85f339801ac3366bc869f49db624ae943aa8ad6a0451fe3a148', 12, SYSTEM_COMBINE_CLOB(4)),
(X'141e1be3bc48a83dedc8f7e75c0c4696131a5282a859b5d95a43b575f2207cc3', 37, SYSTEM_COMBINE_CLOB(5)),
(X'd852a28a68c7515e7fa172f96111d46d255223c3ef415a79651bb7582b2b8f81', 37, SYSTEM_COMBINE_CLOB(6)),
(X'31aa39321d1ec6c4b8f27410df49943e712cd6cf5c9ae7b1960135c2c8f41661', 51, SYSTEM_COMBINE_CLOB(7)),
(X'8eb7ab99fac1c10bab78827252070b2ec90df491e06b5de883bae8f6086a9d73', 36, SYSTEM_COMBINE_CLOB(8)),
(X'06b28d6f5c45be3baedd37d8a149d9f3cc1c270ddf6838d9afeb48d99f5e2ae1', 29, SYSTEM_COMBINE_CLOB(9)),
(X'7280db06849d852eb651cbb347261d33b5ffece823ad8c4b26749196f9ccf01f', 35, SYSTEM_COMBINE_CLOB(10)),
(X'70147bb3aa21e2b9d446ffea51f7381e937934c96a43f5d98041ba46a0eefb14', 81, '{"type":"native","native":{"query":"SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'efe6694166bf26fcaddaa2533d8afc708d7e63a5bd7a893995d9e3884611ceb2', 45, SYSTEM_COMBINE_CLOB(11)),
(X'9410f1c2fca22e2dd13f9ea4673a3b2f79dd0b44ecf7476a7fd41d6c8b3a5529', 27, SYSTEM_COMBINE_CLOB(12)),
(X'0950a85600d69ec4d02b48955c95b25386e97d890ba079f8ffae0873d1c28d5b', 44, SYSTEM_COMBINE_CLOB(13)),
(X'ac03fc101a71967696d86783e61792cce6fd3cc50aceb48a889060d9b53890e5', 41, SYSTEM_COMBINE_CLOB(14)),
(X'c3686d4057fc8243cb98ce940e95d5530302ec43f662b29d5badeb6faf63ded0', 33, SYSTEM_COMBINE_CLOB(15)),
(X'8eb435ba7a612595fe207deb89d268147ee89f21a3a991fd438c493ef93cd1cd', 10, SYSTEM_COMBINE_CLOB(16)),
(X'ba448575f06c2a578b5bce802d47636b4eb5c0ec2d8621420312acdb182de393', 44, SYSTEM_COMBINE_CLOB(17)),
(X'ff352db8d532211f0b7d1d9a15242223b75cd0eb11d264a4684084770f98097b', 112, SYSTEM_COMBINE_CLOB(18)),
(X'5fe5152c7121db088a8662d2ad950ea9108ec439fa07fc5990edd0ac98577ab5', 89, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'14f87da703e2cd17bc83ae46d0bd4c979a15ee41b2508995df1d2cb5220be2c5', 101, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'db696abaa45230329fff85662e8c980c48a97e6ba46b7946953135ca5f80bc5e', 101, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'ad2f02e5e1318857b6ef5a325cab8090455471f6ec3b960722d74a646fcee0f4', 108, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",81,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');        
INSERT INTO SYSTEM_LOB_STREAM VALUES(19, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP B', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(19, 1, 'Y POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}', NULL);
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'3afd9b047c7e0a1530462226cb603d83405e45d3ce9da281710db5f58a49792f', 121, SYSTEM_COMBINE_CLOB(19)),
(X'40b503a54840c59b261aecda836d05798b8146f44a9efddd8b6fdb62a16448cb', 277, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'eec91235714e93217ee8b97cafb965bdc94572b82a9eeb8acf419b6b8bb68243', 94, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",50,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'4787491ec79bc5cf0a82a4752848d2e2efd04b3571795d08e6074b48069c8edb', 228, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'c0d2a7d6414f499dcd174c26ed3be689aafdbbae8e90884b40e9a2d5f532d33f', 155, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'40325f4eed39faa4078037e99f79a4dffd19c66a38dc87ea506f3c9fb7d3db3f', 187, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'e71d66da6608cfa3eb6b4edac974944226d6c2d5af38e0d55ceeffc3b1278c21', 174, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"buv","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'720ff7a78cf6c1525687ffab3001d398504b7b0848790b2aa13f34fc0a836961', 155, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"buv","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'5fb01efcb43d930c365a25efc30739d0f9d0233ac49c25e6dec9912a93665b9b', 344, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2,"async?":true,"cache-ttl":null}'),
(X'1619a63f86b38ce56a44ebab63a53e3fdd3b49aff212dc1f7691e301db29e36f', 175, '{"type":"native","native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b738c8ce2b24a739263066b134734d6b849c4515e99b1d1424f011dbb607ceaa', 210, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'459c6c34ff6961d93538390c9f0467e67f8e901cd461b2b9b7c02faf970ee9b6', 158, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"restart","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'80eb98cf9c1395a95c94d4b56961c4affd54aa162dd1095369e23fb97af9bdab', 177, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["variable",["template-tag","Account"]],"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09"}],"async?":true,"cache-ttl":null}'),
(X'b279346ea8704b521dd9b029521b6238f9135852d95634d379326f71769b3583', 17, '{"database":2,"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  abd db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"type":"native","parameters":[{"type":"category","value":["restart"],"target":["variable",["template-tag","Account"]],"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c3c561c6fde41e9b7962c40b31f1d3f7f28cef82f7b11ca8eaf7754ae84d1513', 160, '{"database":2,"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"type":"native","parameters":[{"type":"category","value":["restart"],"target":["variable",["template-tag","Account"]],"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09"}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e1824a40a6697328dc33c8ef7b623475f55fde9309e943bfe14618f062c5bdb5', 76, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'12dd1104959919d2fb543754465dba28dd112a4ca557a3da40e272cda726be66', 74, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restart","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'130f601d5ca23866fadf56f5c0169ca5c59de68fe67c0be6c001b494b7603767', 96, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",81,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'3a78a570d8874370893c520c9908d4ba2a79ddd8dfdfc33464fd9531c2789942', 101, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'f37ddfe4822e2f2f9e8c90bdf7d5398e97327bc58f457b7a9e836b7832de24f4', 319, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');       
INSERT INTO SYSTEM_LOB_STREAM VALUES(20, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP B', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(20, 1, 'Y POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restart","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}', NULL);            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'4b3e64a31766caeee152ac4e81fcd99a7053618b175b767d4380ce42fe26cf65', 219, SYSTEM_COMBINE_CLOB(20)),
(X'30b2204c07a9692894e9ba6a37d3019f4dd98c85aad434a37cdc68a11ca6ca47', 113, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",50,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'3462efd6b6f290dd890aaed5276c0728bf19cedc4c58324fd671ac76d8d7e05c', 211, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"restart","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'911b1ece80ca2f9307b6b669147075cc9cc2fe343d4b9c14c45f7b10fca3343e', 293, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'29bc4c30152a94e6cde48d9c443669f68cdf7ba91d908f0c93c8cce45f3d6bd2', 226, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'14897928322c4bf9fb4fd5553a5ace093682258859b2bbcfd574626a69b45291', 165, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c6a23a0772f6493d54268bbf4f5615bc41c2307f69e053c35d24a6d505a77e20', 225, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"restart","target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'1e8098d56c2eb6e45eb48951de8fd6bf40009c80c3db1a2fcc3bca2135f6d6bc', 273, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"restart","target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'3d70816935c520b329ad44af1cae3358f238661ae3906d3aaecd80b977a66f6b', 99, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'9ff2286a659cb2ae183abcd016556877ecd2845b8fd29bd50350fff3e5842e18', 101, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'd495ccfad1a7cd277e6a7627830ac64dba9d71a4b700a13dc2663c1967972ba7', 140, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",54,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'890016e441038b845057bd2e1a1dbce78cc4a650fad114850abb5c8fc29c95da', 136, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",81,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}');       
INSERT INTO SYSTEM_LOB_STREAM VALUES(21, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP B', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(21, 1, 'Y POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}', NULL);          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5bc3c1bafcad69e18da8e4faed4dbaa5bd132d506f4cc40861fc6aec6beb4008', 340, SYSTEM_COMBINE_CLOB(21)),
(X'409c3a7dff2f267eab4b13287dbf8de82656a24adce648c9db5e5324772253d5', 119, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",50,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'b271c096b99d91c8adfa86778dfa4b003b4ac11efe8a9b3a49a23aaa5dbe1233', 301, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'215800e7f2216530796e84bf1810e2396439f76745415a11c57cfd83e2c65ee4', 153, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'718a237418eef5e658aeb54c81d59881585a1f6b85cb60475e18d5a7f48e7105', 182, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'82181f8344d12ce205734aaacd9e4d23f9a4a4720ae9baff7924b90c46f4ed1b', 339, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'); 
INSERT INTO SYSTEM_LOB_STREAM VALUES(22, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP B', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(22, 1, 'Y POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(23, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    absolute(p.quantity as \"Position size\"),\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.si', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(23, 1, 'de = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(24, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity as \"Position size\"),\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(24, 1, '''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);   
INSERT INTO SYSTEM_LOB_STREAM VALUES(25, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHOR', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(25, 1, 'T''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5fd3a15b664faf856d758ab337338bf3ce7dff71e64e0bebd3771ab6e2063ca5', 315, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'6de836d0d68bf50c83b6a08558fe4701ba825a7a81fdf96ead8d4fbdd727021c', 180, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["restart"],"target":["dimension",["field",114,null]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'57a93d36e2b4db52855012b9b0165ec4b7f1506615ecbfa5e49e7df315655117', 231, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":["restart"],"target":["variable",["template-tag","Account"]],"id":"26dff5a5"}],"async?":true,"cache-ttl":null}'),
(X'711223436593ac3678192722b6b47771e22d6a0a542ac618ec164dd8f7f97477', 567, SYSTEM_COMBINE_CLOB(22)),
(X'f7ce0db6b6411ef915ea9c8e3756307e7806b237f667e51341fc04430b557a4a', 13, SYSTEM_COMBINE_CLOB(23)),
(X'a781e2d1cb7f24cb9c10eb66bfbdb4dabcf2e1dfce64dac2e76bda7e9d2329ba', 38, SYSTEM_COMBINE_CLOB(24)),
(X'72a9030e2e887acacf3d220dde599da45fc7ef925f921dc009e050aef826e793', 36, SYSTEM_COMBINE_CLOB(25)),
(X'ba2db19f6754d8342c24e07409f7e2cd29d7b6424a3db89f66582e7635c46704', 45, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6389578710ff9796830b19d8be50447bffafca30a6cf726b18a6dbc3b3e50ceb', 23, '{"type":"native","native":{"query":"select abs(quantity)\n  from position p\n  where p.quantity != 0\n     and p.symbol = ''XRPBUSD''\n\t and p.side = ''SHORT''","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4c3d4f8557139924a67bc05354316a10c4633422b464f3c84b589fae58ec718d', 52, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1ac08c01771a4b3fd72a35f1d147afe0ce6ebc908f7f948f2f3bcb67176ec7bb', 50, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');
INSERT INTO SYSTEM_LOB_STREAM VALUES(26, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(26, 1, '''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);   
INSERT INTO SYSTEM_LOB_STREAM VALUES(27, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.si', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(27, 1, 'de = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(28, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(28, 1, ' p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(29, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.a', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(29, 1, 'ccount = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(30, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSIT', NULL);           
INSERT INTO SYSTEM_LOB_STREAM VALUES(30, 1, 'ION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);        
INSERT INTO SYSTEM_LOB_STREAM VALUES(31, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSIT', NULL);           
INSERT INTO SYSTEM_LOB_STREAM VALUES(31, 1, 'ION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);        
INSERT INTO SYSTEM_LOB_STREAM VALUES(32, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITI', NULL);       
INSERT INTO SYSTEM_LOB_STREAM VALUES(32, 1, 'ON, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(33, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.a', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(33, 1, 'ccount as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(34, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.side != ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(34, 1, '.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(35, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        P', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(35, 1, 'OSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);      
INSERT INTO SYSTEM_LOB_STREAM VALUES(36, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPri', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(36, 1, 'ce)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(37, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice as \"Entry Price\"),\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                  ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(37, 1, '      POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(38, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                  ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(38, 1, '      POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(39, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 5) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n               ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(39, 1, '         POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(40, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n               ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(40, 1, '         POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(41, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 5) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n     ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(41, 1, '                   POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(42, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 5) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 5) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n     ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(42, 1, '                   POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(43, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n     ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(43, 1, '                   POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(44, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantit', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(44, 1, 'y)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(45, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\",\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\n-- union\n-- select *\n--   from (select p.account,\n--     p.symbol,\n--     p.side,\n--     coalesce(o.nr_orders, 0) as order_count,\n--     abs(p.quantity) as \"Position size\",\n--     round(e.entryPrice, 4) as \"Entry Price\",\n--     e.entryPrice*abs(p.quantity) as \"Position value\",\n--     o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n--     tp_orders.tp_price as \"Next TP\", \n--     ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n--     e.Exposure\n--     [[, p.quantity as \"Position size\",\n--     pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n--     (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\n-- from position p\n-- left outer join (\n--                     select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n--                       from orders o\n--                       where o.side = ''SELL''\n--                         and o.position_side = ''SHORT''\n--                       group by symbol, account\n--                  ) as o\n--                  on p.symbol = o.symbol and p.account = o.account\n-- left outer join (\n--                     select symbol, max(tp_o.price) as tp_price, account\n--                       from orders tp_o\n--                       where tp_o.side = ''BUY''\n--                         and tp_o.position_side = ''SHORT''\n--                       group by symbol, account\n--                  ) as tp_orders\n--                  on p.symbol = tp_orders.symbol and p.account = tp_orders.account\n-- left outer join price pr on p.symbol = pr.symbol and pr.account = p.account\n-- left outer join (SELECT DISTINCT POSITION.symbol, \n--                         r', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(45, 1, 'ound(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n--                         POSITION.entryPrice as entryPrice, \n--                         POSITION.account as account\n--                   FROM POSITION, BALANCE\n--                   WHERE POSITION.account = BALANCE.account\n--                     AND POSITION.side = ''SHORT''\n--               GROUP BY POSITION.symbol, POSITION.account) as e\n-- on p.symbol = e.symbol and p.account = e.account\n-- where p.quantity != 0\n--   and p.side = ''SHORT''\n--   [[and p.account = {{Account}}]]\n--   )\n--   order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);        
INSERT INTO SYSTEM_LOB_STREAM VALUES(46, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\n-- union\n-- select *\n--   from (select p.account,\n--     p.symbol,\n--     p.side,\n--     coalesce(o.nr_orders, 0) as order_count,\n--     abs(p.quantity) as \"Position size\",\n--     round(e.entryPrice, 4) as \"Entry Price\",\n--     e.entryPrice*abs(p.quantity) as \"Position value\",\n--     o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n--     tp_orders.tp_price as \"Next TP\", \n--     ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n--     e.Exposure\n--     [[, p.quantity as \"Position size\",\n--     pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n--     (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\n-- from position p\n-- left outer join (\n--                     select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n--                       from orders o\n--                       where o.side = ''SELL''\n--                         and o.position_side = ''SHORT''\n--                       group by symbol, account\n--                  ) as o\n--                  on p.symbol = o.symbol and p.account = o.account\n-- left outer join (\n--                     select symbol, max(tp_o.price) as tp_price, account\n--                       from orders tp_o\n--                       where tp_o.side = ''BUY''\n--                         and tp_o.position_side = ''SHORT''\n--                       group by symbol, account\n--                  ) as tp_orders\n--                  on p.symbol = tp_orders.symbol and p.account = tp_orders.account\n-- left outer join price pr on p.symbol = pr.symbol and pr.account = p.account\n-- left outer join (SELECT DISTINCT POSITION.symbol, \n--                         round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BAL', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(46, 1, 'ANCE.totalWalletBalance),3) as Exposure, \n--                         POSITION.entryPrice as entryPrice, \n--                         POSITION.account as account\n--                   FROM POSITION, BALANCE\n--                   WHERE POSITION.account = BALANCE.account\n--                     AND POSITION.side = ''SHORT''\n--               GROUP BY POSITION.symbol, POSITION.account) as e\n-- on p.symbol = e.symbol and p.account = e.account\n-- where p.quantity != 0\n--   and p.side = ''SHORT''\n--   [[and p.account = {{Account}}]]\n--   )\n--   order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL); 
INSERT INTO SYSTEM_LOB_STREAM VALUES(47, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\",\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (e.entryPrice - pr.price) as \"UPNL\",\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPri', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(47, 1, 'ce)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(48, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (e.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(48, 1, ')/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(49, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(49, 1, ')/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(50, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - p.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(50, 1, ')/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5b59a34c6f4275c6642eeb995667e97f71ea426ca829de6415a67fa8861f4a45', 46, SYSTEM_COMBINE_CLOB(26)),
(X'08decb4486fc4dea5fe378500d3874365057415e4101d66990ff2d4811c3e0c2', 54, SYSTEM_COMBINE_CLOB(27)),
(X'd3e101b16f14900b21da10f253fd61b21c883de46074ab34dadb9c91246b8517', 39, SYSTEM_COMBINE_CLOB(28)),
(X'a74d3139adb85f61c9e21f26be5565c828de63296de6d3537225ba53540d8774', 41, SYSTEM_COMBINE_CLOB(29)),
(X'7f2c6ba402c34307187e060fe77f0ebaca81be6dc65b28a9f3cbfd7153cd451b', 44, SYSTEM_COMBINE_CLOB(30)),
(X'53066cefe8040eacec6e218426d585b842d598bd60255b881e4e6b464ee838cf', 59, SYSTEM_COMBINE_CLOB(31)),
(X'd988c022618adb518e56cb4df83f8037f954925a193cacc26ca7516455fa9f79', 44, SYSTEM_COMBINE_CLOB(32)),
(X'1ada9fab15f4c7f78e320fcbe5fe2044632a1db2b464c532d59077f727de3eba', 44, SYSTEM_COMBINE_CLOB(33)),
(X'04153331531b9c284fe05b23cf492df86e3d1abdae8efa62d2889f517173b1c0', 36, SYSTEM_COMBINE_CLOB(34)),
(X'16782454a4be7289415182967cc1b395ffaa69be412e2dde1858d0e3d5d80167', 47, SYSTEM_COMBINE_CLOB(35)),
(X'8c1f3b41f4b7c3eea2990502399162d4bf2e128e738c5c35ba7d91d5eb04a192', 717, SYSTEM_COMBINE_CLOB(36)),
(X'70b9536c44d9a0f42cb8c4fdeff5a16e59eb570a14253c5805422368bc0e35f3', 23, SYSTEM_COMBINE_CLOB(37)),
(X'b34f48d8c3517743e894a0f1deec76de26970a6e2f7902e655fbc61531614fd4', 86, SYSTEM_COMBINE_CLOB(38)),
(X'3c1cb0af675546347eb2135fc68891efe08c8f3a7c9bdb9dd25ad9e6e0efddc4', 49, SYSTEM_COMBINE_CLOB(39)),
(X'88f2127a688eaccf79026b6de1cc080f32db4206d565ce00f8c099aec001fa10', 52, SYSTEM_COMBINE_CLOB(40)),
(X'574ff0534ca7fe762fc3c20eb7cb3dac363298d5e2095d3836d16ca2a28117f6', 51, SYSTEM_COMBINE_CLOB(41)),
(X'dac8f31b329bf2b4bd2053a9b97b8d1c3759a629d6a382e8edade4a478b1dd23', 56, SYSTEM_COMBINE_CLOB(42)),
(X'03b2d607a98bb3c3762f243eb606897588760748584ce3e1cf82f83ae52fcc81', 64, SYSTEM_COMBINE_CLOB(43)),
(X'e64e0c373d50b686624c6565804e62bb615170aefb0f4cc58c974dd3842f3202', 618, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'6b3120c45d18fbe72dad62f3373662f50381728bae69a1c1527216493a57b80f', 27, '{"type":"native","native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'48500594f59a90ca1668cab88b0d49e458e75aa9f3df6d7c902654493943379f', 410, SYSTEM_COMBINE_CLOB(44)),
(X'2a5c9f42972c9f57d6e4da2a5ee444093eaf421afc90567b089325f236c7a83a', 18, SYSTEM_COMBINE_CLOB(45)),
(X'45226c50654629b99630614e4c9dd29267167fa58ab1069a54abd24a17615409', 13, SYSTEM_COMBINE_CLOB(46)),
(X'47781cae3123cfdfbb99a2be77afe71e1faf5da3c26b6f4b947feab2d2eec329', 12, SYSTEM_COMBINE_CLOB(47)),
(X'54570763d58edbbbcabd557d1a20153c7b7e4e1c17782c810ac61b97970a2dcc', 54, SYSTEM_COMBINE_CLOB(48)),
(X'f9ef0027c0d995909a3db5d7da226e83075ee7aa5b108ec5bfa7223dedbb4e23', 59, SYSTEM_COMBINE_CLOB(49)),
(X'3e4cfb8ddbd63777b5364f61d4744ebd2db09761fefc3abd87d47415ea8722fc', 34, SYSTEM_COMBINE_CLOB(50)),
(X'88a6d19e5c10dd0b35e900555e841d445eaaf29f0f5e446e19058d913ffbde17', 5, '{"type":"native","native":{"query":"select *\n--   from (select p.account,\n--     p.symbol,\n--     p.side,\n--     coalesce(o.nr_orders, 0) as order_count,\n--     p.quantity as \"Position size\",\n--     round(e.entryPrice, 4) as \"Entry Price\",\n--     e.entryPrice*p.quantity as \"Position value\",\n--     o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n--     tp_orders.tp_price as \"Next TP\", \n--     ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n--     e.Exposure,\n--     p.quantity * (e.entryPrice - pr.price) as \"UPNL\"\n--     [[, p.quantity as \"Position size\",\n--     pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n--     (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\n-- from position p\n-- left outer join (\n--                     select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n--                       from orders o\n--                       where o.side = ''BUY''\n--                         and o.position_side = ''LONG''\n--                       group by symbol, account\n--                  ) as o\n--                  on p.symbol = o.symbol and p.account = o.account\n-- left outer join (\n--                     select symbol, min(tp_o.price) as tp_price, account\n--                       from orders tp_o\n--                       where tp_o.side = ''SELL''\n--                         and tp_o.position_side = ''LONG''\n--                       group by symbol, account\n--                  ) as tp_orders\n--                  on p.symbol = tp_orders.symbol and p.account = tp_orders.account\n-- left outer join price pr on p.symbol = pr.symbol and pr.account = p.account\n-- left outer join (SELECT DISTINCT POSITION.symbol, \n--                         round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n--                         POSITION.entryPrice as entryPrice,\n--                         POSITION.account\n--                   FROM POSITION, BALANCE\n--                   WHERE POSITION.account = BALANCE.account\n--                     AND POSITION.side = ''LONG''\n--               GROUP BY POSITION.symbol, POSITION.account) as e\n-- on p.symbol = e.symbol and p.account = e.account\n-- where p.quantity != 0\n--   and p.side = ''LONG''\n--   [[and p.account = {{Account}}]]\n--   )\n-- union","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');     
INSERT INTO SYSTEM_LOB_STREAM VALUES(51, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (e.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - p.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(51, 1, ')/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(52, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (e.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(52, 1, ')/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(53, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entry', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(53, 1, 'Price)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);           
INSERT INTO SYSTEM_LOB_STREAM VALUES(54, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(54, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'33c1faf32831a20ac1e0340fa27f3facaa06f0d3833c26d899ad9cb8861895f7', 49, SYSTEM_COMBINE_CLOB(51)),
(X'be4891f24dd5ffb3cbfc272076de417187ec436b78cca526ff08481ad54afc4a', 44, SYSTEM_COMBINE_CLOB(52)),
(X'cb8d9c1f842ef9d8573beeb1fb980b5c6014a2396d1b9de3df89c9ef89c58256', 41, SYSTEM_COMBINE_CLOB(53)),
(X'ff2d2249d645c3cb737ec480d25f7f87f5a7b82136f4fa0d70092f4e3894c478', 619, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'a1a22b6849abef83d54df2b3b3f41d16afebc971e22f62b602a27dbab5179687', 577, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"async?":true,"cache-ttl":null}'),
(X'85f6b23231f5cfc470667b1842c67eda2685ed066cd8cb16b09879729591756f', 758, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"async?":true,"cache-ttl":null}'),
(X'981a4018db48e926797a2daf0ae3de65fee80b4ac234ecdeffbc8c69e5c8b44a', 54, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"async?":true,"cache-ttl":null}'),
(X'3332482b8b12cc7573ed92e40523c781718cd8574f675b67f631545b826675be', 204, SYSTEM_COMBINE_CLOB(54)),
(X'd2d04cbe21e384bebaa3b81a574ea6f2de7ffa3f953960c9eea51150ed2e3908', 1320, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"async?":true,"cache-ttl":null}'),
(X'b61d1b1231e5493e17f15010cea570607971ae45a0a360040642f06da1cbca7b', 597, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"async?":true,"cache-ttl":null}'),
(X'c3ce5209515291a7ebc6ae450f528d14a1a64c3e23e2ff486cbb69077d3225f5', 225, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"async?":true,"cache-ttl":null}'),
(X'a7ecb5159d6a8ea492b05492a2cb33e842950415718bb6942d1491a6263bbd2a', 1103, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b8d9e361706f18d8c637d45eee543fdc11d0cfb630296705ec86fffc4eb0e03e', 1161, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'9d349a0b215c919bc629a47026de2a0894ecbb06903a89a0fb6c7ce6a1af786b', 1251, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"async?":true,"cache-ttl":null}'),
(X'b598b79939ace60758c42db944c7a1bdac69dea3cfe3d72051113e5f8f84af02', 1280, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"async?":true,"cache-ttl":null}'),
(X'3d1b003a7b10770b649257aa9bf9f247f80a83ac95d43bc502caaa80b0ecefa2', 700, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"async?":true,"cache-ttl":null}');            
INSERT INTO SYSTEM_LOB_STREAM VALUES(55, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entry', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(55, 1, 'Price)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(56, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(56, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'3120584d1af3423120f3a1182d34250119651241e50eb7e0a9c8299c9a81b67a', 50, SYSTEM_COMBINE_CLOB(55)),
(X'f6f2da681c6bb85e022720cb9c76d19cc96ffef77012c3d3a8298e862f4c7cf4', 79, SYSTEM_COMBINE_CLOB(56)),
(X'4e8b44e58d47f30ca5a37dec1d3ef23934fb078cd7c5d0fd39cb3724be906fae', 15, '{"type":"native","native":{"query":"SELECT time,\r\n       AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0e7a659d7e4271de2436a44f424eec9bea4a6ebfa774532592ae62eebd3aaa11', 10, '{"type":"native","native":{"query":"SELECT time,\r\n       aadg\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'18f6d04aacd6b3805555c9fee1b3324b952b5084482b0cb9a9583d6291006211', 69, '{"type":"native","native":{"query":"AVG","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a5ab57881c4101c37e7f765c3272172c62c8e1710e2b5694c2c0c385e092941c', 10, '{"type":"native","native":{"query":"SELECT time,\r\n       AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'0369609676ca38f7d5879e8e76dd8e35b363745bd568d721396dc67db873333f', 17, '{"type":"native","native":{"query":"SELECT time,\r\n       AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\nORDER BY time(date) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c1e85e8e7126fa30ac06f16ba213d45ed6dd2b75ac70f69706a542eabeef1482', 10, '{"type":"native","native":{"query":"SELECT MAX(time),\r\n       AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'962f7824adad955946d9562735518d282adf87fe9d53bd537df089b879257498', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'2d48b77fa1cbdd4ddc99e59e65dc976193a0d4c9acef555f5d695c1d931c98b0', 9, '{"type":"native","native":{"query":"SELECT AVG(aadg) \"%\"\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0394d4c6c3355cd585f875cc363e0de68e09f12bf5d9678ef70fb96997a7bcfe', 5, '{"type":"native","native":{"query":" \"%\"","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'41c1228ff5e73b4a89db8ee8250f6b7af72d776f3d1ec951edc0f8b09633b91a', 9, '{"type":"native","native":{"query":"SELECT AVG(aadg) as \"%\"\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1c58e8212e11092b834f4fe2506f910de6c719f4d5062f65670f5751802e6290', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg)/100\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO SYSTEM_LOB_STREAM VALUES(57, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(57, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'1dc909199db781eca4aa6d13774f0e4997b23a35d0555b2ebf494bead355c925', 33, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'2bdeebc02a6580f7000a7eee831d593279d8c41300b527014c9ab95b2e2b80ba', 88, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'f54f12b3f7bb3cead9f1a015b3667a10c985248da5c093ed9b56847c7398f4ae', 104, SYSTEM_COMBINE_CLOB(57)),
(X'd1aa68a9bb5465dfa9cbeeaf6e6815005e6423adf4173441ecc2f8e3f8b7c83c', 112, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'eb35dea490048a3d3ab2147a3db2546eec661880eb1a0f6de885e115a0bb93a2', 145, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'9badde7aea6faa54b2eb4d1cdf59d28be0e3f2affb795e0680bba1cad51bfdb1', 178, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'cc2dd150ab6e6e2679946e3e790f8177a43d31be55fe7fb38f93a9a96c45996c', 154, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'76f5c216056db15302ea73fb1a31ae68f3a3162bdfa496d58d81ae21d017ac7f', 69, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'461ebfbdf089e572fa2d43594c074500d2cb418913e93aeabc2f9cf3440e01af', 91, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'1d9849201c3065d3fcaacb8cfb487fd910d299e762b730b64aee50dffadf1646', 57, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');      
INSERT INTO SYSTEM_LOB_STREAM VALUES(58, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(58, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a68b3daa6d687039089e4dac6422d88995a66552f9bfd570fa630babdb8f53ea', 115, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'ab51d67d5d1343c1f1efee45caa2916188e8f80d3d9fdb3ac7e71dd645d30231', 99, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"sidesub1","id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'e2c40746f66878cd4de4221b8bd0f065baace742585c2a3f5c437997d01cf5b0', 211, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'3a343c8f550d4719ae1181f9f790cfa6641c5aa264344b9225c3793d744dce77', 399, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'8716c53525597c5982e338dc287c11666b453c86d490564833860d6afba391cd', 430, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'dbf3f297b401650c16a6dfdfa3546edb67c3ac8610a970becc56accd6b63eeea', 645, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'0ef3dcf1966fdbb402ebe0c630f58adf065cd5eace1dd43412163c4635258d08', 87, SYSTEM_COMBINE_CLOB(58)),
(X'6524b8ec82a88acbb3b808d203033e7efe32cfb610ead2b23282e6f0cb72077f', 853, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b6c63e87ee2cd9ba9294cb49713d69916955a89dbd5d6d84f4d2492d0c720e67', 366, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'27abbaa53e6942916c5ce48b0754279364bd92be80f30d4503d84a8083b66d80', 715, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'6f11cd45aa68c5606745638e073f54e53249ac4e6d9d7c361de526d2b5342765', 611, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'ed5dc013b979bfdea89b12599201bf55042b48b3992ba414fe58df4de431243c', 376, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');
INSERT INTO SYSTEM_LOB_STREAM VALUES(59, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(59, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9607fa4e269a9f8d105fbcb9175620de88a00a2cc87442a698a2eb738dc6b568', 392, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'84370853fb89d06a9d4f816e37a4a60810cd0a9699d8fbd292399e4c730dc156', 122, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'7fc456b401eca5c131a1683064be8de8027e305ca9ac8826e2fca49efb389974', 84, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'ebc062a5cb8d81f09a9cdaf6ab689bd555d986f800e24914bcc6e940ebd74514', 146, SYSTEM_COMBINE_CLOB(59)),
(X'593c1b77870025d6f51bdb94f9da46a52fcdb0d4660f63aa5b2718d934523f2a', 74, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'd1cf5b2a07f2a87383932d96546cedc0de9f693032c3cbbdb415f25d99a4ab02', 43, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'7f8baea8dcc6c8bb31c398942e1029a30cefad47ecc240dab5470e49255c0c2c', 119, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'4e30a5fb46bb596b9ce555008841c93ab3e1dcbf788d2f0523cd40746115540e', 141, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'4c466fcf439031fd1ea8405799d3766c60c605525bb3cabe22ad6023af4e075f', 37, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'2c5220f4727161d8093cab37455684b7fe4d3514658cae74119f65d9247fe776', 84, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'c8ebc8b5f16c789aa242057fe798d84e7b5d62f87020d7ba26d4e33d21e76516', 80, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');           
INSERT INTO SYSTEM_LOB_STREAM VALUES(60, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(60, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd80bb83b603b1878a094b8f3546b62f2419227b3c6bd7cf1d4e39937986ab01c', 53, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'dbc1389e8aae681a3b357c6b4f242555556a250e31803eb35d5a2350631dfb1e', 445, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'7811c1db17a72fd251a049384cf35ef2b27c299560bfae90438de0a8b977e37e', 890, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'd645ad378e1b5e7ce4a2847c5cf536fa77cf8d12901416fd9ddcd34405bb1c5c', 244, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'3910717f6bfa6efee0236d5f454378daba35b81ff7031367066eaf09f50eb110', 511, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'1ea088b1fde66835ac8aa4870ccae98d6276ed454a142db7d4814cb47dce653e', 94, SYSTEM_COMBINE_CLOB(60)),
(X'0b4e3cdcd47e61434cd6ebb1c34d33b4a1cfcf818338ec7fce0f1aaffbb6b009', 682, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'27aee6bd6f7edf768d910d0597d6d1ed89378642addf1083aaadf219646230d2', 619, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6dc093dd31fec22091905ce6f0993a7e674043bcada39b42b2039fba022771b5', 312, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'b99b7e235718938b75d450f8988e2bb7b15759c9b42aa122d9af5ebdd30b8552', 672, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'1f061dcc4b0617a52f6caf0c51bcb99e78671291fca5462ecf19201551fdf1e6', 323, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');         
INSERT INTO SYSTEM_LOB_STREAM VALUES(61, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(61, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5560fc4a7624d310b9dd22b15ef36009ee891b796ab50616787aab1135676738', 375, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'096611f641718cbce28871567ef7065437e623079b4b4c357453511e0fcb3657', 1380, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'1cea1b095d53dca60f107949284e94c8cb58bd24445b7208ef732b5c01587186', 1586, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'bf6139dc04db4147521fc3a7de8ecfc875fce37dea81b71ff04107e9a6af32d1', 661, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'2712a3ec6dd8826f41c146c3a2727a051920b71555255e6c0a8a438922c81d3f', 966, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'df890f53690b12995761a806fe088e807644f270764d9522478eb03d819b11de', 1110, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'90d99047129b6717a816b16fb00e2af4dd1f0ac0467d1ca5243fc363a06906b3', 65, SYSTEM_COMBINE_CLOB(61)),
(X'9d571aa646356b6af2d4041aa001dacd7309f4a6c1d50c53f13f3930e5c46961', 216, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'92fd7071257d3121aa08f1216837eacbf093d98b4d884b7e416ff2f972c7d1fb', 1593, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'c2eaf1d52fe4ecf4209600482faa6a84b7e5a661bb68c4df2970ab776566b0a8', 1764, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'd293380da3ccc4f9869506a648eec3fa4176f45842e8241657d93301ffa5e5ca', 955, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'50250c2d4c851ed6ab30a18c44e360bd18f892dca0fa3dfc721c51706f2c36f2', 840, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'21fbc9bfc83c7133b524f0de4b2ec19ad5b3242600318dec684f67b5a699e70c', 31, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub1"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b258be1a59ff7c5878ef07629c5ae25fd98b82545b4432aa3dd8c4fd7aa81621', 60, '{"type":"query","query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"minute"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub1"]],"source-table":14},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO SYSTEM_LOB_STREAM VALUES(62, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbo', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(62, 1, 'l = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6620e336fde30f2a0599e087a696baefceb49e9f6b292289818b23098bfddc3e', 51, '{"type":"query","query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"minute"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["between",["field",113,{"temporal-unit":"minute"}],"2023-04-29T07:11:00+03:00","2023-04-29T07:53:00+03:00"],["=",["field",114,null],"Sidesub1"]],"source-table":14},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4e5279a009b7aa1987f29e7426a887e39259a6cbd2f6fc20f754d4f04747b4a1', 122, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["time-interval",["field",113,null],"current","day"],["=",["field",114,null],"Sidesub1"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3427b9f6e7f4c81cd12715231cb28a1bb4ab88518a75eb847962115f9b3a34dd', 19, '{"database":2,"query":{"aggregation":[["sum",["field",55,null]]],"filter":["=",["field",54,null],"Sidesub1"],"source-table":7},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8ebee9e13552d7f8dcd48af952a160ee92f145645d97316d2ebe572798df58fb', 27, SYSTEM_COMBINE_CLOB(62)),
(X'2f97f934f3d6b0f6f02c0e1924dc93e7f2d61e72215bc1756719702295f253d0', 9, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days''))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]])\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub2","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f53421170dc5781dcc154c82b8edc6a5cf2b153fcea7735eccb13fd01a6fb677', 13, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, account\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time, account\r\n    ORDER BY date(time) ASC\r\n)\r\nWHERE account = {{Account}}","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub2","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'44f9bcfab5fdebbf22177f34080e1591a9aa323a9fd5d1ceb3195394cd3438eb', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, account\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time, account\r\n    ORDER BY date(time) ASC\r\n)\r\nWHERE [[account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub2","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'80a3fb4429f85c0713deb5a9eb5d2e6cfa4792d40d7d7be140e65523f945aa9e', 16, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'351ef4fa5b4134a886d4f77126d94386602ab1bd07b60991f69d964d829d2395', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c0ed9c855721976623d6725f922056aa5f3c9df741d0b48931330f1d624dce03', 6, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\nWHERE account = {{Account}}","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'27d9dd42e649dd8308289847e7325ba22f62e01b01cc4461a7ca70f5bda807d1', 8, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\nWHERE [[account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e5c1337b451b447afa02100ade85cf09008c9cf4b00ce2263d22b298fa44d1ad', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\nWHERE 1=1\r\n[[AND account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6ba7275468ddcf11e75292eab9049e8e2b5910d669a90266bc8221fd7207b661', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n[[WHERE account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'cbb284b73dfc090bab1b049f1b24333d2d1eab9d1ef164545ac5f3ac4c77dbe5', 32, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            --[[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n[[WHERE account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7d26879878dad6422686490885973c975483ba762e50b3f3ed8e7e20c981f98e', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            \r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n[[WHERE account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'79fe664c3f935ec5e4746e21daaaf351321b7279ba5061907d6954a28ab7e992', 14, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            \r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n--[[WHERE account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2a2eda78727f6e72c145adf1953e68f6dbc63ced266edadd5b69ab655ec08b84', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n[[WHERE account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f746a712886cee1bd6a0b5d3b0c51a986727ec7b1a3bf0f91d7852cdb33b9d18', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n[[WHERE account = {{Account}}]]","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'edd09a08cfd135d652a773639ade86942465f2394201b37be395154de245f5bb', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'603ad082681e8cc0452ac068b803eea89493814d2efc6f6111bdb0fa1199bfc2', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub2","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4360f7a15a2331036d363b04b5b0b8f9473824673e301fd7a178c8fdc388f0d9', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg), account\r\n  FROM (\r\n    SELECT time, account,\r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub2","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');    
INSERT INTO SYSTEM_LOB_STREAM VALUES(63, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(63, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a1098da39004d73e47ff1a2737a946b2016b6868b52471b49c087219ee755a79', 977, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'13ec19ae740f8f3db3240ab6dbe4d2c41a0f20d608af617f8c00470bff5423ff', 1423, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'69c027ad0fe1e6163eff76923fcb04c793a5e19d4001f47a31465c4979fbcf59', 620, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'2c89361a0d47cad5273407ecb242558bf612dd189dfb35d0f1fd16c84c2105b5', 1183, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'4e97c2bb1a4e23f5f38027ddd68e2891cdf8cd0070d5187d1cd7a0e43458aa12', 115, SYSTEM_COMBINE_CLOB(63)),
(X'a5769564d2d162dfdd6c47f5e737f3bbace228645c02b59f16f18ac6b6d3b92b', 1535, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'49f2ef17d76388b23ea4c0053b3a502bfc064c43c1cc720292a2653bca4cc901', 73, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f9277a3ce30f96e6adeb1bf2424cb5b475a04d1df62f885428841d012b448e9d', 946, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'24c3d1055ed1f800292d6a72acf486a5642b667aff9c30ca6cbca9309faf7c60', 876, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'3a807908382d76d0cd241d9686168a05f1faf1f1b5fc56c3bbd1e90ce81faa1f', 1676, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'7898b928e98ad27b7bcc1c2f52c3b98749d55b945b513c96f3c89f871e215925', 1631, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'7dccd43ce5a225ce04b12bc98b0156eceac6708bbd3f654432c4552eb91b33e9', 42, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');    
INSERT INTO SYSTEM_LOB_STREAM VALUES(64, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(64, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'4b6ddd81c1644947e338bc4d8f2929b88ed1385837ffcaaba946a6889f7f1935', 91, SYSTEM_COMBINE_CLOB(64)),
(X'69bc016b6e7d20c9be5d0ebb21f2fb816e9030e24ad0c26f16b26f2cd0634e95', 60, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'c1d38d0d3fe17ef4ced678dbabca6a05340672454891486f4cbacbc14276a633', 101, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'7cbb29913ee833e86bcd73c6089bf6ad26c7e782504bd5172e66f0176a99171a', 164, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'39e5bc05d5c267211961eb13676776df3f9b95bb58fb799a031eb024071872eb', 208, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'369c5aade67ca791a51f9779803c5f96203d03459d0c6cd512ecede7a84996c4', 54, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'e408a283ec4cec97b85d4149d62127f7adc84a665c2b2e62018fdf3272485771', 81, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'89572183fd521ab2b363fe0d64e0a3b9d30b267e77fab47b9c71fc9ced216262', 45, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'1d23a6fcdc1ee39baef56c654ef0f2755de6e7e255130a5518fbd802b53c81dc', 89, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'0ff807f3ff5b5a86a5b77135833b8dc6a82ed7ee0bfb8d15589b7dbb83629847', 57, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"Sidesub","id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'78b0fd1b875fa63daa2456d599afb092a229f43b16bbbceeb441c9c0c3c3d323', 9, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND YEAR(\"INCOME\".\"time\") == YEAR(datetime(''now'')) AND MONTH(\"INCOME\".\"time\") == MONTH(datetime(''now''))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8455ff48389b0262ec67aa171047069e8f2230fd41ea86622f585578c0b541d8', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND YEAR(\"INCOME\".\"time\") == YEAR(datetime(''now'')) AND MONTH(\"INCOME\".\"time\") == MONTH(datetime(''now'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4f1335c294c49697c1b42e3a403e65912797a5d6e62275d793bbaf20f25c9b2b', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND extract(year from \"INCOME\".\"time\") == extract(year from datetime(''now'')) AND extract(month from \"INCOME\".\"time\") == extract(month from datetime(''now''))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'85ef579a2581c0df1069de44d703087266783e35c8ae28f8918985e96d57e797', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND extract(year from \"INCOME\".\"time\") == extract(year from date(datetime(''now''))) AND extract(month from \"INCOME\".\"time\") == extract(month from date(datetime(''now'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'0f18e2839d5904663dbb251d552f7cd07139bc6ac4a3392db9bfea960b725894', 21, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND extract(year from \"INCOME\".\"time\") == extract(year from date(datetime(''now''))) AND extract(month from \"INCOME\".\"time\") == extract(month from date(datetime(''now''))))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'cb553e6b600563c7cdd9ed89c00b9b747393048aac36e766e127bdc98ee24a22', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n             (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND extract(year from date(\"INCOME\".\"time\")) == extract(year from date(datetime(''now''))) AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now''))))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c88b9b5bcab77e15a242d078d3c2d1c977634b0130dd339fda34303c6fcc665e', 8, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n             (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND extract(year from date(\"INCOME\".\"time\")) == extract(year from date(datetime(''now''))) AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now''))))\r\n            --[[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'df1fea4cafc14383654f36dec3a7d9ee975991e1edb445b0e1c36dd35d45082d', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n             (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n             AND extract(year from date(\"INCOME\".\"time\")) == extract(year from date(datetime(''now''))) AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now''))))\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f5bf5c9995f34d12c3b4ccc866fa3b70c76ec5a904ba6fa5f80fba804ed2fe2b', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n             (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n             --AND extract(year from date(\"INCOME\".\"time\")) == extract(year from date(datetime(''now''))) AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now''))))\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'89c22b0b1014abbdf536d2b9ae1f6417dba03baeb845e936f4fe438240cae16b', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               --AND extract(year from date(\"INCOME\".\"time\")) == extract(year from date(datetime(''now''))) AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'3971547dfd19e9386ffd8c172acea8c8c163d48f65b0a31987bbe32737a93ac0', 8, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND extract(year from date(\"INCOME\".\"time\")) == extract(year from date(datetime(''now''))) AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e817d427852c4402f43fdc3f78c22c5be2891d405a86bc1af50586358dddedaf', 9, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND extract(year from date(\"INCOME\".\"time\")) == 2023 AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b756a961e85dde044a49383ebb053ab173f2d81fc92a391bb85224bb829a0df8', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'71bc2244eba2bb3ae69fa1e9181f8521da2a22bc93433d1f93a2af7fa9617f73', 12, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9b742de19aa40cfc2295d437e8f3bfce1f7d7f48d47023e883c8cd74c7839da9', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND 2 == 2 -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'42619437b5e3f10a88d43425bacea09c17cf17690fb3d8f7b7a534b1c32e71a6', 12, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND date(\"INCOME\".\"time\") == date(\"INCOME\".\"time\") -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ed2e81740836a88d320140492a65f29868490033d7792d6b6afa01990d78b7bb', 8, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND extract(year from date(\"INCOME\".\"time\")) == extract(year from date(\"INCOME\".\"time\")) -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f138723ec144aed574b28860c834ac401300c88faa3ad60fdcbbae6467c3d0d5', 6, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND EXTRACT(year from date(\"INCOME\".\"time\")) == EXTRACT(year from date(\"INCOME\".\"time\")) -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8e755d1c2f0d13e971605c77e7a241971e0eb1b9c0704237154c1d0c5c21e32e', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND year(date(\"INCOME\".\"time\"))) == year(date(\"INCOME\".\"time\")) -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8d4075c30f231ccb435c04319e5a39305051147c7e97cec166a0b36eef1c8335', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND year(date(\"INCOME\".\"time\")) == year(date(\"INCOME\".\"time\")) -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2248fcaee9b5d0f98216122e86e1eb9294a9c6bde3d13b05cfbd6c5fa2bfd408', 15, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', \"INCOME\".\"time\") -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9b9d23f73ce5311ac2a0a06175cf661c6d61aaa79dc57c954e910af6c580d325', 12, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now'')) -- AND extract(year from date(\"INCOME\".\"time\")) == 2023 -- AND extract(month from date(\"INCOME\".\"time\")) == extract(month from date(datetime(''now'')))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'586d4c62917cf7792f724fd1b49a1d3cd5881c958d28024d3364192906af0ae3', 11, '{"type":"native","native":{"query":"SELECT AVG(aadg), time\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'246fabc3ef8832cc31360f053922f35c66c3528aa20d83bf6066bbe90ee0474f', 14, '{"type":"native","native":{"query":"SELECT AVG(aadg), time\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', date(datetime(''now''), \"-3 days\"))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f850914534507fd220b7a0f607677ad5bfceee96190c11ac5ab39b4daf274ff6', 10, '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5b7e0e3c09fd24b109c961e8f3c0f644804a8890018083f99e3968c73e30bc6d', 7, '{"type":"native","native":{"query":"SELECT AVG(aadg), year, month\r\n  FROM (\r\n    SELECT year, month, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%Y\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, year, month\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7c3ca33490308b9aaacf6c9e5dca12ddf5f6e92757f6092fa5eb33d5ab2991f8', 9, '{"type":"native","native":{"query":"SELECT AVG(aadg), year, month\r\n  FROM (\r\n    SELECT year, month, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%Y\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, year, month\r\n    )\r\n    GROUP BY year, month\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1884a557ec6cc3caa99a39bd62933725cc4888eff1aa2df364da2710559690d6', 13, '{"type":"native","native":{"query":"SELECT AVG(aadg), year, month\r\n  FROM (\r\n    SELECT year, month, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%Y\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, year, month\r\n    )\r\n    GROUP BY year, month\r\n    ORDER BY year, month ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'db78f6ca3461ea4cf6ef060fa227e0d31ccd17d3d63ff42efa4f3f581684ba02', 22, '{"type":"native","native":{"query":"SELECT AVG(aadg), year, month\r\n  FROM (\r\n    SELECT year, month, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, year, month\r\n    )\r\n    GROUP BY year, month\r\n    ORDER BY year, month ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e957008c7742fb45587c1e89685632f8356435256c648c84244c4ca63f1df218', 15, '{"type":"native","native":{"query":"SELECT AVG(aadg), year, month\r\n  FROM (\r\n    SELECT year, month, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE (\r\n                (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n               --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n             )\r\n             [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account, year, month\r\n    )\r\n    GROUP BY year, month\r\n    ORDER BY year, month ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2c1899c490030ff1d25ec6c0701a6900c11cbb5a9bb8f7603eb422b53312e5ab', 8, '{"type":"native","native":{"query":"ar, month, \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY ye","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'7f41a14f6572a255fc0f1a3fe92eba3a087adc3b9246ce59ffb71ade362b5ddc', 13, '{"type":"native","native":{"query":"\r\nSELECT year, month, \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\n--ORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'251bdcad6097ef3d69e7de8e35d93690edc8a217a7cddf92cfc911cad5101f61', 17, '{"type":"native","native":{"query":"\r\nSELECT year, month, \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'77ea0c88622f8ecd5a7487a703267aadd82e5e601c6f2670de30f000631f7b27', 15, '{"type":"native","native":{"query":"\r\nSELECT format(\"%d.%d\", month, year) as date, \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'34d2941b50f24e9322017b79c6f9618856c61b52a02d348d165843993c814d8b', 12, '{"type":"native","native":{"query":"\r\nSELECT format(\"%d.%d\", month, year) as \"date\", \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3deb7a743fb339d71afd85929807254f540278693fe1951c659206563d15a4f3', 16, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'be1823187b2970d89c9b1371d941a9d4c82e5e578426a9190919914a5b6e0daf', 28, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'84cd335ab868bbd49c71964a7aba02dac480834a3a6d9016a211340b2c993e86', 10, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    --GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd40c25e9a917278d743d80c7e35eeace9d9c5ad94d19f590346e5de86bd2bce7', 11, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account--, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'924a423c9eb30d59e3ad4547913f07643bfe02aaad1a63c4e2c86a0bc60df2cd', 9, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       --AVG(adg) as aadg\r\n       adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account--, year, month\r\n)\r\n--GROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'82603f50fff6293288d444c7621a7caa19d4ff3b02e556be0858acfa1a3de5d1', 9, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       --AVG(adg) as aadg\r\n       adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    --GROUP BY INCOME.account--, year, month\r\n)\r\n--GROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ef958982504146f3dae4a7e5e19158d98064168975b6fb3eda74c18dd1af6e15', 6, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       --AVG(adg) as aadg\r\n       adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                --WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                --AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(\"INCOME\".\"time\"), ''-1 days'')\r\n                AND \"DAILY_BALANCE\".\"day\" < date(\"INCOME\".\"time\")\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    --GROUP BY INCOME.account, year, month\r\n)\r\n--GROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a19a764c1bb12dfb027c4b035a03c0d07226ad4898f0f89f8370e5b99105fd88', 7, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       --AVG(adg) as aadg\r\n       adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                --WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                --AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= datetime(date(\"INCOME\".\"time\")), ''-1 days'')\r\n                AND \"DAILY_BALANCE\".\"day\" < datetime(date(\"INCOME\".\"time\"))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    --GROUP BY INCOME.account, year, month\r\n)\r\n--GROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9e92aa27bfbf21c756ec1a2a7283d0c6334b4df8d73710ffff99da411156683b', 9, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       --AVG(adg) as aadg\r\n       adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                --WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                --AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= \"INCOME\".\"time\", ''-1 days'')\r\n                AND \"DAILY_BALANCE\".\"day\" < \"INCOME\".\"time\")\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    --GROUP BY INCOME.account, year, month\r\n)\r\n--GROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e93ee1199ba6ff0281107875789186bee94862c06cfcfdc5f8e32d7edeaaf667', 9, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       --AVG(adg) as aadg\r\n       adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                --WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                --AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(\"INCOME\".\"time\", ''-1 days'')\r\n                AND \"DAILY_BALANCE\".\"day\" < \"INCOME\".\"time\")\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    --GROUP BY INCOME.account, year, month\r\n)\r\n--GROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8b2e97f1ae599c8a6ecabd14fd4e7ab61725ec07c99a6f746bef1699af33db44', 9, '{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       --AVG(adg) as aadg\r\n       adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                --WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                --AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                WHERE (\"DAILY_BALANCE\".\"day\" < date(\"INCOME\".\"time\", ''+1 days'')\r\n                AND \"DAILY_BALANCE\".\"day\" >= \"INCOME\".\"time\")\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    --GROUP BY INCOME.account, year, month\r\n)\r\n--GROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'281d9673a3bc3cf5610222971359f53aaaa15a4146a570689ddb8ab9b5d5f333', 5, '{"type":"native","native":{"query":"SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                --WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                --AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                WHERE (\"DAILY_BALANCE\".\"day\" < date(\"INCOME\".\"time\", ''+1 days'')\r\n                AND \"DAILY_BALANCE\".\"day\" >= \"INCOME\".\"time\")\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1","template-tags":{"Account":{"id":"9134706d-3b77-97ed-cf26-79aa191ea8bc","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1d7e3718ce69eed51f0b02a351d5e0c8067a85c70b3bd96587ce3320769770f0', 10, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n    SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                --WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                --AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                WHERE (\"DAILY_BALANCE\".\"day\" < date(\"INCOME\".\"time\", ''+1 days'')\r\n                AND \"DAILY_BALANCE\".\"day\" >= \"INCOME\".\"time\")\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) as adg\r\nFROM INCOME","template-tags":{"Account":{"id":"9134706d-3b77-97ed-cf26-79aa191ea8bc","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c52c6ef8a6551bbe5efdd87259ed8a831b86c856ef0a292edb1633953090e99e', 47, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nJOIN DAILY_BALANCE \r\nON (\"DAILY_BALANCE\".\"day\" < date(\"INCOME\".\"time\", ''+1 days'') AND \"DAILY_BALANCE\".\"day\" >= \"INCOME\".\"time\")\r\n   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]","template-tags":{"Account":{"id":"9134706d-3b77-97ed-cf26-79aa191ea8bc","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2f970f3334b3053c16a6e6da3b0ac619f9b44371b605c79a078d4dd2266ace68', 48, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\n[[WHERE \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nJOIN DAILY_BALANCE \r\nON (\"DAILY_BALANCE\".\"day\" < date(\"INCOME\".\"time\", ''+1 days'') AND \"DAILY_BALANCE\".\"day\" >= \"INCOME\".\"time\")\r\n   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'38a33e46a1e85caac6a4d55c85ec784bc80a0a84a888df7877fdc5e97c6d3d83', 4, '{"type":"native","native":{"query":"account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b718e01bf0dc4901f9d84eb2e70cb2eeb8a24be942be03979a38c4aff7e52a61', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\nJOIN DAILY_BALANCE \r\nON (\"DAILY_BALANCE\".\"day\" < date(\"INCOME\".\"time\", ''+1 days'') AND \"DAILY_BALANCE\".\"day\" >= \"INCOME\".\"time\")\r\n   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0660d682e3ed0dfd25b46d0ea55cce08b02abc2991411f8fc480924ec22da4bb', 14, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\nJOIN DAILY_BALANCE \r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'43bc661bf55b00f71cd0c90ca9f1127de43f28e9547455f6094b0129915618b7', 5, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'bcab772bded8062cae2820d06b0d70269b89051f719bff5296bf343b06d126f5', 115, '{"database":2,"query":{"source-table":6},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a5e87be276cfe608ea4ef6e88146fd0a2e9e8e453fb45d949c89f984353aeae6', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.TotalWalletBalance as adg\r\nFROM INCOME\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c8eec9dc3ff4929c90e66a4cb39f05d37f6b6a271b64585fcd3d8d636cf5ec0e', 5, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"TotalWalletBalance\" as adg\r\nFROM INCOME\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f68f89d8cf3b5b7db2d1bda29dbe8aebc7525f360b7c15ac55343c786b0488fa', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"TotalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'413dbd2039b89dd44793b815851fce2c3ba5675c05bdbe43822a991185c5a297', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f24dc6dec27f5899dbc0a0b049b67a0cbfebe5b34724373b7ba9b400ed8b7793', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, --100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1fa3dbd93d28e3cadb9f6158d9f2cb6611fbfba215956c7b164942f7e191ef2e', 126, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month--, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'bbe77fd7f2b059ec2fa1c10510300682c346f8db74fe000ee4aa0c577277755a', 164, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, INCOME.income--, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ffe6c808e143115c0d249512c5c3b79315e7529e3c0b524c21b6125514328b99', 1209, '{"database":2,"query":{"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd47d4ee6031cd8e1064123ee76e265b8bd25dcfa2d0eec93bbaa82aa751914d3', 9, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income)--, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6adecf54add137590ee808be4ba71b65959a4dfef3b3ee61bdb5b4c2a7800573', 9, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2afe4a8333d39a1584a10bb0a10b3b21acba70c77e7b23ffd516f38db7b40bff', 9, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f2c8322df512ea425d4212662d9f50db9be559f5a11e3b82d956cd03a7769dbe', 14, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\ngroup by INCOME.account, year, month\r\n--[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'81c9d8f1526dfb9c9920c29910b24c78120358d7fbd4ca05591ac6b99c3c7b05', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\ngroup by INCOME.account, year, month\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"b372b94b-4870-c5c7-0fe0-ff1d97017974","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'77eac34ead0ae533b20ae2a0400143063efaf51673791610e8032a413de593fa', 13, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\ngroup by INCOME.account, year, month\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"195f582a-0959-1959-90ff-e1500023dec5","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'19b194597580f8071a0dea72a193a495f1d6658d9bbf9d0d3c4dc7e5f6312fba', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n[[WHERE DAILY_BALANCE.account = {{Account}}]]\r\ngroup by INCOME.account, year, month\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"195f582a-0959-1959-90ff-e1500023dec5","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"195f582a-0959-1959-90ff-e1500023dec5","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c3f6a9cdda9d98cf20fe7d64adfb44faa5c0bb43d3496347293c0b53ffeee3ae', 12, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month\r\n--JOIN DAILY_BALANCE \r\n--ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n--   AND DAILY_BALANCE.account = INCOME.account\r\n   ","template-tags":{"Account":{"id":"195f582a-0959-1959-90ff-e1500023dec5","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"195f582a-0959-1959-90ff-e1500023dec5","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c5ca976912e720d37d4d1772c46e2ca82279862c8ff114bcca48be4e88a2ee3e', 6, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n[[WHERE INCOME.account = {{Account}}]]\r\nJOIN DAILY_BALANCE \r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n--group by INCOME.account, year, month","template-tags":{"Account":{"id":"195f582a-0959-1959-90ff-e1500023dec5","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"195f582a-0959-1959-90ff-e1500023dec5","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4ceee3d01df3a502a365ded5f40b50bc53249e9fc8e1fd511ce3f111bd8d7dfa', 5, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n[[WHERE INCOME.account = {{Account}}]]\r\nJOIN \"DAILY_BALANCE\"\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n--group by INCOME.account, year, month","template-tags":{"Account":{"id":"195f582a-0959-1959-90ff-e1500023dec5","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"195f582a-0959-1959-90ff-e1500023dec5","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'24a85a9b1e624a0d149df6ca2bbc1bb68ff5a548de10665472dc8a30c4562317', 5, '{"type":"native","native":{"query":"DAILY_BALANCE","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'65161164de4697dedb33f1f2a70f2beed66436931211e6ec0625d82095095352', 5, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n[[WHERE INCOME.account = {{Account}}]]\r\nINNER JOIN \"DAILY_BALANCE\"\r\nON (\"DAILY_BALANCE\".day < date(INCOME.time, ''+1 days'') AND \"DAILY_BALANCE\".day >= INCOME.time)\r\n   AND \"DAILY_BALANCE\".account = INCOME.account\r\n--group by INCOME.account, year, month","template-tags":{"Account":{"id":"195f582a-0959-1959-90ff-e1500023dec5","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"195f582a-0959-1959-90ff-e1500023dec5","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'96dcdd95ff8f41e8fb4f789b7d1f23ae9b910570cbc7c1fb1fcd8c75b6610014', 47, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\n\r\nINNER JOIN \"DAILY_BALANCE\"\r\nON (\"DAILY_BALANCE\".day < date(INCOME.time, ''+1 days'') AND \"DAILY_BALANCE\".day >= INCOME.time)\r\n   AND \"DAILY_BALANCE\".account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\n--group by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5c8e46900425946287110d5576bef41ca2fd6fe2bf52ff45fb0e51e592cfb2e5', 49, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\n--group by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'03bd5a6506f3ae2fa3ea36e29ccac0c692edccce4105910c8f08647e818a00a1', 51, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month--, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= INCOME.time)\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\n--group by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1f622bfa0ac0bb6e35ab2e04bb70a1bff30c71069a1c675a7ee9f80f67c9ce49', 166, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month--, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\n--group by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'048feda618883b22be0928ef2b8c5da5ec1ad2f7f96649acd4ddbecf524bf9d7', 60, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month--, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'55273c74a9f6bb70755fc4fbee7a57ab84a33000cb526dc24e8fe36c2177b33d', 57, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income --, 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'725beff431520dfb5273ba402f719c691a7ebea8768184104465a4a0f745a849', 58, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, sum(INCOME.income) as income , 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3912cc0e191ff554e7e35bb99328aa81ea82b1e77bbc10f84d6cbe1dd3b5e227', 63, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / \"DAILY_BALANCE\".\"totalWalletBalance\" as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'204858975822f34c31c36d0e3180afdfa3c4c1dc12bb06cb0f1e78d2730d4a22', 57, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3004f7d38576e3d20c2783f3cb29dbb920543e585b1770fca5182fd4e8ab54c6', 58, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month\r\norder by INCOME.account, year, month","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'449d74265d8c58f5fdf8654554517bdbf60c833edf8ededde2262f3b8fd6e0ab', 58, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month\r\norder by INCOME.account, year, month ASC","template-tags":{"Account":{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"7feda25e-e9b0-830d-b952-b65e23739bba","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd1803499c48af126b98ecdd6eebfab45261485c6e17309976dd7baf79edc6936', 60, '{"type":"native","native":{"query":"SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\nFROM INCOME\r\nINNER JOIN DAILY_BALANCE\r\nON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n   AND DAILY_BALANCE.account = INCOME.account\r\n[[WHERE INCOME.account = {{Account}}]]\r\ngroup by INCOME.account, year, month\r\norder by INCOME.account, year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'61d87a541ff87484a296ff8a0fc4ccdd782a568fbf5b166f7c6f45792a634d3d', 59, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4Y\", month, year) as date, adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\norder by year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'03e147ba2bef0d5e77d81bf16c10c5e5686f43b4d27bc312a49e389dd11372b5', 61, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as date, adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\norder by year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'766f9ff78f8a66ff7af532465331ce98023ba7dcc534a0c91b26b63f859e8584', 124, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as date, adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\norder by year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a0056a752208236794ef16b7b26d3a50c8a0698167d87da40b122291a908332b', 64, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as date, adg\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\norder by year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'538163991aea7af57a13fd70f2f279506f3318dbcbbd8065225ce7ef86d17e76', 58, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as date, adg\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\norder by year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5c33013c95d56903fc602968d580fbf50bcc78211c89eb1dc6d8a4888c2f6338', 9, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as date, adg\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\norder by year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'32a661ac29dfe6a685fa8edcca6d00154164c378b53fcdaba86f256c7b4d4ca7', 9, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\norder by year, month ASC\r\ngroup by \"date\"","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'58c4d9209fe3fd4c467ec919ab2607455e7c3eaf2350d6e4e1a17e71c9bd8c4c', 10, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'782dc8af4f79f82f95e0dc273ae4d862aafe77d0cd99f447c2b1789e60520b7a', 58, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'76449fab97d34aba756de534ec242d2f95d25e8b5ff241957b69475d4803ed66', 59, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4767e2ee9cfcad54f19fd9d240b93708e0011b2e58a4e0eafb47e37644d25274', 59, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", adg\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\n--group by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b8145e0bee348d16cf3d63b84f5945ce855ef985e8f02a790f0464609d876335', 1312, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'de00740d5d02f85fb19357040a5cc9fb90e485953283e905528de180ce5aa380', 57, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\n--group by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1aef64fa375f61c8c1f45e7cc6d23596394a68785b3eeab6328dbdd8605d7a96', 9, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", --sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\n--group by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0f2d8a4b2b41be2ec7e308b1cffd42ddc8982a95033dc466ae1ce8d1916dc4d0', 59, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", adg\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'320db870da158bec99c5dee0831e98a1b06bb5ac364d9161f9f39bbbf2ab61af', 67, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":true,"process-viz-settings?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'b90fdaaf3f4da0fd77b2849420cdcb7a7c5f0b220d6adce2ae987f3e0f30b0e3', 152, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'ffa9c4469f63ead80419478bf959a018e79f7e0f62b028c5f7f81e5f8bda5773', 64, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'887ddf24c399a6e42c26d145150ef99122e61853a70e375f050cbf09e082caf5', 149, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'a175f3b5c87ae49844f9cfc204239e097a2c429cacff22205c25c226b5b2c747', 147, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'74774d2b9a2caf0df8c98900a2adac89ebbe590fbec7a4c287e5d34fa32ec6c4', 205, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');              
INSERT INTO SYSTEM_LOB_STREAM VALUES(65, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(65, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}', NULL);             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'de3df72c3c58d94c08f534faf8129d701c55442dc075e42d566b9fbfe7aef749', 58, SYSTEM_COMBINE_CLOB(65)),
(X'fc0b050b10cc477e8aed82470e144b2fdfc79ba02442ec9526a4637f4f3e9acb', 40, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'efb80711d0c2593c50953236e3735641f0243b83b27c4476c610d785c6df1334', 75, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'80fa87515eebeebd88606b1f4804129e7078471a05734a4b20ab6c260501d056', 160, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'3e672b8b98a44c71ea6d73e068144ce7e4ba4033f7f68b8b78a6e02cc5fe5afa', 213, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'64d41388b3cc0093aab7f381f25c6f27d244e07f387db9bb8321c64fc6916351', 222, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'6fb92685bf64716fd6ec3785fa7eb31847521e787bc75bda623f19a29d963ff7', 1770, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'39261e465eded47d9722a242ed71a0b850e11c157c67ee86a2747148eb71b5e5', 1834, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'b43d8e683eafd46c2b8327e311b0756c3e4b0a49161936dc690b3515d2c1a69c', 15, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c9d3c274c2062d0e2c5c7405e62f8e212461d0a46364aa69f291ee60d6c98267', 22, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by walletBalance asc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'157783ff63dfe7d1e9cf95cfcaa0885c2befedfa80567edb5e360cb8c77ee8fc', 18, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure asc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'1e14c8354cf4e7763b9edd200ed92bd7a0982b57788ec2356aa9f688c88c0a04', 18, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'dd9501d0e62c2ff79bd8019582a992cbd8c6d458fc96563d242b42c7136c3daf', 17, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'3493fc2850a6b258af3f78a506a7d629f3d08768a4e95bf72ff4db052a8ea2d0', 27, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'90574a9998a6c475c5b7ea9db11430a975b2ac164a751022e4c659ca8d607048', 15, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'2145ef6d5d8f94c65cd6cb9d8945c56de4c4829433a311f4479d245f31bb1969', 27, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","value":"0.01","target":["variable",["template-tag","dcaPercent"]]}],"async?":true,"cache-ttl":null}'),
(X'2dfcc8e8f5eac22a6cb35eded1713d015b43b9f83c1994dc13cfaa7fb654358c', 35, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e5c72c3723f67a8243cd42a9186ccfb9cd442979c535a8e792edbea26f01b465', 21, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    o.nr_orders as order_count, --coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7accdc407115f6a23ba88727d598b07c4b1c46bd650bef1f91d2621b4a352a95', 19, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    o.nr_orders as order_count, --coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders as o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a4d0b93f125e4a595f40a45f0e89382a64219883fc877dec3360b91320444bbe', 25, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":true,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","value":"1","target":["variable",["template-tag","dcaPercent"]]}],"async?":true,"cache-ttl":null}'),
(X'a437162fe59a76ba9b34643b9c03f362d18f1f9bba2f7fe5bad5f653b7245539', 18, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","value":"12","target":["variable",["template-tag","dcaPercent"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'09776b8f645a1de9c776bd10498217bbe75804cde76176ffca27d6181c015f28', 18, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","value":"","target":["variable",["template-tag","dcaPercent"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9874682a930cd29c37fa2558429daf223e1fbe7fc43140b1073b272545a8c30e', 116, '{"database":2,"query":{"source-table":9},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f5765a1d501656ae8a8402b3fdf896be3fb9888dd448fc0108c87b875997ff08', 8, '{"type":"native","native":{"query":"select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0098480a1a4868b15562495c366ff7839b04f135ee4efcd5f8d3a88c414b11d3', 8, '{"type":"native","native":{"query":"select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'00aea9092ca99b6c482d003bd4a66c503fcbefe0c7d857fcbc7406cc2aa3f306', 8, '{"type":"native","native":{"query":"select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                     -- group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2f12a48bbcc1564b2bc8a373a0f3ea5807810d6f7c0c8930c5d0da8ab56c86d4', 4, '{"type":"native","native":{"query":"select symbol, --count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                     -- group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5581a45ed22bcbc499512c7dd2465e1f75249d6f180f552fc5628de03ebf3e04', 6, '{"type":"native","native":{"query":"select symbol--, --count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                     -- group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c8c7b10a11bb6b6251261854ddfbd79cae65abe0b55856519c60fb2f2993922e', 11, '{"type":"native","native":{"query":"select symbol--, --count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     -- group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b027cb923a058f45f2e3a43b206aca790eb904f758a4e4d7b1d843c04575558c', 24, '{"type":"native","native":{"query":"select *--, --count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     -- group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4f3d3751b2d1ed0ef530b6550e4ab7198947407c872f5898b1716f9c7fdd57e9', 19, '{"type":"native","native":{"query":"select *--, --count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0ebd12e7911de1327d2cd4a2ed0b751dd7f72708af7424de64b4c1234b1bf0e2', 9, '{"type":"native","native":{"query":"select symbol, -count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c9dfbae192e4ee8c7a5b473a8c5e19cac88e1b4ae7499693b37c548e805c9a99', 11, '{"type":"native","native":{"query":"select symbol, o.position_side, -count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'dc9e3dbdbef3a8e7c1d1469da3b45410bc6582cce18a73dfddc3576602b31af4', 9, '{"type":"native","native":{"query":"select symbol, o.position_side, -count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     --group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f33c064126183236edf7742ac3c42045a3d404c057a6bab029fdb0f169a9234d', 10, '{"type":"native","native":{"query":"select symbol, o.position_side--, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     --group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'43290e88e24074e9927626bda7171816b8ad77f2a37837f49d81b087fe576711', 11, '{"type":"native","native":{"query":"select symbol, o.position_side--, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                     -- where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     --group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'99601d7b0947200cde52e0e6e20c55f21e3bdd2ee51132ee2c9c8e55c86b87e4', 12, '{"type":"native","native":{"query":"select symbol, o.position_side, side--, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                     -- where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     --group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ac18b2dd70c32357a0bd44440c8b3f7c1e88a630c96fa839756b9088fe80aae1', 19, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","value":"","target":["variable",["template-tag","dcaPercent"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'39d9a49b49c59c39b1af9c82dcefa63520a9b2fa74b954cae47ea63357b05377', 36, '{"type":"native","native":{"query":"select symbol, o.position_side, side, *--, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                     -- where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     --group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b2939dc2f2469925af1799db0b89b9b2786fe5001da933312cd3ed3f273d4627', 12, '{"type":"native","native":{"query":"select symbol, o.position_side, side, *--, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where account = \"Sidesub1\"\n                     -- where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     --group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'07c3116a3e5731a9b9471a9eddea332bf4938788b4df2a8835887f0aa26181f9', 18, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","value":"","target":["variable",["template-tag","dcaPercent"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'de1a47604832864a0631e28852f078ad1e952cf13b8b33abb71ac96772f01141', 37, '{"type":"native","native":{"query":"select symbol, o.position_side, side, *--, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      --where account = \"Sidesub1\"\n                     -- where o.side = ''BUY''\n                       -- and o.position_side = ''LONG''\n                     --group by symbol, account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');    
INSERT INTO SYSTEM_LOB_STREAM VALUES(66, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entry', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(66, 1, 'Price)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(67, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account =', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(67, 1, ' p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'0d80d147119bf5442e008d21871f2ad8a0591ef56cb834cbd84e9d9cb4d8f7f1', 19, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'55e4a124acad9c90e41ff1ecf8608f43cf118960a407165524bf87fb798f00b7', 22, SYSTEM_COMBINE_CLOB(66)),
(X'e9be4c3d75f252e4215cd323f1ebf7efc5113ea4780178d3060944b578af8057', 99, SYSTEM_COMBINE_CLOB(67)),
(X'8032ab527829ec54b3cb98cd39dcfe7f81554914b132919737b93e238f88581e', 29, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');  
INSERT INTO SYSTEM_LOB_STREAM VALUES(68, 0, '{"type":"native","native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer jo', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(68, 1, 'in (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(69, 0, '{"type":"native","native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect symbol, side, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(69, 1, '= tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(70, 0, '{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entry', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(70, 1, 'Price)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"d335fbcd-ef0b-a034-b141-55480b892189","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"7c73e277-5253-0c65-8c2e-5daf38230614","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(71, 0, '{"type":"native","native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.ac', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(71, 1, 'count\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}', NULL);      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd38d99feb56fdef5a973b53418485e5b130e4c52de010da4a01f5d38db9a2179', 19, SYSTEM_COMBINE_CLOB(68)),
(X'd4cf29ee87244819365b4c7f213f8c5cab747f90f57964e044dcd3b8ed4717b1', 18, SYSTEM_COMBINE_CLOB(69)),
(X'34f140766847a2fb4058bb619447429f9f6a5fd447ea95bff1e5bfdd604dd6bd', 4, '{"type":"native","native":{"query":"*","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b301cefa82818fac3985e9653d57f5bdb5a80fd5962b0b0cd628d8d4d78fc006', 21, SYSTEM_COMBINE_CLOB(70)),
(X'7e04251957e65c8e5ae0a0b587082c77b9f730052b8359473ee9ebc2c21de0db', 20, SYSTEM_COMBINE_CLOB(71)),
(X'be60f1344d3ed888b77f52adbc081c9c69a0e9cf75cad2f04b8a09b342180aa5', 4, '{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b508886c23ae0234cf0056efc65380398170cf66c7bec2dbb9ebb3a39b2a8a42', 14, '{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'870a83e958b936df047a2c25519a45c583ef927d0aaaf03402f828b2ad7778f3', 16, '{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8cb493143f4d849d6a0327c0ea159012f3c7901b0b238b58c02e0ed2d2154a2b', 2219, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'7e1371cd8c2eabaa497dfb49ebeb6150f0e98c11c8aeff68596b4b6d08279d4f', 183, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6bd0ac03e82d34f3fee4a3f9a2fe1492862802797a8d8c5b9169ee199f4a0655', 411, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'db226343ccadbb7f8efcd506f1a3125b70835e0c24a5c81f5ac5461876a12f5d', 93, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f8cea7494de64d166c64fcc063ff4aa08c0ba6695e78d3287aca4e55cbf9a35c', 69, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'6d5abba1222abb146cf3066b57623fc9e574af9d2372fd11f262697ac7300d81', 70, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'7d7fc56f0072f06a7b6b1fad354703cae1a594e7fd36f6035c5d5e52d7da082e', 50, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub2","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'7ab71555166fe5ca850da160af9f6ead260698772d1b30fb5af5cc90d98f672f', 74, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd9cee9352d76b882e79f48e96b7a657927126a235cd25403fac74542198e7ec3', 413, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'f104c5c63747578ffe242559e5e0f3aabfd2c7f7aaeafcffc549e794c2e9d4fc', 382, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'13a8d4251c90b8f1e290483fae1675d5ffc9e8e1a570e32c4064f1928e158554', 293, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'7b20094c873567a628ea02cefb99666bf50ac651a9f98f7238fc2db1f20a81a2', 1111, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'0f359031540c97d94e103ffaaaa05e5db7818de9e2cedd5157ee970df1e58469', 71, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'25cc78ae56d09b25d81afd994b894a74b10122a7612e4fbe74e83e30f9424061', 88, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'f4daf47145aeec7f030343cbb52a31841366d570dbe9cc5a40f0dfcc3c7c3c21', 67, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'89146a676516514e4db85771c7028937067742273ee14c07a2a80343930b0a97', 71, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'0d2bf401c2865be0c1c7dadf62260a0eb5e1df6b0a619513caff881afc2e693a', 30, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'a4744139886d32e6f6785b8495502ff98286535dcf414cfd8d37ce98b2475db0', 40, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'b545d662d0abe93404d023d40b636abbe91b683761af55af3bb43f1ea6d2b324', 110, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'a1d798e7345c1aeb0d873405ead77f6533592d8ea3e1f18939e0d3904186cb22', 28, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd77f75eb10103a93fb3f624284036accb102cae022d93d4361bb178cfc6c0c95', 35, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'6e2f8e1281810e8b5e8d3e5421eba791a36279b249ebe1fd1533a75502cf6557', 48, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'f53687bea971750a3076fbdba136709595595de21314c5c2a511781beaa71e86', 130, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'4600e2f87e8970e7a1ea09dc12d44d499d10a9ea58f98625aafdf6a6a0899a94', 71, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');        
INSERT INTO SYSTEM_LOB_STREAM VALUES(72, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) a', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(72, 1, 's tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(73, 0, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(73, 1, '                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}', NULL);              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a00f248e1d82ef63a3b626c0cf00e49f05eafa936869a46d36c5dbe111b6f2e0', 40, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"","id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'6de93846b84a1c50889e8f63f846f7f31c7cf8a660a78c2c1eaa356255846df3', 16, '{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4a902c7410a654a1d02cee9deea655293f60992a71ccc7e7ff3e17f40ecb3300', 29, SYSTEM_COMBINE_CLOB(72)),
(X'e67c964720de35b895a09ceefcf4f3f6e9cd588944f230a5ecd8685d63c21324', 30, SYSTEM_COMBINE_CLOB(73)),
(X'224f3ccea7ee4ac0e1b59e8a90437706b347fdcd6126bde424c1e727d7969b37', 88, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'80956c8876f8266f766686f0cfabf5b429b002bb05fa1253a7bd7917e2f505a6', 1000, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'7caa4166dc681589a428e8f85945611b2b7fed04f2a5e1e3d10e5f46e062076e', 1004, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9d20cf0e0afb4583f8398c1c7b9b6aae632f8ef4ec181edd5bd6755a35fc4a73', 179, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'05d0a05049629cc07c5daed0cef5e40621866727912d8ba9d59e6d400cca3345', 80, '{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b214dc80b66b5c1b7f35eba22351d3f2d444824154f380a77d223582e80a7c13', 1894, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'b3e640a1d6dd68ed18bcb4a0c254a959fb5f723f6b5e9e430101faad1622e84d', 591, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub3","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e9452d4f97d450ae7f6cd78135d64f7fe2a5f36714aaea0c10db6b410a5c31bd', 474, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'cb68a4971db3a1cc599463c11bcd67ab475b0820250798abd6d85448cea6b0d9', 1032, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'f2f5798e16833adc1115b359c22b81a86f61804ff342ca582ccb76f48a15b53e', 1454, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'347135122964aa9a1fa5ba8df386adf29ec2c4cb3986410de6a875a242d50e09', 1488, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'03e28df5910c126b5527d61d6180af3cf25e3c462e407ff22ccfc81e40e77b44', 1683, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'24ad96ddee04db1a4addf95db8ed21dba59500ea0c8dfb3259dd42822e3bbb7b', 2288, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'227d3b516d5818bdcafcb9a1627a2fc4e77ef7a6033b4b0443554db45f17b245', 2533, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'41ecb538aec33d25b725649ac8e076e2b4847bfe2508b523456a49f0750e3e62', 1335, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'f2568a96009430ed1e2e8f8ab4a752ed7eedbfabc75deb5d7a12bffa2a441a1f', 1939, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'd41c0fb13f2a552ce47ce016c3455ff27644eee4ecb70c3ac67a007302727491', 1518, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'66d8c50732a6ada02c4ed894ab32e4e53634ab541dc0d75398eb05f34870bdba', 964, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'14731697b682b9d7531e8202cd61a654738c6597038ca1f796ca441d1298d13e', 1786, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'8dd44bb68c924b571719cce40e0b73cfcdadd440234f36375ab2e6dbae549b29', 1880, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'bc388c8bb08f6bb75eda8972bf869273cd8045296a44e63b4db67f736d782f0b', 999, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'b3372795d42e7062a00115e222ae6c490868b5aac624ecf5415cc7f875a55efd', 273, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'4db5a118205c0a763e84031d0a201b8dee091aec964633745ffc88f96a04d156', 745, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'5ffa62f78405b2e40bf65ee57a50d0f9833734487f4de5be1243336c52f3822a', 1611, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'8254f5aca8a012404afa4a8f260b38bfdf5455ef2d5cabedb43a1403cda0ad51', 1311, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9955c7c77478065b22e2aa9b8195671de26d41df11f792e00221f82e9ebe805e', 1721, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'e1036aeac0fd8509bd351e0ffd0827f3a87763e1fbe65a4f28f84f69258e2c92', 1953, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'cd4da59c9f1c460de96869b8b5393f3aac9ac6672a193909d1b0f5045fefa261', 1951, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'eb0177ed249ff0e61e547b375621b2d2fd7392e2f44a2a058833e50863b3a207', 1050, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'b75247bcba7667f10516fdad1188544cfe4551d39b68265914669ed6d6b92428', 2504, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'dd3dc1f8c37162a49859324f087e226700648d220943ba5805be38ceb9ffc8a2', 916, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'49818aaa6c322af8e5c86f82ea4e6f15835e3f216f349b1bd3b3bf561a0fca07', 1620, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'1a3822c4ec16fdef3e9e4ebf22b785e5e8c3a3e22a7f32026698355da8477fdd', 875, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'941809e6dd351a3b9e570307624d6faa772497b427466a24873f57e21148e585', 881, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'5a9de9ebdc827434ca1db5b3ade7e24e29a0e00d7a3659e068dcb8b4bf1dbedb', 1737, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'c5f69de24de09b0cdb27bb70da4e9231bedfcc97986e96e064c28ae4ca781f96', 2805, '{"type":"native","native":{"query":"SELECT DATE(\"DAILY_BALANCE\".\"day\") AS \"day\", SUM(\"DAILY_BALANCE\".\"totalWalletBalance\") AS \"sum\"\nFROM \"DAILY_BALANCE\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\nGROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'463b49897b997d79ef2f28c1ef0a1c8c778dfd0f7a8b121e483879f18e6c30e1', 93, '{"type":"native","native":{"query":"SELECT DATE(\"DAILY_BALANCE\".\"day\") AS \"day\", \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"sum\"\nFROM \"DAILY_BALANCE\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\nGROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a45dff26c145c7e183ee538f0de6c07a2aae3de3989bad02e6c1d097394ead29', 59, '{"type":"native","native":{"query":"SELECT DATE(\"DAILY_BALANCE\".\"day\") AS \"day\", \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"sum\"\nFROM \"DAILY_BALANCE\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\n# GROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5f915ab982aa827c022e1c744c56267dd55b0986b78e1b7f2bb578a18429e73d', 109, '{"type":"native","native":{"query":"SELECT DATE(\"DAILY_BALANCE\".\"day\") AS \"day\", \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"sum\"\nFROM \"DAILY_BALANCE\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3e23886b28500921a85cde30b2257d1ec756eabdfead0f63924f4f68a7b8a8c2', 38, '{"type":"native","native":{"query":"SELECT DATE(\"DAILY_BALANCE\".\"day\") AS \"day\", \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"sum\", \"DAILY_BALANCE\".totalUnrealizedProfit\nFROM \"DAILY_BALANCE\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'cc45d370ded0dc8ffaaffb810d2a1830b2660557a3bb91dd38f80154dbc68b1b', 28, '{"type":"native","native":{"query":"SELECT DATE(\"DAILY_BALANCE\".\"day\") AS \"day\", \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"sum\", \"DAILY_BALANCE\".\"totalUnrealizedProfit\"\nFROM \"DAILY_BALANCE\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'23178af94b89724d4ee8f6cde95ba78ea022f0e91eaa8d867488cf3a6bf06856', 49, '{"type":"native","native":{"query":"SELECT DATE(\"day\") AS \"day\", \"totalWalletBalance\" AS \"balance\", \"totalUnrealizedProfit\" AS \"uPNL\"\nFROM \"Balance\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'03a557d9bfc303a920d118be08b9264bfdb654cf2173155adc78f97f1aac1012', 39, '{"type":"native","native":{"query":"SELECT DATE(\"registration_datetime\") AS \"day\", \"totalWalletBalance\" AS \"balance\", \"totalUnrealizedProfit\" AS \"uPNL\"\nFROM \"Balance\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2cf0cb830e357ed3e0b966f0a5417e50973a64c8ff5dcc0898be25abf05f215a', 38, '{"type":"native","native":{"query":"SELECT DATE(\"registration_datetime\") AS \"day\", \"totalWalletBalance\" AS \"balance\", \"totalUnrealizedProfit\" AS \"uPNL\"\nFROM \"Balance\"\nWHERE (\"registration_datetime\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"registration_datetime\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"registration_datetime\")\nORDER BY DATE(\"registration_datetime\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'32a108056f9ed51f1193cc786f8fddbb02f2f87fe037171425e8477d2a08fea7', 36, '{"type":"native","native":{"query":"SELECT DATE(\"registration_datetime\") AS \"day\", \"totalWalletBalance\" AS \"balance\", \"totalUnrealizedProfit\" AS \"uPNL\"\nFROM \"Balance\"\n--WHERE (\"registration_datetime\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n--   AND (\"registration_datetime\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"registration_datetime\")\nORDER BY DATE(\"registration_datetime\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'39b7efe15b06afb8a73fc965c779db6e81d3c96bfe9092580efc34f1e0025f11', 43, '{"type":"native","native":{"query":"SELECT DATE(\"registration_datetime\") AS \"day\", \"totalWalletBalance\" AS \"balance\", \"totalUnrealizedProfit\" AS \"uPNL\"\nFROM \"Balance\"\nWHERE 1=1\n--WHERE (\"registration_datetime\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n--   AND (\"registration_datetime\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"registration_datetime\")\n    [[and \"Balance\".\"Account\" = {{Account}}]]\nORDER BY DATE(\"registration_datetime\") DESC","template-tags":{"Account":{"id":"4675482e-d0f7-93bd-11b9-172376d47cac","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'06f69e09512d6b1ecff3afa0f3ca47de9857aa404141ef39865e0725cdef2de1', 238, '{"type":"native","native":{"query":"SELECT DATE(\"registration_datetime\") AS \"day\", \"totalWalletBalance\" AS \"balance\", \"totalUnrealizedProfit\" AS \"uPNL\", *\nFROM \"Balance\"\n--WHERE (\"registration_datetime\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n--   AND (\"registration_datetime\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"registration_datetime\")\nORDER BY DATE(\"registration_datetime\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd173e68090e0aa0f860a4790536355649a985e4102e0c7df9d34297d004bc79b', 32, '{"type":"native","native":{"query":"SELECT DATE(\"registration_datetime\") AS \"day\", sum(\"totalWalletBalance\") AS \"Total Balance\", sum(\"totalUnrealizedProfit\") AS \"Total uPNL\", \nFROM \"Balance\"\nWHERE 1=1\n--WHERE (\"registration_datetime\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n--   AND (\"registration_datetime\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"registration_datetime\")\n    [[and \"Balance\".\"account\" = {{Account}}]]\nORDER BY DATE(\"registration_datetime\") DESC","template-tags":{"Account":{"id":"f0c37e95-5c9e-f733-9e94-6a8f3f88e5cb","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3e350af62c08a29389f23820682953a775e981ecb1587f32d077b9cc0c0b5fba', 187, '{"type":"native","native":{"query":"SELECT DATE(\"registration_datetime\") AS \"day\", sum(\"totalWalletBalance\") AS \"Total Balance\", sum(\"totalUnrealizedProfit\") AS \"Total uPNL\"\nFROM \"Balance\"\nWHERE 1=1\n--WHERE (\"registration_datetime\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n--   AND (\"registration_datetime\" < DATE(DATETIME(''now'')))\n-- GROUP BY DATE(\"registration_datetime\")\n    [[and \"Balance\".\"account\" = {{Account}}]]\nORDER BY DATE(\"registration_datetime\") DESC","template-tags":{"Account":{"id":"f0c37e95-5c9e-f733-9e94-6a8f3f88e5cb","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'70373464713a90b87617d6ea9ff9f5f3d98bfe6548952bda7f560ee511fbe31e', 474, '{"database":2,"query":{"source-table":11},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'85594d7d07461c4c58d6048728f19655e187a70075346c1040dc01ee514d47a3', 564, '{"database":2,"query":{"source-table":13},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'988a9d5116f65cb76bef454481c8828ce4180a638d21481cdc9d7ed39877a89b', 314, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"],["=",["field",114,null],"Sidesub4"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c984067519a46e4515a440e7eee834702880864207ded7256c1e7e8ed9f613ca', 208, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["time-interval",["field",113,null],"current","day"],["=",["field",114,null],"Sidesub4"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6cbeb280d2aaca393aa5b172c4aa00f95823423a2d258f6b96c1c2cadf909a6a', 306, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'acdfc04f688807d348133c5456f38b58cdf808552c1f69727e990fe1bd403495', 80, '{"type":"native","native":{"query":"SELECT \"INCOME\".\"symbol\" AS \"symbol\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   AND (\"INCOME\".\"time\" >= DATE(DATETIME(''now''), ''start of month'')) AND (\"INCOME\".\"time\" < DATE(DATETIME(DATETIME(''now''), ''+1 months''), ''start of month'')) AND (\"INCOME\".\"account\" = ''Sidesub4'')\nGROUP BY \"INCOME\".\"symbol\"\nORDER BY \"sum\" ASC, \"INCOME\".\"symbol\" ASC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ac6012ae07ad3379addea645c57d7e50a61a9913e99d8f980625b4c1a8cac613', 103, '{"type":"native","native":{"query":"SELECT \"INCOME\".\"symbol\" AS \"symbol\", SUM(\"INCOME\".\"income\") AS \"sum\", *\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   AND (\"INCOME\".\"time\" >= DATE(DATETIME(''now''), ''start of month'')) AND (\"INCOME\".\"time\" < DATE(DATETIME(DATETIME(''now''), ''+1 months''), ''start of month'')) AND (\"INCOME\".\"account\" = ''Sidesub4'')\nGROUP BY \"INCOME\".\"symbol\"\nORDER BY \"sum\" ASC, \"INCOME\".\"symbol\" ASC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c9c8a0989426a566144251995573f767ad1b578356dce7afe69e8e91b368432a', 2970, '{"type":"native","native":{"query":"SELECT *\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   AND (\"INCOME\".\"time\" >= DATE(DATETIME(''now''), ''start of month'')) AND (\"INCOME\".\"time\" < DATE(DATETIME(DATETIME(''now''), ''+1 months''), ''start of month'')) AND (\"INCOME\".\"account\" = ''Sidesub4'')\n","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'cd0e01b2a0993c83c2d6af67a03ea5168da22fc2995b479d3a467b2c8c2e6d0b', 357, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["time-interval",["field",113,null],-1,"day"],["=",["field",114,null],"Sidesub4"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1a239e8210368cb8e1c02acb1cac620617877c39318b81878786e00116f9dbe0', 58, '{"database":2,"query":{"aggregation":[["sum",["field",55,null]]],"filter":["=",["field",54,null],"Sidesub4"],"source-table":7},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e985809efc8d60d68421c0db84c9987c8a49cc991ae3de167e5ce387cfd3c723', 646, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"async?":true,"cache-ttl":null}'),
(X'01fb8e2d0ac21ef78dbd1317e795ec343767a1ca258789504a0c3e6eb82f1f88', 190, '{"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"limit":10},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2354b7f7d58c66cce38ddaef36917ac84a712d028189cea45d931dc43fd43f8e', 827, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub4"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9baf5ce861a2fc2ee0ff8c14aa8f73da29c76a07c0c59e2217dbbb570d5079be', 110, '{"type":"query","query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["=",["field",114,null],"Sidesub4"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'03f67fedb9180181aa60d86f1c45fb55d3ba3278fdf8762cdeb80f38b260ba65', 797, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["=",["field",114,null],"Sidesub4"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"async?":true,"cache-ttl":null}'),
(X'f84a2eb79a40396a2cd934395577c20cbe9810649e8ec7576408a8bf336767ae', 197, '{"type":"query","query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e05d2fc9c1a47e1b7a4f83b2f517f09752e9c78dbdbaa9f10eedc84e8fbe525a', 1072, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'8dfc99a9178346c7b04fe3b9ed9d2a874adf359fa1a855985e1b178bd6ea565b', 946, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'd7aa54ab815000f39bef9ce94a9c6cae3c2c3cfcacc2a9c419b4918e1f1638cb', 229, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"hour"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["=",["field",113,{"temporal-unit":"day"}],"2023-07-15T00:00:00+04:00"],["=",["field",114,null],"Sidesub4"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6d534163576c236c61a5994cf73867bd66b9daa34939368f6b0fd76472727b62', 169, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"hour"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["between",["field",113,{"temporal-unit":"day"}],"2023-07-14T00:00:00+04:00","2023-07-16T00:00:00+04:00"],["=",["field",114,null],"Sidesub4"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'40c59062068f13742b32eecb830cedf554a956d628c6f9824801c399ec3d876d', 1137, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"hour"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["between",["field",113,{"temporal-unit":"day"}],"2023-07-13T00:00:00+04:00","2023-07-15T00:00:00+04:00"],["=",["field",114,null],"Sidesub4"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5cd119ff76a37aee484919c3e93f14e84528ce9264553d056778c665b1e20714', 370, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"minute"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub4"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd2e71b6cbb5c00f5b4557deefd65c4e88eb77400438fb3ce76e004856a4f1982', 173, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"hour"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["between",["field",113,{"temporal-unit":"day"}],"2023-07-13T00:00:00+04:00","2023-07-14T00:00:00+04:00"],["=",["field",114,null],"Sidesub4"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'cc6f04cf890c78b8bfe7d32ddd12620846d5c172804b6a80d7f4ce5debf93de9', 725, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":"Sidesub1","id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'd9597c06ddedfd6a0de00ec4da04c2ac6bf9ecbc31b78626fc5d4c0c232bab31', 317, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'c14f5d5ae395fa1a37e29fcc04a4199e0e95548c480d6593f000bc988aeb87be', 78, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-{{Days}} days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"463f5e5b-84d3-1dfb-ee6b-4cfe922de15c","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"463f5e5b-84d3-1dfb-ee6b-4cfe922de15c","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f11b57de4de76a054565c066cd5090a4c47c39a8aead368d83c576d314db6fc4', 41, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-'' +{{Days}} + '' days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"463f5e5b-84d3-1dfb-ee6b-4cfe922de15c","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"463f5e5b-84d3-1dfb-ee6b-4cfe922de15c","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'bf698c7fca6c5ca12888c1cc32b4e3b220e7f4cf7f1f5f4b5e5928292ee03ec7', 29, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-''.{{Days}}.'' days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"463f5e5b-84d3-1dfb-ee6b-4cfe922de15c","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"463f5e5b-84d3-1dfb-ee6b-4cfe922de15c","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'20fd6857daadc5b5c9587aa8be09f66c20a253acdfbc392f8f60451a70ba332a', 72, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-{{Days}} days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"category","value":"14","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9375ae4056e7807ba0213585321d952f7f10d89ff1690e2adb5bc62fe5d7dea0', 50, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), CONCAT(\"-\", {{Days}}, \" days\"))) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"category","value":"14","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'624e706353bd97e89460e969ba5ac248e59e5696c4503fd34d71cbbecc6b639b', 161, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"category","value":"14","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'edad1bca7c56a3cfa1dcc2e959d0fa37b2eafc7441cab619a9c393665cefb598', 60, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"category","value":"20","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'37e3e9a8050b11e2d2c995c50c933104c283c378fa4067b65d67ee00794b2d9c', 68, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number"}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["20"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9c8e7157b85f5f8d1b198611b4dbddb9fb9d6d306b01ead11d212e6a409474e7', 87, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["20"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5d045f436f024ccb248d65230ac142406cc4de2a3b0ac99a04511cbaa189aa03', 1191, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"async?":true,"cache-ttl":null}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c73318b3451aa1e976c913fc38abe3be05d9b6028e7e036e5a2af1a930140070', 1620, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'56205f70425a0408d8a85b4222dd600a5555d29febd76354dbcc8b6c930cddb5', 103, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'924ed6578ae3d4964605fa0a62d8aab053327b61e6a1be949c33c429adc3194e', 1284, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f8ef6a232533636d6e5a406b34680dbe96ad55c3a2dc56949077ee46b3e85293', 85, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'5d25d56ce641490682f24336f07965d71124adf50e54d24887c0d469315168a0', 83, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'772a26087ac460d74d80ff6e9d35b7ac21bace025826e403392b93096308606b', 12, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":[""],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'60b649757239245a76a467e306e019d0cf819c3fc213a6f8e0a5ed56e6659090', 11, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":[""],"target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'5fcfc630ab53a852e5091b6634c1d7163e52bdabb48987ffa71db36043e13ff4', 11, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":[""],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'de1c4f1f4f1c79844180ac2f2896b1004bb45b41ce350c435c532737c38d7a6e', 131, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'694fd077ab2a16c0ce289f28e5adfddb731ff5d28bab63213434e495e661f804', 51, '{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["20"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4a5a40761646c6a61b27d52d834b5752881b34bbe607c393a2770908bfb1ae22', 126, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'62fb0e44d95471bbf67d06bfac1f801a29019ae3e21cece2e5a2576fbc52a868', 64, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'33f5243ae774290866b965beedc690aec392ff3f605f5c2665c2fa2beeb6d918', 136, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b9315dfa276fe0e07ce76a8ee14bc4ce6918b569aace686b043c3e31be5fb478', 56, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'01a34219cd67e5cfc3313e0b5025db3b34423b2110f38a6dba234033c90dd32d', 810, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'7392df21df28685f014d81d27d35c093ddc3b4570f6dc728f4d56d80a1909c13', 876, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"number/=","value":["5"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'a5e4f72ceaf8549af2e63a0724e192360c808ae51f4f365a7f3f419ecbee3b9d', 735, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"number/=","value":["14"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'49bde19b22d63c7434054b33d7883a7851b3b9e8648a4fd0bf918e8047151944', 1001, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["14"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'579045d44eef50328a3dbe38083c6b10570b9d275eb663aabfb055a9e58b280e', 1014, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":"Sidesub4","id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["20"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'b280a39bd1a029d2f4a7db47a5c7e0b3dc4169d5ae778c360a2d1de07bde9540', 40, '{"type":"native","native":{"query":"Select * from BALANCE","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6e0c69f632e45b1a1c9cc036297744218938ad6e46e9559de37e3cc11a1624d0', 987, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'4a93b7eed098bce51355fcc0a4775d44e87076d570edf3464277913e901f326f', 1079, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["20"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'5fe22a8f802f22e0f39ca636a2752ff67fd954be93ed8d89b7a9606f5c190111', 825, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[20],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'8c5efcc84aab78b858c8ce4a187906379bc71f0779485723c343af846dd33306', 1208, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["14"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'1d0e8bdeda055ca365fdf093047a8c1acf53ef81950b239d02b546262d9211d6', 1430, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[14],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'8ea8ad7f7ec6fd2a4dfac964d1daf7644fc820800a893cb836909cd22498e7b0', 933, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"number/=","value":[14],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'2515f45f2da2ecab9e1df00974401b31083a3eb3dcf2feb90317f7fe36f10e0e', 3663, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["7"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'58a7d2a03b116d89c63daf5e5be7a10e8a629f5f9bc82e0f9ce7bad0587fb698', 3401, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[7],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'854e0c84d7e80dd0444407df433d2c23c3e11d55f429edb66663eb01ef0b8a2e', 3579, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'38c4742125d1c1c985bdff493481e3b60aa02023e0a53ade2ad0e4528519d649', 4084, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[7],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'90e080f6feefd0584171c3e6f79c67e54943022d4285f5fbc404d9ffc0a3288b', 851, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'6f5accbbdfb89dcaeccdd9b13f919a9ea21a629af1f1419b86d2492e050ed1bf', 3474, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[14],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9477a9ba59f65f24e45da788e5a83bf3c2fde6cc41c9be74a584fb3bdc01225e', 806, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'509303530acc2820b6beb9760977214b66ee2119f865ccaaa34924176f10de6f', 3412, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["3"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'410da67c992c72c8db9426dcc7600e42efc61d1a9c76157c84247525a5c35ef4', 3408, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[3],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'09f00fe81f0eb38b8d3602f849d68570afd3b885e03916bbf5eb940194bdd0b1', 1645, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[3],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'72b23f078aae7830e7f9de6d62b058150d444e11e98e37752ff4ee28615be9d3', 402, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'f2c87f254658046d7036f078e1172af38d69b5426839d0ecae473ed047188318', 237, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub4"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6271fd401019a6be89efe0e3ce181934c4e70e852810ff574824d9723c4ab130', 968, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8651513a5564dff37b3d920d62625f99771f9ded6dd0b0324a621c181352b41b', 78, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd9b47d44a2ddd0c9ebe563763bf7866b788fdb2458b93fc75fd9cbf4547b42fd', 138, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\"\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'64b634333e7be14996bed2260694f0d22bf925fd66fa7df4312c02064615f255', 46, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c90fc26d8868c4ef88b0089f49e9b2d24a9b1b786c4c506f69def48a4000e732', 883, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9c17fd3ae01d8c9cf350ed7a5e6824af56ea9df89ea367026062049bb1481d42', 109, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f0b4cc6b640a03b28f9c5f66f01ba8ce871080529bf17fdb56fa91d1236756af', 817, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'6a8fe6f0ee554babd3d922c4df81b047e722210fe944a445ba3eea4d4bb19bf4', 985, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'c99ab3b66cfc69e72c301a50f8ea7869145896af1851529bd88fdbc5cb7d2fe7', 926, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8715f27bdd6f788d9603ac40dbe172a835458757080c8c9ce1e96efe022db7c0', 772, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'5389abb8784cbadb5a6e1b45ca832b2bcb257a1cbb1bf9be5eb38a7fd5cd6812', 1019, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'302d502bad0a9c4ee5e75d1b5d846a3c66fe8d1da24c7d121480b951b82cb9e5', 442, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'91c5757ea196f756e8b14b9e773fbcddb56ad277e16cb6df64bec11bd4c174b4', 412, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'28c88faf8aca9eb656ff4537d94bbd05d13bc1b621030e0ec9c47e8aad8a345d', 772, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'aa256ae2749470474f2c5dfeebaf294f972146a8a7c74c84637767ccbb9a9349', 888, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'888839a86c9d7e4531ba63cc3abab4ad4da50621d3856d22333b9598de4b1ed0', 1079, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub2"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'd2d4de1812faa0e6fce15218bb1860eecca358b38d74818cdb44472dcef8d96e', 839, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd57a25b21081a520f55ea718f50cc8731823edc32b4f45a1ccb9d6147bf92171', 1042, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'ba76c3e9f3a689839197e32157cd6f707acb1ef83b20c03bb910c7a872856fa3', 958, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'cd6c0421301c394fb994e0bbc6bef579262aee3c14fc759b5afe24f4bb9bb78c', 1056, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'02b4562ea39bba0be37ceaa3c6ac85eb583570796ba9c7daa3680b1c7631c50e', 676, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["30"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5ecad27f11aa725f956e335893111c040a1b2a2162b400aa1d94007e130f1bb9', 443, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub4"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["25"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'ee651599009da6ec8e610a30c8ba487c90712adf8fb46a0f85fd464a0ef0b4dd', 395, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'a5798f4afbd727763029127f0819a15f8c1fdd89fb14a4fa03def8f13f515294', 262, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'3fe9be33d0e62768a296722b11ccc881fa7c5858d62a22385e3cf53082ccc3e6', 282, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'71f1153a7add4106ba53411fbe491f369cac3ff4ccdf92fd67be80f76ac49d57', 438, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'66b92fd6532032de55ba6d223123a72bd74ad300f9b7ced280fc2bfca999adf5', 679, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'b425780b68d6b9294b6407dd66b394d15528a557d48993c4c059b51f960cd716', 655, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd191e94deefd1df9969d5a053d4120e853d4ba7b4e4cda2476a8e1e4d4b62039', 264, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'22fb93149280eaf2c1969790142abb1276ab972a415438cb16dc5ec4a5f0d0ac', 296, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'3250aba03b5c2fbe015669460193265dd6384358d2f4cb5d1469765ccfd0f7b0', 393, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",54,null]]}],"async?":true,"cache-ttl":null}'),
(X'ccff426a887a57ffb0cebef8bec6fed789ff0af5ad560ae77c3932ffefec43f4', 245, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"database":2,"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c4f2210ab9214b055450764e31f7d9668d0b57e5ca6abf34d63b9f65585ac3b1', 625, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'9ce7510fb730e0e98e3b2fea5cb67fdcfb4b33e2347199844e74a86816e1698d', 590, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'd05a44dde33922f3831eb42195c6ddeed7ea90caa6af974fb8b521453566a07f', 233, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'da5485d02eabf649287e5f9abac4400700393855774535ac4cb8bfe3caa7df6d', 308, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"query","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"database":2,"query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"parameters":[{"type":"category","value":["Sidesub1,Sidesub3"],"id":"26dff5a5","target":["dimension",["field",50,null]]}],"async?":true,"cache-ttl":null}'),
(X'628398630871f4418c92894e090345df2723fdeaf03d8530a2f10b40d2bd9005', 33, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY [[INCOME.account]],date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'74439b1e6c805f5e43519020957ee7374d665ac45519701ca7a14fb88bfe5266', 179, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'fe8909fcc75350fa139cde50eaa70d974b810cd6072da683a75bcfbb1aecb015', 520, '{"database":2,"native":{"template-tags":{},"query":"INCOME.account"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'875bbc7bcb552a0ea003c77abaa96e5e02e84074a8b2e780223c8354171ba604', 133, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd60eb84231e7fe17d0684ae10e6f2f328f93c331eb7a7ce7ce1304a8cb2e7a9e', 188, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'acf791bf0cdbecbbe18c7d88668fe01c8eb94684c1fe6eade4f07e1fceca0f9e', 273, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       adg\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2d865e70912995ee0807039964b8fd30cac5b5c2b412f417b04936e787d66acb', 190, '{"database":2,"native":{"template-tags":{},"query":"AVG("},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c8d6983f3f5532c32ca397a5414e2eded6029fc2685da7d112cf716049c8a4c8', 201, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'fe2f066ef982dd35d7bc85c4228b7f1f6b3d64be772c3600eb61178babbe5f89', 811, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[20],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'fb7194fc2f0cdbb655c01173025cfe04d1d85b6b9068d8ea5768838b76907082', 1266, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[20],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'c6b1a0cc62a13a5a345e389ffb6153b4fab1efae2794df5ddd10945c91e9a16d', 373, '{"type":"query","query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["time-interval",["field",113,null],"current","day"],"order-by":[["asc",["aggregation",0]]],"source-table":14},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'361829326be7fdfc7eca4dc04e5828391fc363c699b90bf0ac7e16a8eb186550', 98, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4e79a1f121526c5f896caeef03c68386a364d26587725ab6d5512c471ff228bd', 596, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["time-interval",["field",113,null],"current","day"],["=",["field",114,null],"Sidesub3"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'bba68dcbbb1065ab80a9f8c610f916113c424d75b610745eb932f957667de3a3', 261, '{"type":"query","query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["=",["field",114,null],"Sidesub3"],"order-by":[["asc",["aggregation",0]]],"source-table":14},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3a1a1856d9971e241f3a82cac73d768d592e82a50f17152c21b732aac3a827e4', 300, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["=",["field",114,null],"Sidesub3","Sidesub4"],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9cb5350bb67743285bd642780a7c2776cfa47c4d63073d69bd79ea63f5da03ae', 501, '{"type":"query","query":{"source-table":14,"limit":10},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd15f248798a7224f91eda260b81a1cd9a1d7749daf6c8cb1f1b47abf53cebb6d', 596, '{"database":2,"query":{"filter":["and",["time-interval",["field",113,null],"current","day"],["=",["field",114,null],"Sidesub3"]],"source-table":14,"limit":10},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4a5785ed4427e827a4acf801e41f53c27a8120702f19e18d713984e92bb98cd9', 60, '{"type":"native","native":{"query":"SELECT \"INCOME\".\"symbol\" AS \"symbol\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE (\"INCOME\".\"time\" >= DATE(DATETIME(''now'')))\n   AND (\"INCOME\".\"time\" < DATE(DATETIME(DATETIME(''now''), ''+1 days''))) AND (\"INCOME\".\"account\" = ''Sidesub3'')\nGROUP BY \"INCOME\".\"symbol\"\nORDER BY \"sum\" ASC, \"INCOME\".\"symbol\" ASC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'cfe36aa6978f3e6318ca89c632a5df4b285730ae5e14d0993e890f36924f65b9', 1376, '{"database":2,"query":{"source-table":14,"order-by":[["asc",["field",113,null]]]},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6d032ec47568de315c9b103a4ed0e4f9a1b1a006dcb7d49a1f26edb9592e3f55', 1410, '{"database":2,"query":{"source-table":14,"order-by":[["desc",["field",113,null]]]},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'798976497b03a14280bccc39ba14445778a0bdfc6ba8f889c05b726697333dea', 72, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by account, year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a2f1636f1bb4950e83dac9f8978ad7fa68196c1f44d86fa23b778fdf561013b7', 92, '{"type":"native","native":{"query":"SELECT account, format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by account, year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c40e7551bf545bfea3a32413ae61f888d5fbd83428714294ffee3af35f82beb9', 60, '{"type":"native","native":{"query":"SELECT account, format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by account, \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a88a576d728966dd012ab9f61a56587117dfe3f4f719a82df8f0754530500527', 85, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by account, \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f8dc0158efe1575dec7a3f6ceb59b6272a5159aeaff5b75289cefb5f003f7f44', 388, '{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", avg(sum(adg))\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by account, \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd12678a4ea62df176ce8a436e2bc150f113e5cc93ad33840f2d1334dc4bc73d9', 100, '{"type":"native","native":{"query":"Select \"date\" as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"date\"\r\norder by \"date\"\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c19a4d3449b3c83b3f7f8b7cf0449719e95c33a61321b90d312e41f125096d9c', 50, '{"type":"native","native":{"query":"Select \"date\" as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"date\"\r\norder by \"date\"\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8dc043f1896957ae06a3fc1fea7e39bf30acbb2b0f16bc462fab2c29b706b752', 61, '{"type":"native","native":{"query":"Select \"date\" as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"date\"\r\norder by \"date\"\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ce8c638efd7e9937a0ea97e4c4511fe4684a07b3230506c7bb35c806370a3869', 48, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"date\" as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e316b98303a8dceb77345c57de11c63d21392cdd052d588f242cebae06f01ac9', 99, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"date\" as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'77d0e0d3c5a81436dab8858ce404a02ee28736ef6e3e4c4a5580fd8adb3a6941', 78, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'113e982da3492aa7e2ec7d67da3d6a0fb55e26c719ef69ef54589e7c91035d9e', 32, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'643868bdc0a39265f9d620c5132c1497a58053808672344cbb581e6458587d20', 50, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'76fe25096e3996332d95eca228f0650f862ebf4715ad1214053d7e47f19788b3', 40, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'de4b2677e5d032bf9f4f9bb2daf2820e1e14516ec591dee1a9dc5a951b22654f', 120, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub2","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ee547bfb2c55e7e2ffe91eb2495d3709fe60a0f841198519abe91004d72dea58', 446, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'a0460f6588d997f0c92bf548bddfaa36d9195ddd69cb491cc5ab80a9d575800c', 1025, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5a496852c8102f543ec9a5db2c9556c7abd8472f830d59cce28dcdb2871e0d54', 780, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'2151221f42feeb0e19a0af1b1b3e266712c5438041681648c863312ea83e7a08', 81, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE totalWalletBalance > 1\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'63b1e60979a6ae122277c8162861c22b27d050c28bda80ddcd681934b7e6d485', 125, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE totalWalletBalance > 1\r\n        [[AND INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5fc78125d020693e8b504cfc4098b98367a07097a9ed38e539d47f4620acd7c9', 89, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE totalWalletBalance > 0\r\n        [[AND INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'962d28cbb058225386d52dc9458692b88c94face9ea61974da3ba7a95f680550', 122, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE totalWalletBalance > 0.2\r\n        [[AND INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'5d1fcce28de628ce322e2f621273d2698d181af4e46df5c5a50822252c3d2d59', 40, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE totalWalletBalance > 1\r\n        [[AND INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c7181826bb369ae8a40def916a40d83a0c7ff8587950213448c9d2b720a2692f', 31, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'737a3d1bd1f5586dbec9032a1c8fff2e0806cf52d72a694dcb5135ff883c8a97', 126, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'eb2c0a1174a6db398061e175ac985cc4d44d35488773cc4c3a4efabc3d6dcdfd', 39, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (INCOME.income > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'df5fcbf6a083bf7037b2eb7db23ded41d81951445dbdad056dd9c5d2d270b789', 170, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (INCOME.income > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'892f1bc17e3cd01bf29a8b2d8063a15b70cd76b566e1fdb65abda5737ab75c66', 19, '{"type":"native","native":{"query":"income > 1","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ad8722017b1d0a1f8893f20a3d7a86987fd9208399afadd0a6c7c8fbaeeb30fc', 81, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (adg <> 0 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9289a87af19341b627f0da47968ece9e188f44cfbfd951a635fa978d337074cb', 160, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (adg != 0 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2a04fcaa43db6c9829d8258b5fda4e6b2025d6d6ab66f0712a94818247d42130', 181, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (INCOME.income != 0 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'69435ba2697ce1eaae3cbc3c89827bb779eb4f34301ab3637517fbcaabff5809', 61, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (INCOME.income != 0 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0f034bf791a78757819e1bbd28ea76fc14a2c40793882c8922f46ec8684633c9', 46, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (INCOME.income != 0 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'edfbb0e18f605765f7067fdaf09845e0f3206c9039366dbaa6002eeeb3f65d0d', 120, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (INCOME.income != 0 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c09fcff13858657f3c56f293ba17609d8b0f4fac13c49cf940c2f134b86870ac', 131, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 0 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3905975cd477fba630df8794e39ebd0d1b66ab5badd863975cb00528be523597', 1274, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'e14416fddbfe8b65973899ee172581901543896589ebd3cc67d7f98a854c084c', 31, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(''now''), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'cba789d31f82ad22a282ea1fcb85dc11f913793876fc76283c1552edd957d37f', 42, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(''now'', \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'02d8c85351d4076329cc444fd5d2a0bf474bac29a0442559f785547fb905259c', 29, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'397fbe0c2e1400b6d27ff36cc69051b832a60836a415f5f1ce356b5ff196f9c6', 40, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(''now'', \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'92e6d443e1488c05f07ba45da950ef1c8351cb87e7d8e629055f1cb4c20d35b8', 99, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(''now'', \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(''now'', ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f0527fadaf6bc520dd705fbc03b7d41c3056f548ce10a9801ab0208d23df3458', 40, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(''now'', \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ab89130b7ac6f42f845acf08fb641e77b7073dafdfa5ee6422fe05e6643fc5bb', 77, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'5ce1d85d8a087cb8fe7446426759174dada8675d9a8258c690ad09fb0414eddf', 44, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ac428245fc02dc897e8c14f07c9b8c20ad908be5beab9bb2d5dbf0fcdf3bc9f1', 42, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2425f09e7b1bda665e2fee8af7a5816c2bfdd5012de60ba2366d988a7c499a79', 36, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'bce99037836004b9b8c91d6897f3312ad53c3d7999b0081b966e90cad6aaa1a7', 42, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date((''now'', ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b758e1448badac08706316eb5401babbc0c723927d3472d81dd8d0fbea651dc1', 108, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ef05b6939d833a60560e2986972d30ed89784b1fecde469c3063098b018b99f7', 109, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'93439e0f2a626a9856ec2c778b653c20329be14453431a19dfba65a1824e5a00', 41, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       account,\r\n       avg,\r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e567f7034517dd3a22ad26d9be4845f8c22345ca18b700fc3ad95850c68f0a3a', 121, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       account,\r\n       adg,\r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1b33f1400d31063507e2726487a51fd7b910805d6adae42103783c1fcfe5e5f5', 33, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       adg,\r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'33a8dafb8bc95652330307787c8630aa22c85e9d3fa698997169e22ff26bf1ca', 71, '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"/*\r\nSELECT time, \r\n       adg,\r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC\r\n\r\n*/\r\n\r\nSELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'486ea6c9316d82c3c531d1f73480e5ba42c87ba90c2fd46812f7e5c5da7e092a', 77, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'bb85f6f322bed4b9bec1c7fc430362c881d2ef3a6bcc40579c6d04b5d3cc9a1f', 788, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"async?":true,"cache-ttl":null}'),
(X'58a16d841bbfacc02d8f3723abbd8a86dde97966537e37cd9ff4e6d316df28aa', 121, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":true,"process-viz-settings?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'3354f547b15e8490e3725e01b3452e692350609d32ab985075f14c8861ec027a', 1051, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'caca0a46669a679fa093b629d8a7185a4f6f41cf8bdec225e614b41944525bd4', 1047, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'd13f49ed64e55c5edb870f587819ddd7b9e7753187a0ce2719bbcee062de43cb', 1152, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'7922b1665439e3f080ad3da46e371f7face3c7667569961fe7d281af710769de', 1001, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'408f0d6b1805f2ed7bb842812d73d82bfe7322c7ab771736a338c4918ed67289', 131, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'fac5da1f61bf39ae581196e6c544ff5bd028e60e6a5e5aa05b53a4b3fc3bf37e', 72, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'31973b97ae88064a69fd518fdf3bda93f81d627dd37e671fcbede6233e443ae0', 130, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'21c865037abfc5f7ce377e4bc38a95c3b42c3b11d68c26bd72280a325ebc0e8c', 82, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b37bade4338e03854d7ed8ce1edafac5888525ce47cda77af7d856e2698f61ac', 80, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c0ff8964d5e256acee9a845dd4361b6a49060c96a048cef276c6525796ae3051', 11, '{"type":"native","native":{"query":"group","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'90acdd8ffca7aa4658bb7518726c238c5100a664bfa8d0f37a7adbd52e0b9576', 90, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'146da1dede4a93b1519969808052a8916390bc27576d4fd40ba2c62f1c933fa5', 147, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'0ea6c51eca9e2d70e6f38018538dcd5c94446438f46eb416ec5b8e249bb688ac', 230, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7d3e95b615fd9d613a584ff22d3e92b09bf0192359c6638185193b259f6c38b8', 22, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , --100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e5e384450b5e6462c40f704eb38d6af52c34f8748decaf08301fdc0df73af320', 1406, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month --, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a081502416cddc0713966084036f5fe812fab16b9af1bb8743db6768f79c2974', 5633, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, income.time --, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f6d2ba9d457014c133301714dde9847fda646f0bb01fdaeb0276189ad71518bb', 3725, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, income.time --, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a2ef2397dcd6ab8c7ebae678c252eceb13f2f714cd080decfabdb73559dd5514', 2722, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, income.time --, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n)\r\n--group by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'c95123d60e39f60c713d652a8ec2a1a6a3580b5b185781f0fc6800a1fbc1c7f2', 11, '{"type":"native","native":{"query":"month","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'411c60cfb792b0a3298e8a7e0f67c83848c45fa57d6f43e05a7d341c8e6fe4ee', 1859, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, income.time --, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3fa9c7dbba15bf82309ed92a0253f812d6ecbb66cc38b9421a069ac2b21a76d5', 1266, '{"type":"native","native":{"query":"--Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nselect *\r\nFROM (\r\n    --SELECT account, year, month, sum(adg) as sadg\r\n    select *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, income.time --, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        --WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        --group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\n--group by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'1a8b3384291331526ff5098cc17c85e1edf6c37eb60887d84ffd56e62d8e7ef3', 79, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'875f6bd6e4250dab618817348e83eb0cd6ffc104c9e8e28f90fbbbb85c955505', 126, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\nSELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2080565ec6ed3e911d0a87173e8cd47c2c28b30a3de4408a8dadfe5248a2010d', 190, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\n\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'7de8243c1c544dfb0cda5c4cdfa78e99e417e4f2ff39430c2d61dcfc6729cbbc', 81, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\n\r\nSELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'947a90259f67f73c1573dc6310eef663dbaa67a69cc347e8c3a79f87140b286c', 79, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\n\r\nSELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'466b7b6674aa591ac4332bc52e40ff492cf04648839e14f20aa89af37c26a050', 91, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\n\r\nSELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    order by year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'784b77a7e9c23ef39be091b7f5c68b1cfd2513d7f4acd45d4212d13e04ac0147', 119, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\n\r\nSELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    --order by year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b73faa232b82d0f250e97f7d1744baed02a9bf6e937497f32d2ce7ec3dc3d9e6', 49, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\n\r\n--SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    --order by year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9e7592dd3c8942a5a8f130eaac29823482a22ec70cc02debcbf182aa71636cf9', 161, '{"type":"native","native":{"query":"/*\r\nSelect format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n*/\r\n\r\n\r\n--SELECT account, year, month, sum(adg) as sadg\r\nselect *\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    --[[WHERE account = {{Account}}]]\r\n    --group by account, \"date\"\r\n    --order by year ASC, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'4920b423e90ad8fafb977643bf18473372024a93b51de0a82f9c41c650b87c1c', 62, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, year ASC, month ASC\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f7173066d14b51d3b3e235bd6cf85270f8723c885dd413f9e588e3609a882bba', 83, '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, year, month\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","value":["Sidesub1"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'63c2a3f56cefa663e264080a7a8de7da89c7554440cf9d4ca3f54fa4e3ed0574', 3119, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, year, month\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'793aa48dcdb270039b1eccc2150359f948f930b6d22e4adc787129f553ede62d', 5256, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, year, month\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'8d58083bffc7b89bd8bebc730ccd462af30a05bbda429a28f8a2623e9cc8d7b9', 3587, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, year, month\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'556ef83469f11bb53b000dec8a52a40a5a2e5dd5299e352304458e63fb2b4994', 259, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub3"]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3dd7dc386acec95b9b3c51d89bee5df526f16af8118c529e3dcdeb0be2dfceaf', 273, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["expression","pivot-grouping"]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub3"]],"source-table":14,"expressions":{"pivot-grouping":["abs",1]}},"type":"query","pivot-rows":[0],"async?":true}'),
(X'42c8cd35c1f6de1f2c2a2d7e87d86a875a2de29b445cf2bf4f79e3972ee1505f', 101, '{"type":"query","query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"minute-of-hour"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub3"]],"source-table":14},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'2b72ed877f4222e055c3a95c406d2854f7d22e64081d53740185578e41edd888', 444, '{"type":"query","query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"minute"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub3"]],"source-table":14},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'533185028aa22bf369020dc973094fe15775fb58a8d12ef24ab18a9d9f98782d', 128, '{"type":"query","query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"quarter"}]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}],["=",["field",114,null],"Sidesub3"]],"source-table":14},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'664eb76f627f807f5a09d47ab4dd86eb372b742ee95071688ab3fc432583196a', 15, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND (\"INCOME\".\"time\" >= DATE(''now'', ''-'' + {{Days}} '' days'')]] AND (\"INCOME\".\"time\" < DATE(''now'', ''+1 days'')))\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b7138571f09565e38b1b0409e80df2047156f7e51e2a13766c247348a6050ab0', 40, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' + {{Days}} '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4cb58368f6b97d21c3fdb87b0e68940e1f6838042186742283e07cc2dd910ae1', 20, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' + {{Days}} '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"category","value":"5","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6501876398a2cad7f2bb9494ef606f53f03aa70ad1682b87ffb68458be6818cd', 39, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"category","value":"5","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e6e6fd410be315863d820f71152592bc0b70f9981d9ad2266c652d44d696c48d', 50, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"category","value":"14","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4102da15c639e2d4632d177c2be98004d1b15e1326557745d9df7f31e74a922a', 40, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"category","value":"30","target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1ec9a12a38f17f55085e6993b5af0cd8d7c5c154ab519abbaa4740dbd00bc54b', 148, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'd016e4d4833f019f8913e38ed1ed109c25c181bb65f76428c26c0e024f390fb7', 41, '{"database":2,"native":{"template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC"},"type":"native","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'19d344d27ae5abccf2169204081f2f30572e5343a03155a0ff79249f4c317589', 48, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n   [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'851d536a4765191fa8ad27513a2fcddb08baafe6c3b963e9e605c73269385ba1', 40, '{"type":"native","native":{"query":"Select *\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'3fc6aa0fcde712326967b93c7a8619158d85af91b15436a8beb4644484174c4b', 29, '{"type":"native","native":{"query":"Select time as \"Date\", \"sum\", as pnl\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9ac0a94eb305b7f668e24ad816578ee04fa8b1a948b56f598015ddc85570cd2c', 39, '{"type":"native","native":{"query":"Select time as \"Date\", \"sum\" as pnl\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ff7922eb5328413f44fd46062f5bb5fb149ec0df2e05c828d50894196cab23a7', 30, '{"type":"native","native":{"query":"Select time as \"Date\", \"sum\" as PnL\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"time\", SUM(\"INCOME\".\"income\") AS \"sum\"\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4017be21fe64fe5e7cc5ede16738433ffae897bb8a3c2e5633debfd99ebd6427', 30, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL, sum(PnL) OVER (ORDER BY Date) AS \"Total PnL\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n    [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c10a06ce3b4981b5f93e8cd9fe2fe61da60ee56a1ac2cf8c44ed349398823e53', 32, '{"type":"native","native":{"query":"Date","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'146dd519e6abe986bd34768d1d5207de7125711d96e6d1e6e8931345b9823dd2', 12, '{"type":"native","native":{"query":"SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL, sum(PnL) OVER (ORDER BY INCOME.time) AS \"Total PnL\"\nFROM \"INCOME\"\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n    OR (\"INCOME\".\"incomeType\" IS NULL))\n    [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\nGROUP BY DATE(\"INCOME\".\"time\")\nORDER BY DATE(\"INCOME\".\"time\") ASC","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'4c00e2055a3bb20913e2380dbd5e04cb5212240e542eb86c0ea089706e4708b4', 79, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) OVER (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'fcbacee66d7e849f589f2632e67a252346cdc6adbfb2a8a4a59be5958c1129ce', 31, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["12"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'77f053b5be3be595461e94d2ac198e444f9a55910f2ccebf9c126c60a54c5a36', 1099, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"async?":true,"cache-ttl":null}');   
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a60fe5bbd266b4237a4f6b47afb896db9b6046c81e621109334fcad1308df3d2', 937, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'86a7f9f22896aeaab26a0f784c4ca0ba453e87b1687c6d2198106050b5a7f1c8', 741, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'0461633b4ab1761e0a8751488ac8197545f77e7fbd5c8ae8a9570f0692cd19d3', 282, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'd615a86b06df8898fa5d98d2d2728b270438a589b42d89467f3ee4dae5fbe3a5', 41, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'69bf52cdf833866e68e4097822808c3ba6525be4d6cb8533deffcc5240e0a990', 41, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'589eda9203d7f8c0c58ecf22e512427964396255e55c7e9f7fa6f230a7cc0791', 31, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","value":"Sidesub3","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'a43cf392b71d57f1473921005f3f0cd4d85129416757269b40e16a4739531779', 30, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","value":"Sidesub4","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9595bcb5e55c840f2f4b0a890d7da395d26bbf77a98a208bf26c60105742e88a', 28, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["5"],"target":["variable",["template-tag","Days"]]},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');     
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'084deefb2716f7655e49032e4d78ef63c4c96b43dfd2e4760a09c2463c426573', 32, '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","value":"Sidesub1","target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'19ab0cbe5ad43527eb34ea41f97fde76b4b6dd2e6c1dae6f987cddc7adaeee71', 830, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"async?":true,"cache-ttl":null}'),
(X'9344cc7c23bf8ffbe659440384ea4f420e58fcd723962fee92d666d1a58b2660', 763, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["dimension",["field",114,null]]}],"async?":true,"cache-ttl":null}'),
(X'1f735bc7420f9bb746fd171549a00da7047dd75f7dc29a237b4061c8ee0ef1cd', 1284, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"number/=","value":["6"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b47663c54941f4c46f93779fcfefe783c99eeeb6b80fc94d6abf3d246fed01f4', 723, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"number/=","value":["6"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'f49449b03d0d811f17e3c0babbdc78328e0dd0b93923cc07d34a8f2fa5d79cb2', 424, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["6"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'cbff6a9e0baafb452c4fdb4a57b31de6a2c01f289a547593f39d418bd04422ce', 502, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["6"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'9d742897dd6917ac80aa63dc9f99ca7373ad1002f430f0be31d2398d9782f9bd', 210, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["=",["field",114,null],"Sidesub1"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e0516678bfcfbc29bdc2a05b4a237d0e2a0f5944348c6dc9bc4878bbbdb56ffe', 759, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[6],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'ccc2f7309028c644bba2ce9d38cbb85d482a5a0405c5bc80b63455213fa4bf0f', 693, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[6],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'd621806c4f3be9cf307c8f73e40dd86e670ba0ff602f2c297b57c2b9bf1ac3aa', 151, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"],["=",["field",114,null],"Sidesub1"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'da26f7889d370d703348bad0f97f3bc973c26d951e38fb43913c3aa16532679c', 934, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'8b890ee8d70dae1fa8fe50da26ad1ae42d2b5aa8f3bc88c2fce3bb2ea4401f06', 128, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","value":["14"],"target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'dc3b2f8ee70735c343e64c01c0c1cfd0b46fe3fc0b711bb38a57116d3877aecb', 810, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}'),
(X'9d6df88538c76baee792fd8d348bc57be87567a4862a8b2b9663d20ae84c7e92', 231, '{"database":2,"query":{"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"filter":["and",["time-interval",["field",113,null],-1,"day"],["=",["field",114,null],"Sidesub3"]],"order-by":[["asc",["aggregation",0]]],"source-table":14},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');          
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'b84ff891bbc31c642e34764fd8c6b878ad46a8c90f11ecc047aa2a5f48f85ce1', 596, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["20"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'e19f13ba87edd6ff77ce7a07e9178517597ac3fe949f12ad71bb29c60a59b119', 754, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["20"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'0477a0b42861e157910271c671e1ee41c288ae460785f1d4c3e7403312879913', 725, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["20"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'4624dcdb7a5cda812e11cb7fd98dd86280418c1fa7292791fb4512dfbfe04312', 954, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["20"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'169ead391ce5278f5c19bed2d76a221c391300c8cb0581c15541c5f147114761', 842, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[20],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'1cf990a32aaca6185e2696b227943e08aec29f205c9ef8ab4d658b6a55774aea', 701, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[20],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'0ef5007038bafa1242807c3724cd586ecf22b6124ce4e7558a7afdb1dcc29371', 1580, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[20],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'868ef131ed5456f7c2a6f89e72c7cd8202f8c570e682fe262d571b3f9997a77e', 1389, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[20],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'662ff3ead865726c0a980c108f1079859a7fef14679439d5a1aac15e064e0a0e', 1064, '{"database":2,"query":{"aggregation":[["sum",["field",55,null]]],"filter":["=",["field",54,null],"Sidesub3"],"source-table":7},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1365ae15a7d48efa3a2b722e1bc5b245f82f15189e75a64c4f09169c46630747', 83, '{"type":"native","native":{"query":"SELECT *\nFROM \"BALANCE\"\nWHERE \"BALANCE\".\"account\" = ''Sidesub3''","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'ad0a92a165288c1eb68b673d99252de0185156784434600a8ca247c28d717d39', 116, '{"type":"native","native":{"query":"SELECT *\nFROM \"DAILY_BALANCE\"\nWHERE \"account\" = ''Sidesub3''","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'24f9cdb47edda7e26d3a3f0555e4b3dbf8682ce8665353e33d16d59a2c5f83b7', 2289, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["30"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'fe62b1ff782cfc13dc9d38a7c0158c0d4da9c6ca856b8e6ce7037eb5c0d549fe', 2582, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["30"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'b5e6bf8ed8e1f5b91236eab66e3406c80c383dbe908d83cb9b412dea1a8d06d1', 1427, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[30],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e9537328e59535695c53136111431dc45896cc50f2967f18a3cf5b2d3d73ae47', 1417, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[30],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'b7821495d0bf621b0435a4d2f130303986bae2c8864b8683fbd68578cc0b327a', 601, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[30],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'b799b0e82029f93059d89ff3036184242e6500edb62969b03d61520df754ebce', 700, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[30],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');            
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'0ce905e1bfdc465787b04f3726e99bd9f31dc035faf576dac64055bea9eb798b', 305, '{"database":2,"query":{"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"filter":["and",["time-interval",["field",49,null],-30,"day",{"include-current":false}],["=",["field",50,null],"Sidesub3"]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]],"source-table":6},"type":"query","middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'b716160dd7b04c40abd2bd210857f024a5af57a8b1acd0d08ed5cbacf8a2d81b', 26, '{"type":"native","native":{"query":"SELECT DATE(\"DAILY_BALANCE\".\"day\") AS \"day\", SUM(\"DAILY_BALANCE\".\"totalWalletBalance\") AS \"sum\"\nFROM \"DAILY_BALANCE\"\nWHERE (\"DAILY_BALANCE\".\"day\" >= DATE(DATETIME(DATETIME(''now''), ''-30 days'')))\n   AND (\"DAILY_BALANCE\".\"day\" < DATE(DATETIME(''now''))) AND (\"DAILY_BALANCE\".\"account\" = ''Sidesub3'')\nGROUP BY DATE(\"DAILY_BALANCE\".\"day\")\nORDER BY DATE(\"DAILY_BALANCE\".\"day\") DESC","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'1b26a77890be4c49d83f09ee0f0d19c359141d576c4c1a949f9789835aefe323', 100, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false,"process-viz-settings?":false},"native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub3"],"target":["variable",["template-tag","Account"]]}],"async?":true,"cache-ttl":null}');               
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'30b603a78d488f69e8c7e130e62470124f1a02109e220fdd07c8315d93cfc049', 91, '{"type":"native","native":{"query":"select * --symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub3"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e19d9a56d5a9d1e399a7c13af4beb500ea70375a11c659c528a727a4cee6acb6', 190, '{"type":"native","native":{"query":"select * --symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               --GROUP BY POSITION.symbol, POSITION.account) as e\n               as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub3"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e91c8d72256f09ca8f226e693819f6c02e10acce2ed6873cd110ee39f1a66be6', 73, '{"type":"native","native":{"query":"select * --symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               --GROUP BY POSITION.symbol, POSITION.account) as e\n               ) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub3"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'830669105f9e738f30c4719745c4c992c99a93346f97a33e46b0ef9718261439', 98, '{"type":"native","native":{"query":"select * --symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                     -- group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      --group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               --GROUP BY POSITION.symbol, POSITION.account) as e\n               ) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","value":["Sidesub3"],"target":["variable",["template-tag","Account"]]}],"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');    
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'516632afd660d184f5753294cbd8b9a81c556e8a2115adbaf788534deb406962', 38, '{"type":"native","native":{"query":"SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7858984fafae0b1774eebdbdc04a00a2836e0df07aca0da970b6da5bca760f86', 89, '{"type":"native","native":{"query":"select * --symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                     -- group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      --group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               --GROUP BY POSITION.symbol, POSITION.account) as e\n               ) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"27c3b82e-3292-3d80-a8dc-85934a071b5e","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"bca5309a-df82-1dbe-b1b0-0e6977f3d0ee","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'8c97447ce7423891011c92da92de42b351112d219a639d306a629c115b93cdce', 32, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                     -- group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      --group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               --GROUP BY POSITION.symbol, POSITION.account) as e\n               ) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"27c3b82e-3292-3d80-a8dc-85934a071b5e","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"bca5309a-df82-1dbe-b1b0-0e6977f3d0ee","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ffda121d7dda02bc175120bea8a6d4f40756b21c1c0b4ad02e58e83161fb6b67', 49, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                     group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      --group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               --GROUP BY POSITION.symbol, POSITION.account) as e\n               ) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"27c3b82e-3292-3d80-a8dc-85934a071b5e","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"bca5309a-df82-1dbe-b1b0-0e6977f3d0ee","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'e7d15fc00fe3c39e9354ca85c23fe0ec3ee368305348001443a5ece972758752', 60, '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select *, p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                     group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      --group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\n               --) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"27c3b82e-3292-3d80-a8dc-85934a071b5e","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"bca5309a-df82-1dbe-b1b0-0e6977f3d0ee","name":"Account","display-name":"Account","type":"text"}}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');        
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'73403e87671f0e67859503ee66a79cc4cd1d6efdbd0e2dc5548856eca75ee1fe', 28, '{"type":"native","native":{"query":"SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'7d94aef4f6b0426b2fda032e36b50b492b178b2343453f6307813bd6805fda31', 20, '{"type":"native","native":{"query":"SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n                    AND POSITION.symbol = ''TRBUSDT''\n               --GROUP BY POSITION.symbol, POSITION.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'2630e04d4cbdb4203e5273f7e80634c397f706f5ae214aeec6b162f1db5a78d3', 26, '{"type":"native","native":{"query":"SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account, *\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n                    AND POSITION.symbol = ''TRBUSDT''\n               --GROUP BY POSITION.symbol, POSITION.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'6a7fef0c3992c866a3fb9340add5cf1dd4290c76a6b833080a8ee632ed9be413', 31, '{"type":"native","native":{"query":"SELECT  POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account, *\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n                    AND POSITION.symbol = ''TRBUSDT''\n               --GROUP BY POSITION.symbol, POSITION.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'249a7d75070e5d5486c2c52a546a6b54a72b2be2bcdfc22a1ea041bcd8c1b417', 29, '{"type":"native","native":{"query":"SELECT  *\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n                    AND POSITION.symbol = ''TRBUSDT''\n               --GROUP BY POSITION.symbol, POSITION.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'9f4b091fc9566b4142ba89082004c11f0e6be1bb50cc96bf593b7b58dc4c1e84', 21, '{"type":"native","native":{"query":"SELECT  *\n                   FROM POSITION\n                  WHERE 1=1\n                    AND POSITION.side = ''SHORT''\n                    AND POSITION.symbol = ''TRBUSDT''\n               --GROUP BY POSITION.symbol, POSITION.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}'),
(X'f5654bd3d3c043f84409cb5a5ad33d3e08b17eab2afaf81895a85dd784132109', 66, '{"type":"native","native":{"query":"SELECT  *\n                   FROM POSITION\n                  WHERE 1=1\n                    AND POSITION.side = ''SHORT''\n                   -- AND POSITION.symbol = ''TRBUSDT''\n               --GROUP BY POSITION.symbol, POSITION.account","template-tags":{}},"database":2,"middleware":{"js-int-to-string?":true,"add-default-userland-constraints?":true}}');           
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'c65c8f85c977adf5ae83f5d15a4a5ac59ff469d111f6188d0b390eb9b0907356', 1286, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["60"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'd618a077617edd2bf320234a564cef3f2d256a605800a15a2ef2de51878875e7', 923, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["60"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'3054bba18658258345a0f5e1c43415cdaba59b0b7aa4d39aaafbd768e54ed4f7', 604, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["60"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'ccdb4e52f110ec02a597f698ce46b9695270072203bfc9332b82fb0be12c9e1c', 542, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["60"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'791f871eecd1fe7d179f1a34c71c359bc998ce230ccf7820b8678c3a32e1546c', 1283, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[60],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'b53e4e4f7dda5fd8397203f1a99b22f5b16a6e0046d5c332b58b5433ff57184c', 1055, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[60],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');         
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'039f954dc0ca0ccceddf2e0e5e719ce8f56ac6f5d907d2881738957f386afcc2', 874, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[60],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'1d9f96f9bf5c6c03980982431b6ca34955c78b396da8a0084c0c98aa304b75de', 1026, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[60],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'c034128807506fabff6bb5337109d960010ac3c84cf0c7dac53ced4fb19fc424', 623, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["30"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');  
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8b54c7ae1321ab1d7569a93e0f1517434a834b1238f6adb4b90c77dbd3cb179a', 553, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["30"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'8f5e8658d1e5dbf56e6e1a635c9eefff63e477d5a6d8a49ca75f638b550f6227', 714, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["25"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'646bc36c59576e9db99a028d32e78dc1236a2547c2ed42862ae4b0a88411fd62', 1080, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["25"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');      
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'8a4e10efd27bd6ff441d919b2a2f7e56eeb0ab9ff0bab817e5dc541aa4dafc05', 732, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["100"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'8ea863d992cd1cfe16a60b44b1298cf9cf81f6e0c91e5412b06631db56bd0acc', 894, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["100"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'6cda196a172874a232f6222e07c870cf7f501a4f7585d5ed3d522007cc798261', 1415, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[100],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');             
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'a5f16b580d33e189a0010b85036b6c5c920f3ab125f9b455c3749f9a1e5ff4e3', 1238, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[100],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'3202f642f37dfad9b3be44520491549aafc96a725b25402e7f154cea54453993', 1111, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[100],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'9ffa333169b0eda3df2a99c6d34be396a78cdacd399c281e721a442699f865af', 1044, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[100],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'45c1a366e72928167e3f7a54a5f9a77e2da5b344b0b66f5ffcadae410438c3a7', 925, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["120"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'0a861b8e4cad4e56cada70c6905047d7ec5a9f76d578a74a57663c6b8dc9d533', 944, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["120"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'f454bc4acca79f68caa856286907d5426b8d89b7d987062726c8929869a203bd', 995, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[120],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');              
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'e211394884cc58947b2b0d3a07f4d90a98d9999db7ab768a21fd1767f9defec3', 1263, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[120],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'3bba60c93821270e48ae2ff0e7c217c9d4da693181f8087ed161e880c4c0539d', 1235, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[120],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'b942c40f4ca51bd0964826563b3d3beb781fd3656bc63fe989ffe445c8d78955', 1265, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[120],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');       
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'd5d938d627c8c5e48b14543444d0657b311e7aef27d4d7412ea90e512a7912cb', 504, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["28"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'925e4df710e75ab99d41f975876bd94228ffb27e283948a7509dc9c364c0cc9f', 614, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":["28"],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'37bbae125701cafca0fbfc8154d7e5d39f3d6f3537c4ed32e24df7787b53d49e', 931, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[28],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'); 
INSERT INTO "PUBLIC"."QUERY" VALUES
(X'099e0eefd25e4c7de6584b292820ac8610820d5e7e682c46a1fba2a9fed2a5ef', 1016, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub3"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[28],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'8bccf194c99b54c359104304ef969fef4a94d60ce406d2b6ebbdc5bf6d9bccd2', 962, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[28],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}'),
(X'4d0270b132e04f43095c091a400e0795c7a328b23a861852b71faed081aeeb97', 896, '{"constraints":{"max-results":10000,"max-results-bare-rows":2000},"type":"native","middleware":{"js-int-to-string?":true,"ignore-cached-results?":false},"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"database":2,"parameters":[{"type":"category","value":["Sidesub1"],"id":"26dff5a5","target":["variable",["template-tag","Account"]]},{"type":"number/=","value":[28],"id":"d6e37bc7","target":["variable",["template-tag","Days"]]}],"async?":true,"cache-ttl":null}');            
CREATE CACHED TABLE "PUBLIC"."PERMISSIONS_GROUP"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) DEFAULT ON NULL NOT NULL,
    "NAME" CHARACTER VARYING(255) NOT NULL
);     
ALTER TABLE "PUBLIC"."PERMISSIONS_GROUP" ADD CONSTRAINT "PUBLIC"."PK_PERMISSIONS_GROUP" PRIMARY KEY("ID");     
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.PERMISSIONS_GROUP;        
INSERT INTO "PUBLIC"."PERMISSIONS_GROUP" VALUES
(1, 'All Users'),
(2, 'Administrators');       
CREATE INDEX "PUBLIC"."IDX_PERMISSIONS_GROUP_NAME" ON "PUBLIC"."PERMISSIONS_GROUP"("NAME" NULLS FIRST);        
CREATE CACHED TABLE "PUBLIC"."DASHBOARDCARD_SERIES"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "DASHBOARDCARD_ID" INTEGER NOT NULL,
    "CARD_ID" INTEGER NOT NULL,
    "POSITION" INTEGER NOT NULL
);     
ALTER TABLE "PUBLIC"."DASHBOARDCARD_SERIES" ADD CONSTRAINT "PUBLIC"."PK_DASHBOARDCARD_SERIES" PRIMARY KEY("ID");               
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.DASHBOARDCARD_SERIES;     
CREATE INDEX "PUBLIC"."IDX_DASHBOARDCARD_SERIES_DASHBOARDCARD_ID" ON "PUBLIC"."DASHBOARDCARD_SERIES"("DASHBOARDCARD_ID" NULLS FIRST);          
CREATE INDEX "PUBLIC"."IDX_DASHBOARDCARD_SERIES_CARD_ID" ON "PUBLIC"."DASHBOARDCARD_SERIES"("CARD_ID" NULLS FIRST);            
CREATE CACHED TABLE "PUBLIC"."QRTZ_JOB_DETAILS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "JOB_NAME" CHARACTER VARYING(200) NOT NULL,
    "JOB_GROUP" CHARACTER VARYING(200) NOT NULL,
    "DESCRIPTION" CHARACTER VARYING(250),
    "JOB_CLASS_NAME" CHARACTER VARYING(250) NOT NULL,
    "IS_DURABLE" BOOLEAN NOT NULL,
    "IS_NONCONCURRENT" BOOLEAN NOT NULL,
    "IS_UPDATE_DATA" BOOLEAN NOT NULL,
    "REQUESTS_RECOVERY" BOOLEAN NOT NULL,
    "JOB_DATA" BINARY LARGE OBJECT
);    
ALTER TABLE "PUBLIC"."QRTZ_JOB_DETAILS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_JOB_DETAILS" PRIMARY KEY("SCHED_NAME", "JOB_NAME", "JOB_GROUP");      
-- 12 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_JOB_DETAILS;        
INSERT INTO "PUBLIC"."QRTZ_JOB_DETAILS" VALUES
('MetabaseScheduler', 'metabase.task.upgrade-checks.job', 'DEFAULT', NULL, 'metabase.task.upgrade_checks.CheckForNewVersions', FALSE, FALSE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.anonymous-stats.job', 'DEFAULT', NULL, 'metabase.task.send_anonymous_stats.SendAnonymousUsageStats', FALSE, FALSE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.send-pulses.job', 'DEFAULT', NULL, 'metabase.task.send_pulses.SendPulses', FALSE, FALSE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.follow-up-emails.job', 'DEFAULT', NULL, 'metabase.task.follow_up_emails.FollowUpEmail', FALSE, FALSE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.task-history-cleanup.job', 'DEFAULT', NULL, 'metabase.task.task_history_cleanup.TaskHistoryCleanup', FALSE, FALSE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.refresh-channel-cache.job', 'DEFAULT', NULL, 'metabase.task.refresh_slack_channel_user_cache.RefreshCache', FALSE, FALSE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800');        
INSERT INTO "PUBLIC"."QRTZ_JOB_DETAILS" VALUES
('MetabaseScheduler', 'metabase.task.sync-and-analyze.job', 'DEFAULT', 'sync-and-analyze for all databases', 'metabase.task.sync_databases.SyncAndAnalyzeDatabase', TRUE, TRUE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.update-field-values.job', 'DEFAULT', 'update-field-values for all databases', 'metabase.task.sync_databases.UpdateFieldValues', TRUE, TRUE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.PersistenceRefresh.job', 'DEFAULT', 'Persisted Model refresh task', 'metabase.task.persist_refresh.PersistenceRefresh', TRUE, TRUE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.PersistencePrune.job', 'DEFAULT', 'Persisted Model prune task', 'metabase.task.persist_refresh.PersistencePrune', TRUE, TRUE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.truncate-audit-log.job', 'DEFAULT', NULL, 'metabase.task.truncate_audit_log.TruncateAuditLog', FALSE, FALSE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800'),
('MetabaseScheduler', 'metabase.task.IndexValues.job', 'DEFAULT', 'Indexed Value Refresh task', 'metabase.task.index_values.ModelIndexRefresh', TRUE, TRUE, FALSE, FALSE, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787000737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000010770800000010000000007800');  
CREATE INDEX "PUBLIC"."IDX_QRTZ_J_REQ_RECOVERY" ON "PUBLIC"."QRTZ_JOB_DETAILS"("SCHED_NAME" NULLS FIRST, "REQUESTS_RECOVERY" NULLS FIRST);     
CREATE INDEX "PUBLIC"."IDX_QRTZ_J_GRP" ON "PUBLIC"."QRTZ_JOB_DETAILS"("SCHED_NAME" NULLS FIRST, "JOB_GROUP" NULLS FIRST);      
CREATE CACHED TABLE "PUBLIC"."PERSISTED_INFO" COMMENT 'Table holding information about persisted models'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "DATABASE_ID" INTEGER COMMENT 'ID of the database associated to the persisted card' NOT NULL,
    "CARD_ID" INTEGER COMMENT 'ID of the Card model persisted' NOT NULL,
    "QUESTION_SLUG" CHARACTER LARGE OBJECT COMMENT 'Slug of the card which will form the persisted table name' NOT NULL,
    "TABLE_NAME" CHARACTER LARGE OBJECT COMMENT 'Name of the table persisted' NOT NULL,
    "DEFINITION" CHARACTER LARGE OBJECT COMMENT 'JSON object that captures the state of the table when we persisted',
    "QUERY_HASH" CHARACTER LARGE OBJECT COMMENT 'Hash of the query persisted',
    "ACTIVE" BOOLEAN DEFAULT FALSE COMMENT 'Indicating whether the persisted table is active and can be swapped' NOT NULL,
    "STATE" CHARACTER LARGE OBJECT COMMENT 'Persisted table state (creating, persisted, refreshing, deleted)' NOT NULL,
    "REFRESH_BEGIN" TIMESTAMP WITH TIME ZONE COMMENT 'The timestamp of when the most recent refresh was started' NOT NULL,
    "REFRESH_END" TIMESTAMP WITH TIME ZONE COMMENT 'The timestamp of when the most recent refresh ended',
    "STATE_CHANGE_AT" TIMESTAMP WITH TIME ZONE COMMENT 'The timestamp of when the most recent state changed',
    "ERROR" CHARACTER LARGE OBJECT COMMENT 'Error message from persisting if applicable',
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the model was first persisted' NOT NULL,
    "CREATOR_ID" INTEGER COMMENT 'The person who persisted a model'
);           
ALTER TABLE "PUBLIC"."PERSISTED_INFO" ADD CONSTRAINT "PUBLIC"."PK_PERSISTED_INFO" PRIMARY KEY("ID");           
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.PERSISTED_INFO;           
CREATE CACHED TABLE "PUBLIC"."QUERY_CACHE" COMMENT 'Cached results of queries are stored here when using the DB-based query cache.'(
    "QUERY_HASH" BINARY VARYING(32) COMMENT 'The hash of the query dictionary. (This is a 256-bit SHA3 hash of the query dict).' NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE NOT NULL,
    "RESULTS" BINARY LARGE OBJECT COMMENT 'Cached, compressed results of running the query with the given hash.' NOT NULL
);               
ALTER TABLE "PUBLIC"."QUERY_CACHE" ADD CONSTRAINT "PUBLIC"."PK_QUERY_CACHE" PRIMARY KEY("QUERY_HASH");         
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QUERY_CACHE;              
CREATE INDEX "PUBLIC"."IDX_QUERY_CACHE_UPDATED_AT" ON "PUBLIC"."QUERY_CACHE"("UPDATED_AT" NULLS FIRST);        
CREATE CACHED TABLE "PUBLIC"."QRTZ_TRIGGERS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) SELECTIVITY 9 NOT NULL,
    "TRIGGER_NAME" CHARACTER VARYING(200) SELECTIVITY 100 NOT NULL,
    "TRIGGER_GROUP" CHARACTER VARYING(200) SELECTIVITY 9 NOT NULL,
    "JOB_NAME" CHARACTER VARYING(200) SELECTIVITY 81 NOT NULL,
    "JOB_GROUP" CHARACTER VARYING(200) SELECTIVITY 9 NOT NULL,
    "DESCRIPTION" CHARACTER VARYING(250) SELECTIVITY 45,
    "NEXT_FIRE_TIME" BIGINT SELECTIVITY 81,
    "PREV_FIRE_TIME" BIGINT SELECTIVITY 81,
    "PRIORITY" INTEGER SELECTIVITY 9,
    "TRIGGER_STATE" CHARACTER VARYING(16) SELECTIVITY 9 NOT NULL,
    "TRIGGER_TYPE" CHARACTER VARYING(8) SELECTIVITY 9 NOT NULL,
    "START_TIME" BIGINT SELECTIVITY 36 NOT NULL,
    "END_TIME" BIGINT SELECTIVITY 9,
    "CALENDAR_NAME" CHARACTER VARYING(200) SELECTIVITY 9,
    "MISFIRE_INSTR" SMALLINT SELECTIVITY 27,
    "JOB_DATA" BINARY LARGE OBJECT
);            
ALTER TABLE "PUBLIC"."QRTZ_TRIGGERS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_TRIGGERS" PRIMARY KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");    
-- 11 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_TRIGGERS;           
INSERT INTO "PUBLIC"."QRTZ_TRIGGERS" VALUES
('MetabaseScheduler', 'metabase.task.update-field-values.trigger.1', 'DEFAULT', 'metabase.task.update-field-values.job', 'DEFAULT', 'update-field-values Database 1', 1698476400000, 1697698800000, 5, 'WAITING', 'CRON', 1669103634000, 0, NULL, 2, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c7708000000100000000174000564622d6964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000017800'),
('MetabaseScheduler', 'metabase.task.update-field-values.trigger.2', 'DEFAULT', 'metabase.task.update-field-values.job', 'DEFAULT', 'update-field-values Database 2', 1698472800000, 1697695200000, 5, 'WAITING', 'CRON', 1669103634000, 0, NULL, 2, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c7708000000100000000174000564622d6964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000027800'),
('MetabaseScheduler', 'metabase.task.sync-and-analyze.trigger.2', 'DEFAULT', 'metabase.task.sync-and-analyze.job', 'DEFAULT', 'sync-and-analyze Database 2', 1698452940000, 1697743740000, 5, 'WAITING', 'CRON', 1669103634000, 0, NULL, 2, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c7708000000100000000174000564622d6964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000027800'),
('MetabaseScheduler', 'metabase.task.sync-and-analyze.trigger.1', 'DEFAULT', 'metabase.task.sync-and-analyze.job', 'DEFAULT', 'sync-and-analyze Database 1', 1698453660000, 1698450060000, 5, 'WAITING', 'CRON', 1669103634000, 0, NULL, 2, X'aced0005737200156f72672e71756172747a2e4a6f62446174614d61709fb083e8bfa9b0cb020000787200266f72672e71756172747a2e7574696c732e537472696e674b65794469727479466c61674d61708208e8c3fbc55d280200015a0013616c6c6f77735472616e7369656e74446174617872001d6f72672e71756172747a2e7574696c732e4469727479466c61674d617013e62ead28760ace0200025a000564697274794c00036d617074000f4c6a6176612f7574696c2f4d61703b787001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c7708000000100000000174000564622d6964737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b0200007870000000017800'),
('MetabaseScheduler', 'metabase.task.upgrade-checks.trigger', 'DEFAULT', 'metabase.task.upgrade-checks.job', 'DEFAULT', NULL, 1698473700000, -1, 5, 'WAITING', 'CRON', 1698450079000, 0, NULL, 0, X''),
('MetabaseScheduler', 'metabase.task.anonymous-stats.trigger', 'DEFAULT', 'metabase.task.anonymous-stats.job', 'DEFAULT', NULL, 1698507660000, -1, 5, 'WAITING', 'CRON', 1698450079000, 0, NULL, 0, X'');        
INSERT INTO "PUBLIC"."QRTZ_TRIGGERS" VALUES
('MetabaseScheduler', 'metabase.task.refresh-channel-cache.trigger', 'DEFAULT', 'metabase.task.refresh-channel-cache.job', 'DEFAULT', NULL, 1698453360000, -1, 5, 'WAITING', 'CRON', 1698450079000, 0, NULL, 2, X''),
('MetabaseScheduler', 'metabase.task.send-pulses.trigger', 'DEFAULT', 'metabase.task.send-pulses.job', 'DEFAULT', NULL, 1698451200000, -1, 5, 'WAITING', 'CRON', 1698450079000, 0, NULL, 1, X''),
('MetabaseScheduler', 'metabase.task.follow-up-emails.trigger', 'DEFAULT', 'metabase.task.follow-up-emails.job', 'DEFAULT', NULL, 1698494400000, -1, 5, 'WAITING', 'CRON', 1698450079000, 0, NULL, 0, X''),
('MetabaseScheduler', 'metabase.task.task-history-cleanup.trigger', 'DEFAULT', 'metabase.task.task-history-cleanup.job', 'DEFAULT', NULL, 1698451200000, -1, 5, 'WAITING', 'CRON', 1698450079000, 0, NULL, 0, X''),
('MetabaseScheduler', 'metabase.task.truncate-audit-log.trigger', 'DEFAULT', 'metabase.task.truncate-audit-log.job', 'DEFAULT', NULL, 1698451200000, -1, 5, 'WAITING', 'CRON', 1698450079000, 0, NULL, 2, X'');            
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_J" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "JOB_NAME" NULLS FIRST, "JOB_GROUP" NULLS FIRST);   
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_JG" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "JOB_GROUP" NULLS FIRST);          
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_C" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "CALENDAR_NAME" NULLS FIRST);       
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_G" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "TRIGGER_GROUP" NULLS FIRST);       
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_STATE" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "TRIGGER_STATE" NULLS FIRST);   
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_N_STATE" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "TRIGGER_NAME" NULLS FIRST, "TRIGGER_GROUP" NULLS FIRST, "TRIGGER_STATE" NULLS FIRST);        
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_N_G_STATE" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "TRIGGER_GROUP" NULLS FIRST, "TRIGGER_STATE" NULLS FIRST);  
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_NEXT_FIRE_TIME" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "NEXT_FIRE_TIME" NULLS FIRST);         
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_NFT_ST" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "TRIGGER_STATE" NULLS FIRST, "NEXT_FIRE_TIME" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_NFT_MISFIRE" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "MISFIRE_INSTR" NULLS FIRST, "NEXT_FIRE_TIME" NULLS FIRST);               
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_NFT_ST_MISFIRE" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "MISFIRE_INSTR" NULLS FIRST, "NEXT_FIRE_TIME" NULLS FIRST, "TRIGGER_STATE" NULLS FIRST);               
CREATE INDEX "PUBLIC"."IDX_QRTZ_T_NFT_ST_MISFIRE_GRP" ON "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME" NULLS FIRST, "MISFIRE_INSTR" NULLS FIRST, "NEXT_FIRE_TIME" NULLS FIRST, "TRIGGER_GROUP" NULLS FIRST, "TRIGGER_STATE" NULLS FIRST);              
CREATE CACHED TABLE "PUBLIC"."BOOKMARK_ORDERING" COMMENT 'Table holding ordering information for various bookmark tables'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "USER_ID" INTEGER COMMENT 'ID of the User who ordered bookmarks' NOT NULL,
    "TYPE" CHARACTER VARYING(255) COMMENT 'type of the Bookmark' NOT NULL,
    "ITEM_ID" INTEGER COMMENT 'id of the item being bookmarked (Card, Collection, Dashboard, ...) no FK, so may no longer exist' NOT NULL,
    "ORDERING" INTEGER COMMENT 'order of bookmark for user' NOT NULL
);              
ALTER TABLE "PUBLIC"."BOOKMARK_ORDERING" ADD CONSTRAINT "PUBLIC"."PK_BOOKMARK_ORDERING" PRIMARY KEY("ID");     
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.BOOKMARK_ORDERING;        
CREATE INDEX "PUBLIC"."IDX_BOOKMARK_ORDERING_USER_ID" ON "PUBLIC"."BOOKMARK_ORDERING"("USER_ID" NULLS FIRST);  
CREATE CACHED TABLE "PUBLIC"."MODERATION_REVIEW" COMMENT 'Reviews (from moderators) for a given question/dashboard (BUCM)'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'most recent modification time' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'creation time' NOT NULL,
    "STATUS" CHARACTER VARYING(255) COMMENT 'verified, misleading, confusing, not_misleading, pending',
    "TEXT" CHARACTER LARGE OBJECT COMMENT 'Explanation of the review',
    "MODERATED_ITEM_ID" INTEGER COMMENT 'either a document or question ID; the item that needs review' NOT NULL,
    "MODERATED_ITEM_TYPE" CHARACTER VARYING(255) COMMENT 'whether it''s a question or dashboard' NOT NULL,
    "MODERATOR_ID" INTEGER COMMENT 'ID of the user who did the review' NOT NULL,
    "MOST_RECENT" BOOLEAN COMMENT 'tag for most recent review' NOT NULL
);             
ALTER TABLE "PUBLIC"."MODERATION_REVIEW" ADD CONSTRAINT "PUBLIC"."PK_MODERATION_REVIEW" PRIMARY KEY("ID");     
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.MODERATION_REVIEW;        
CREATE INDEX "PUBLIC"."IDX_MODERATION_REVIEW_ITEM_TYPE_ITEM_ID" ON "PUBLIC"."MODERATION_REVIEW"("MODERATED_ITEM_TYPE" NULLS FIRST, "MODERATED_ITEM_ID" NULLS FIRST);           
CREATE CACHED TABLE "PUBLIC"."IMPLICIT_ACTION" COMMENT 'An action with dynamic parameters based on the underlying model'(
    "ACTION_ID" INTEGER COMMENT 'The associated action' NOT NULL,
    "KIND" CHARACTER LARGE OBJECT COMMENT 'The kind of implicit action create/update/delete' NOT NULL
);           
ALTER TABLE "PUBLIC"."IMPLICIT_ACTION" ADD CONSTRAINT "PUBLIC"."PK_IMPLICIT_ACTION" PRIMARY KEY("ACTION_ID");  
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.IMPLICIT_ACTION;          
CREATE CACHED TABLE "PUBLIC"."MODEL_INDEX" COMMENT 'Used to keep track of which models have indexed columns.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
    "MODEL_ID" INTEGER COMMENT 'The ID of the indexed model.',
    "PK_REF" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the primary key field ref.' NOT NULL,
    "VALUE_REF" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the label field ref.' NOT NULL,
    "SCHEDULE" CHARACTER LARGE OBJECT COMMENT 'The cron schedule for when value syncing should happen.' NOT NULL,
    "STATE" CHARACTER LARGE OBJECT COMMENT 'The status of the index: initializing, indexed, error, overflow.' NOT NULL,
    "INDEXED_AT" TIMESTAMP WITH TIME ZONE COMMENT 'When the status changed',
    "ERROR" CHARACTER LARGE OBJECT COMMENT 'The error message if the status is error.',
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when these changes were made.' NOT NULL,
    "CREATOR_ID" INTEGER COMMENT 'ID of the user who created the event' NOT NULL
);        
ALTER TABLE "PUBLIC"."MODEL_INDEX" ADD CONSTRAINT "PUBLIC"."PK_MODEL_INDEX" PRIMARY KEY("ID"); 
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.MODEL_INDEX;              
CREATE INDEX "PUBLIC"."IDX_MODEL_INDEX_MODEL_ID" ON "PUBLIC"."MODEL_INDEX"("MODEL_ID" NULLS FIRST);            
CREATE CACHED TABLE "PUBLIC"."APPLICATION_PERMISSIONS_REVISION" COMMENT 'Used to keep track of changes made to general permissions.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "BEFORE" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the permission graph before the changes.' NOT NULL,
    "AFTER" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON of the changes in permission graph.' NOT NULL,
    "USER_ID" INTEGER COMMENT 'The ID of the admin who made this set of changes.' NOT NULL,
    "CREATED_AT" TIMESTAMP COMMENT 'The timestamp of when these changes were made.' NOT NULL,
    "REMARK" CHARACTER LARGE OBJECT COMMENT 'Optional remarks explaining why these changes were made.'
);             
ALTER TABLE "PUBLIC"."APPLICATION_PERMISSIONS_REVISION" ADD CONSTRAINT "PUBLIC"."PK_GENERAL_PERMISSIONS_REVISION" PRIMARY KEY("ID");           
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.APPLICATION_PERMISSIONS_REVISION;         
CREATE CACHED TABLE "PUBLIC"."PULSE_CARD"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "PULSE_ID" INTEGER NOT NULL,
    "CARD_ID" INTEGER NOT NULL,
    "POSITION" INTEGER NOT NULL,
    "INCLUDE_CSV" BOOLEAN DEFAULT FALSE COMMENT 'True if a CSV of the data should be included for this pulse card' NOT NULL,
    "INCLUDE_XLS" BOOLEAN DEFAULT FALSE COMMENT 'True if a XLS of the data should be included for this pulse card' NOT NULL,
    "DASHBOARD_CARD_ID" INTEGER COMMENT 'If this Pulse is a Dashboard subscription, the ID of the DashboardCard that corresponds to this PulseCard.',
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);       
ALTER TABLE "PUBLIC"."PULSE_CARD" ADD CONSTRAINT "PUBLIC"."PK_PULSE_CARD" PRIMARY KEY("ID");   
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.PULSE_CARD;               
CREATE INDEX "PUBLIC"."IDX_PULSE_CARD_PULSE_ID" ON "PUBLIC"."PULSE_CARD"("PULSE_ID" NULLS FIRST);              
CREATE INDEX "PUBLIC"."IDX_PULSE_CARD_CARD_ID" ON "PUBLIC"."PULSE_CARD"("CARD_ID" NULLS FIRST);
CREATE CACHED TABLE "PUBLIC"."REPORT_CARDFAVORITE"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "CARD_ID" INTEGER NOT NULL,
    "OWNER_ID" INTEGER NOT NULL
);     
ALTER TABLE "PUBLIC"."REPORT_CARDFAVORITE" ADD CONSTRAINT "PUBLIC"."PK_REPORT_CARDFAVORITE" PRIMARY KEY("ID"); 
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.REPORT_CARDFAVORITE;      
CREATE INDEX "PUBLIC"."IDX_CARDFAVORITE_CARD_ID" ON "PUBLIC"."REPORT_CARDFAVORITE"("CARD_ID" NULLS FIRST);     
CREATE INDEX "PUBLIC"."IDX_CARDFAVORITE_OWNER_ID" ON "PUBLIC"."REPORT_CARDFAVORITE"("OWNER_ID" NULLS FIRST);   
CREATE CACHED TABLE "PUBLIC"."PULSE_CHANNEL"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "PULSE_ID" INTEGER NOT NULL,
    "CHANNEL_TYPE" CHARACTER VARYING(32) NOT NULL,
    "DETAILS" CHARACTER LARGE OBJECT NOT NULL,
    "SCHEDULE_TYPE" CHARACTER VARYING(32) NOT NULL,
    "SCHEDULE_HOUR" INTEGER,
    "SCHEDULE_DAY" CHARACTER VARYING(64),
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "SCHEDULE_FRAME" CHARACTER VARYING(32),
    "ENABLED" BOOLEAN DEFAULT TRUE NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);     
ALTER TABLE "PUBLIC"."PULSE_CHANNEL" ADD CONSTRAINT "PUBLIC"."PK_PULSE_CHANNEL" PRIMARY KEY("ID");             
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.PULSE_CHANNEL;            
CREATE INDEX "PUBLIC"."IDX_PULSE_CHANNEL_PULSE_ID" ON "PUBLIC"."PULSE_CHANNEL"("PULSE_ID" NULLS FIRST);        
CREATE INDEX "PUBLIC"."IDX_PULSE_CHANNEL_SCHEDULE_TYPE" ON "PUBLIC"."PULSE_CHANNEL"("SCHEDULE_TYPE" NULLS FIRST);              
CREATE CACHED TABLE "PUBLIC"."COMPUTATION_JOB" COMMENT 'Stores submitted async computation jobs.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "CREATOR_ID" INTEGER,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "TYPE" CHARACTER VARYING(254) NOT NULL,
    "STATUS" CHARACTER VARYING(254) NOT NULL,
    "CONTEXT" CHARACTER LARGE OBJECT,
    "ENDED_AT" TIMESTAMP
);   
ALTER TABLE "PUBLIC"."COMPUTATION_JOB" ADD CONSTRAINT "PUBLIC"."PK_COMPUTATION_JOB" PRIMARY KEY("ID");         
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.COMPUTATION_JOB;          
CREATE CACHED TABLE "PUBLIC"."METABASE_FIELDVALUES"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 65 RESTART WITH 81) DEFAULT ON NULL NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE NOT NULL,
    "VALUES" CHARACTER LARGE OBJECT,
    "HUMAN_READABLE_VALUES" CHARACTER LARGE OBJECT,
    "FIELD_ID" INTEGER NOT NULL,
    "HAS_MORE_VALUES" BOOLEAN DEFAULT FALSE COMMENT 'true if the stored values list is a subset of all possible values',
    "TYPE" CHARACTER VARYING(32) DEFAULT 'full' COMMENT 'Type of FieldValues' NOT NULL,
    "HASH_KEY" CHARACTER LARGE OBJECT COMMENT 'Hash key for a cached fieldvalues',
    "LAST_USED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'Timestamp of when these FieldValues were last used.' NOT NULL
);            
ALTER TABLE "PUBLIC"."METABASE_FIELDVALUES" ADD CONSTRAINT "PUBLIC"."PK_METABASE_FIELDVALUES" PRIMARY KEY("ID");               
-- 42 +/- SELECT COUNT(*) FROM PUBLIC.METABASE_FIELDVALUES;    
INSERT INTO "PUBLIC"."METABASE_FIELDVALUES" VALUES
(1, TIMESTAMP '2022-11-21 20:55:34.687', TIMESTAMP WITH TIME ZONE '2022-11-21 20:55:34.687+00', '["Doohickey","Gadget","Gizmo","Widget"]', NULL, 4, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(2, TIMESTAMP '2022-11-21 20:55:35.412', TIMESTAMP WITH TIME ZONE '2022-11-21 20:55:35.412+00', '[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,65,67,68,69,70,71,72,73,75,78,82,83,88,100]', NULL, 10, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(3, TIMESTAMP '2022-11-21 20:55:35.459', TIMESTAMP WITH TIME ZONE '2022-11-21 20:55:35.459+00', '["AK","AL","AR","AZ","CA","CO","CT","DE","FL","GA","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY"]', NULL, 25, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(4, TIMESTAMP '2022-11-21 20:55:35.483', TIMESTAMP WITH TIME ZONE '2022-11-21 20:55:35.483+00', '["Affiliate","Facebook","Google","Organic","Twitter"]', NULL, 26, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(5, TIMESTAMP '2022-11-21 20:55:35.514', TIMESTAMP WITH TIME ZONE '2022-11-21 20:55:35.514+00', '[1,2,3,4,5]', NULL, 31, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(6, TIMESTAMP '2022-11-21 20:58:01.37', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.363266+00', '["LONG"]', NULL, 43, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(7, TIMESTAMP '2022-11-21 20:58:01.405', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.38785+00', '["Sidesub1"]', NULL, 44, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(8, TIMESTAMP '2022-11-21 20:58:01.443', TIMESTAMP WITH TIME ZONE '2023-08-01 06:00:03.01488+00', '["Sidesub1","Sidesub3","Sidesub4"]', NULL, 50, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-07-20 16:43:47.006131+00'),
(9, TIMESTAMP '2022-11-21 20:58:01.48', TIMESTAMP WITH TIME ZONE '2023-07-20 16:43:46.967425+00', '["Sidesub1","Sidesub2","Sidesub3","Sidesub4"]', NULL, 54, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-07-20 16:43:46.967425+00'),
(10, TIMESTAMP '2022-11-21 20:58:01.526', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.486933+00', '["Sidesub1"]', NULL, 57, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(11, TIMESTAMP '2022-11-21 20:58:01.566', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.513788+00', '["ADA","BIT","BTC","DOT","EOS","ETH","LTC","MANA","USDT","XRP"]', NULL, 62, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(12, TIMESTAMP '2022-11-21 20:58:01.615', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.724075+00', '["Sidesub1"]', NULL, 81, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(13, TIMESTAMP '2022-11-21 20:58:01.64', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.746837+00', '["ADAUSDT","ATOMUSDT","AVAXUSDT","BNBUSDT","BTCUSDT","DOGEUSDT","DYDXUSDT","EOSUSDT","ETHUSDT","KSMUSDT","MANAUSDT","MATICUSDT","XMRUSDT","XRPUSDT","XTZUSDT"]', NULL, 82, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(14, TIMESTAMP '2022-11-21 20:58:01.704', TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:38.434625+00', '["USDT"]', NULL, 107, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:38.434625+00'),
(15, TIMESTAMP '2022-11-21 20:58:01.73', TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:38.434652+00', '["REALIZED_PNL","Trade"]', NULL, 111, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:38.434652+00'),
(16, TIMESTAMP '2022-11-21 20:58:01.757', TIMESTAMP WITH TIME ZONE '2023-08-23 14:22:42.752987+00', '["Sidesub1","Sidesub3","Sidesub4"]', NULL, 114, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-08-23 14:22:42.752987+00');   
INSERT INTO SYSTEM_LOB_STREAM VALUES(74, 0, '["abbott-berneice@hotmail.example","abdullah-kerluke@gmail.example","adan-weissnat@yahoo.example","aida.schneider@gmail.example","aidan-hagenes@hotmail.example","aidan.rodriguez@gmail.example","alaina-howell@gmail.example","alayna.halvorson@hotmail.example","alberto.gulgowski@gmail.example","alicia.schimmel@gmail.example","alisa-morissette@hotmail.example","alisa-schmitt@hotmail.example","altenwerth.onie@yahoo.example","alva.conroy@hotmail.example","alvena-legros@hotmail.example","alverta-rogahn@hotmail.example","alvina.mertz@gmail.example","alvis.emmerich@yahoo.example","alycia.collins@yahoo.example","alysson-cartwright@yahoo.example","anastacio.jaskolski@hotmail.example","anderson-eliza@hotmail.example","anderson.schinner@yahoo.example","andy-skiles@yahoo.example","angela-botsford@hotmail.example","anjali-parker@hotmail.example","ankunding-rudolph@hotmail.example","aracely.jenkins@gmail.example","arch-ryan@hotmail.example","archibald-lowe@hotmail.example","archibald-turner@hotmail.example","arne-o-hara@gmail.example","art-graham@yahoo.example","arvel-lakin@gmail.example","ashton-herman@hotmail.example","aubree-dibbert@hotmail.example","aubree-walter@hotmail.example","aufderhar-mya@hotmail.example","aufderhar.john@yahoo.example","aurore-yundt@yahoo.example","bahringer-laura@yahoo.example","bailey.kenna@yahoo.example","balistreri-oral@yahoo.example","balistreri-unique@gmail.example","bauch-wilford@gmail.example","bayer-mattie@hotmail.example","bayer.mark@hotmail.example","beatty-emmie@gmail.example","beatty.julio@gmail.example","beatty.mohammed@gmail.example","bechtelar.antone@gmail.example","beer.humberto@hotmail.example","berge-halie@hotmail.example","bergstrom-chelsie@yahoo.example","bernhard.kathleen@yahoo.example","bins-evans@hotmail.example","blair.heaney@gmail.example","blake-leffler@hotmail.example","blaze-daugherty@hotmail.example","blick-candelario@yahoo.example","block.emiliano@hotmail.example","bode-sydnie@gmail.example","bode.richmond@gmail.example","boehm-amanda@hotmail.example","bogan.rodger@gmail.example","bosco-zachariah@gmail.example","bosco.haylie@hotmail.example","botsford.okey@hotmail.example","boyer-bernhard@yahoo.example","boyle-christiana@gmail.example","brakus-kimberly@gmail.example","brakus.marlene@hotmail.example","brant.klein@yahoo.example","braun.madisyn@gmail.example","breanna.strosin@yahoo.example","breitenberg-louie@gmail.example","brekke.kirsten@yahoo.example","brennon-gerlach@hotmail.example","bret-quigley@gmail.example","brianne-jacobson@yahoo.example","brown-deontae@gmail.example","buddy-hills@gmail.example","caleigh-hodkiewicz@yahoo.example","camron-homenick@gmail.example","camryn-schmeler@hotmail.example","candida-turcotte@yahoo.example","carolanne-upton@gmail.example","carroll.chanel@yahoo.example","carroll.kohler@hotmail.example","carter-fern@hotmail.example","casey.robel@yahoo.example","casper-alfonzo@yahoo.example","cassin-cleta@hotmail.example","cassin.mario@hotmail.example","cayla.vonrueden@hotmail.example","cecilia.stark@hotmail.example","cedrick-kessler@gmail.example","champlin.jensen@yahoo.example","chanel.rippin@yahoo.example","charlene-bayer@hotmail.example","chet-blick@yahoo.example","christophe.wilderman@hotmail.example","ciara-larson@hotmail.example","ciara.green@yahoo.example","clark-luettgen@gmail.example","claudie-dare@yahoo.example","claudine.mccullough@yahoo.example","clay-pfannerstill@gmail.example","clemens.hansen@gmail.example","cole.christophe@yahoo.example","conn-gideon@yahoo.example","connell-o-henriette@yahoo.example","connell.lisette.o@yahoo.example","connelly-alice@gmail.example","connelly.bessie@hotmail.example","conner.windler@gmail.example","conroy-orlando@yahoo.example","conroy-yadira@gmail.example","corbin.mertz@hotmail.example","corbin.wiegand@yahoo.example","corkery.theresa@yahoo.example","cornelius-bogisich@hotmail.example","crawford.rath@gmail.example","cremin-jerome@hotmail.example","cremin.tyler@gmail.example","cronin-marley@yahoo.example","curtis.morar@hotmail.example","d-amore-geoffrey@yahoo.example","dagmar-sawayn@gmail.example","dana-orn@hot', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(74, 1, 'mail.example","dana.kozey@yahoo.example","darwin-abshire@yahoo.example","dawson-kuvalis@gmail.example","dax-bartell@hotmail.example","dayne.strosin@hotmail.example","deckow.alisha@hotmail.example","dell-schimmel@hotmail.example","demario-hand@yahoo.example","demetris.hauck@hotmail.example","dena-schiller@yahoo.example","denesik-delphia@hotmail.example","deron-cremin@gmail.example","destiny-murazik@hotmail.example","deven.brekke@gmail.example","domenico.bailey@yahoo.example","dominic.jacobi@yahoo.example","donavon.lowe@gmail.example","dooley-karen@gmail.example","douglas-prosacco@hotmail.example","douglas.anais@hotmail.example","durgan-emiliano@hotmail.example","earnestine-lockman@hotmail.example","easton-koch@gmail.example","effertz-elnora@yahoo.example","eileen-mayert@gmail.example","eldon.herman@yahoo.example","elisa-grady@yahoo.example","ellie-oberbrunner@yahoo.example","ellsworth.west@hotmail.example","elmo.schimmel@yahoo.example","elsa.klocko@gmail.example","elvera.lowe@yahoo.example","elwin.okuneva@gmail.example","emanuel-corwin@gmail.example","emard-janiya@gmail.example","emerson-o-keefe@gmail.example","emery.gerlach@hotmail.example","emmie-mertz@yahoo.example","enola.bayer@yahoo.example","erich.kris@gmail.example","ernestina-gerhold@gmail.example","ernser-ardella@gmail.example","esther-douglas@yahoo.example","estrella.goyette@hotmail.example","ethan.rutherford@gmail.example","eudora-renner@gmail.example","eugenia-stroman@yahoo.example","eula-connell-o@hotmail.example","eve.mante@yahoo.example","fadel-philip@hotmail.example","feest-angus@gmail.example","feil.sterling@gmail.example","felicity-greenfelder@hotmail.example","felipe-johnston@yahoo.example","ferry.enrico@hotmail.example","fisher-antwan@hotmail.example","florence.donnelly@gmail.example","foster-gusikowski@yahoo.example","foster-marks@yahoo.example","francisco-robel@hotmail.example","freddie.wisoky@gmail.example","fredrick-gulgowski@yahoo.example","fritz.dickens@hotmail.example","funk.nichole@yahoo.example","gabrielle-considine@yahoo.example","gabrielle-frami@gmail.example","gaetano-rogahn@hotmail.example","gaylord-granville@yahoo.example","gene-lueilwitz@gmail.example","gerhold.lempi@yahoo.example","germaine-brakus@yahoo.example","gibson.eveline@hotmail.example","gilberto-mueller@gmail.example","gino.johnston@yahoo.example","giovani-thompson@hotmail.example","giovani.lesch@hotmail.example","gislason-kaelyn@hotmail.example","giuseppe.morar@hotmail.example","gleichner-joshuah@gmail.example","glover-eryn@gmail.example","glover.kelsie@yahoo.example","goldner.ruthe@hotmail.example","gorczany-eulah@yahoo.example","gottlieb-ola@gmail.example","gottlieb-ruthe@yahoo.example","grady.raynor@hotmail.example","graham-liam@yahoo.example","greenfelder-hulda@gmail.example","greenfelder.wilbert@gmail.example","greg-purdy@gmail.example","gretchen.muller@hotmail.example","greyson.boyle@gmail.example","grimes-terrence@gmail.example","grimes.melisa@gmail.example","guido-mckenzie@yahoo.example","gulgowski.ubaldo@gmail.example","gutkowski-pattie@hotmail.example","gutmann-lura@hotmail.example","hagenes-rosie@hotmail.example","hahn.hugh@hotmail.example","halvorson.dale@gmail.example","hane.audie@gmail.example","hane.carter@gmail.example","hansen-karl@hotmail.example","hansen.alta@yahoo.example","hansen.anibal@yahoo.example","hansen.magnolia@gmail.example","harris-myrtice@gmail.example","harris.constantin@hotmail.example","harris.richard@yahoo.example","heath-dare@gmail.example","heathcote.jamar@gmail.example","heidenreich-patience@hotmail.example","heidenreich.pearlie@hotmail.example","heidi-glover@gmail.example","henry-rowe@yahoo.example","hermann-madelyn@hotmail.example","hermiston.gerald@yahoo.example","hertha.price@gmail.example","herzog-ophelia@hotmail.example","hessel.arnoldo@yahoo.example","hettinger-brendon@yahoo.example","hettinger.david@yahoo.example","hettinger.orval@hotmail.example","hettinger.shyanne@yahoo.example","hills-violet@hotmail.example","hilpert.gunnar@yahoo.example","hollis-hettinger@gmail.example","homenick-omari@hotmail.example","hoppe.kathryne@gmail.exa', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(74, 2, 'mple","hoppe.lewis@gmail.example","howell-reba@gmail.example","howell.jacinthe@yahoo.example","hudson-audra@hotmail.example","hudson.larkin@hotmail.example","huels-earnest@hotmail.example","huels-gunnar@yahoo.example","hyatt.rowan@hotmail.example","jace-kihn@yahoo.example","jacey.schoen@hotmail.example","jacobs-oliver@yahoo.example","jacobs-ronny@hotmail.example","jacobson.stan@gmail.example","jairo-simonis@yahoo.example","jakob.hansen@gmail.example","jakubowski.nyasia@yahoo.example","jaleel.collins@gmail.example","jamel.stanton@yahoo.example","jannie-balistreri@yahoo.example","jasen.stanton@yahoo.example","jast.leann@yahoo.example","jayden.kris@hotmail.example","jazmin.brekke@gmail.example","jedediah-huels@hotmail.example","jeffry-schowalter@hotmail.example","jenkins-sandy@yahoo.example","jennifer-klocko@hotmail.example","jerrod-king@yahoo.example","jessika.funk@yahoo.example","jo-gusikowski@hotmail.example","joe.becker@yahoo.example","joelle-ullrich@gmail.example","johns-myrtle@yahoo.example","johnston.benny@gmail.example","jorge.bins@gmail.example","josh-schimmel@gmail.example","judd-hickle@gmail.example","kade-kub@hotmail.example","kaela-kunze@gmail.example","kariane.hintz@gmail.example","karine.mante@gmail.example","katharina-heathcote@yahoo.example","kavon-dach@gmail.example","kaya.schoen@yahoo.example","kayley.powlowski@hotmail.example","keefe-o-jonas@yahoo.example","keenan.ferry@hotmail.example","kellie.price@hotmail.example","kelsi.douglas@gmail.example","kemmer-gene@yahoo.example","kemmer-matt@yahoo.example","kemmer.bonnie@hotmail.example","kennedy-kunde@gmail.example","kerluke.jakob@gmail.example","kertzmann-coty@hotmail.example","keshaun-carroll@hotmail.example","khalid-pouros@yahoo.example","khalid.blanda@yahoo.example","kihn.alfred@yahoo.example","kilback-alisha@hotmail.example","kilback-carmelo@yahoo.example","kitty.hilll@gmail.example","koelpin-karelle@gmail.example","koepp-melyna@gmail.example","kohler.jermain@hotmail.example","konopelski.beaulah@hotmail.example","koss-ella@hotmail.example","koss.letha@hotmail.example","kovacek-dawson@hotmail.example","kristoffer.blanda@yahoo.example","krystel.boyle@yahoo.example","kshlerin-bernardo@gmail.example","kshlerin-stella@yahoo.example","kulas-armani@yahoo.example","kunze.eleanora@hotmail.example","kuphal.colton@gmail.example","kurtis.parker@gmail.example","kuvalis-cierra@yahoo.example","kuvalis-willis@yahoo.example","kyler-altenwerth@yahoo.example","kyler.abshire@yahoo.example","kyra-lynch@hotmail.example","lacey.dickinson@hotmail.example","langosh.cathrine@gmail.example","langworth-savion@gmail.example","larkin-lilliana@hotmail.example","larkin.cedrick@gmail.example","larson-adrianna@gmail.example","laurel.pfannerstill@gmail.example","laurie-sanford@hotmail.example","lavern.botsford@hotmail.example","lavern.boyle@hotmail.example","leannon-clay@gmail.example","lebsack-tristin@yahoo.example","ledner-nichole@yahoo.example","leila-considine@gmail.example","leta-heidenreich@yahoo.example","leuschke-estefania@yahoo.example","liam-schoen@hotmail.example","lillie.wilderman@hotmail.example","lind.annamae@gmail.example","linnea.dickens@gmail.example","littel.otto@hotmail.example","little-anika@hotmail.example","little.john@yahoo.example","lockman-janiya@hotmail.example","logan-weber@yahoo.example","lon-friesen@yahoo.example","lorna.greenholt@yahoo.example","lou.runte@gmail.example","lowell-daniel@gmail.example","loyal.wintheiser@yahoo.example","loyce-lemke@yahoo.example","lucas-beer@gmail.example","lucile-bednar@gmail.example","lueilwitz.osbaldo@yahoo.example","luna-nienow@gmail.example","lynch.tyson@gmail.example","lysanne-brekke@yahoo.example","mabel-grimes@hotmail.example","macejkovic-cyrus@gmail.example","macejkovic.andrew@hotmail.example","mackenzie-ullrich@yahoo.example","madge-friesen@gmail.example","madie.bayer@hotmail.example","maeve.hilpert@hotmail.example","maiya-beier@hotmail.example","malika-kuphal@hotmail.example","mante-dakota@yahoo.example","marcelle-rippin@gmail.example","marcelo-ferry@gmail.example","margarete.tillman@gmail.example","marley.gorczany@ho', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(74, 3, 'tmail.example","marvin.kris@gmail.example","mathilde.quigley@gmail.example","maurine-considine@hotmail.example","maximillia.ebert@hotmail.example","maximillian-zboncak@hotmail.example","mayer.arne@hotmail.example","mayert.jessyca@gmail.example","mckenzie.eduardo@yahoo.example","mclaughlin.ezekiel@yahoo.example","meagan.cremin@yahoo.example","melba-witting@hotmail.example","melisa.hilpert@hotmail.example","melissa.cormier@hotmail.example","merle.blick@yahoo.example","merle.moen@yahoo.example","mertz.antoinette@hotmail.example","mertz.melissa@gmail.example","micaela.kerluke@gmail.example","milan-ritchie@gmail.example","miller-geovanni@hotmail.example","miller.morgan@gmail.example","mills-andy@hotmail.example","milton.schiller@hotmail.example","mina.reynolds@yahoo.example","miracle.erdman@gmail.example","misty-botsford@hotmail.example","mitchell-lacey@gmail.example","moen-evalyn@gmail.example","mohr.johnson@gmail.example","mollie.bogan@hotmail.example","monahan.loma@yahoo.example","monserrate-doyle@hotmail.example","morar-maddison@hotmail.example","morissette.jailyn@gmail.example","mraz-tomas@gmail.example","mraz.caitlyn@yahoo.example","muller-russell@yahoo.example","murazik-donny@hotmail.example","murray-idell@gmail.example","murray-zemlak@hotmail.example","murray.gleason@gmail.example","mya-gleason@yahoo.example","myles.deckow@gmail.example","myrtle.bahringer@hotmail.example","nader-arnaldo@hotmail.example","nader-ryley@hotmail.example","nayeli.becker@yahoo.example","nicolas.dameon@yahoo.example","nicolas.karen@hotmail.example","nikko.bartoletti@gmail.example","nikolas-hilpert@gmail.example","nikolaus-willie@yahoo.example","nils.gaylord@hotmail.example","nolan-amy@hotmail.example","nolan.samantha@hotmail.example","o-issac-kon@hotmail.example","o.janelle.hara@gmail.example","oceane.runte@yahoo.example","odell.stehr@hotmail.example","olaf.sipes@gmail.example","ollie.corkery@gmail.example","ondricka-lamont@hotmail.example","ondricka-madge@yahoo.example","ondricka.rollin@gmail.example","orie-sipes@yahoo.example","ortiz.harrison@gmail.example","orville-effertz@hotmail.example","oscar-olson@hotmail.example","osinski-joanne@gmail.example","pacocha-khalil@hotmail.example","padberg-albert@gmail.example","pagac-yessenia@yahoo.example","parker-lilliana@yahoo.example","pattie.senger@yahoo.example","paucek-larry@hotmail.example","petra.durgan@hotmail.example","peyton-barton@gmail.example","powlowski-mohammed@yahoo.example","price-rosalyn@yahoo.example","rau.arnaldo@hotmail.example","raynor.chasity@gmail.example","rebekah-dickinson@hotmail.example","rebekah.ledner@gmail.example","reichel-antwon@hotmail.example","reichel.gracie@gmail.example","reichert-evangeline@yahoo.example","reid-reilly@hotmail.example","reilly.o.franco@yahoo.example","rempel.brooke@gmail.example","rene.muller@gmail.example","reuben-koelpin@yahoo.example","rey-schumm@hotmail.example","reyna-greenholt@yahoo.example","reynolds-melisa@hotmail.example","richmond-adams@gmail.example","roberts-lilian@yahoo.example","rogahn-meta@hotmail.example","rolfson-ford@yahoo.example","rolfson.natalie@yahoo.example","romaguera-angeline@yahoo.example","roob-lila@gmail.example","rosalinda-stamm@gmail.example","rosella-bergstrom@gmail.example","rowe-celestine@gmail.example","ruecker-kathlyn@yahoo.example","ruecker-tad@yahoo.example","runolfsdottir-tyreek@gmail.example","runolfsdottir.augustine@gmail.example","runolfsson.davonte@gmail.example","rutherford-beau@yahoo.example","rylee-upton@yahoo.example","ryleigh-padberg@hotmail.example","sabrina-schmidt@hotmail.example","sabryna-schumm@gmail.example","sallie.wehner@yahoo.example","samir.hayes@yahoo.example","sanford.leilani@yahoo.example","satterfield-abbey@hotmail.example","satterfield.chris@hotmail.example","satterfield.creola@hotmail.example","sauer-franco@yahoo.example","schaden.johathan@hotmail.example","schamberger-zora@gmail.example","schiller.loyal@gmail.example","schinner.verna@yahoo.example","schmeler-lucinda@hotmail.example","schmeler-rita@yahoo.example","schmeler.annabelle@gmail.example","schoen.viola@hotmail.example","schuste', NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(74, 4, 'r.geovanny@yahoo.example","scottie.schmidt@hotmail.example","senger-kamron@hotmail.example","shanie.spinka@gmail.example","shanny-kuvalis@gmail.example","shirley-okuneva@yahoo.example","sidney-kling@gmail.example","skiles-devan@gmail.example","skye.heidenreich@gmail.example","smith-meaghan@yahoo.example","smith-price@yahoo.example","spencer.efrain@gmail.example","spinka-donato@yahoo.example","spinka-jessy@gmail.example","sporer-nyasia@hotmail.example","sporer.toby@yahoo.example","stamm.davin@yahoo.example","stanley.kuphal@gmail.example","stark.yasmin@gmail.example","stehr-freeman@hotmail.example","stehr.tyson@gmail.example","steuber-vernice@yahoo.example","steuber.dedrick@gmail.example","stewart.sawayn@gmail.example","stiedemann-gage@gmail.example","stiedemann.coby@gmail.example","stokes.cordelia@yahoo.example","stoltenberg-miguel@gmail.example","swaniawski-kaleb@gmail.example","swaniawski-luisa@hotmail.example","swift.pietro@hotmail.example","tavares.metz@yahoo.example","terry-gregorio@gmail.example","terry-william@yahoo.example","terry.darlene@gmail.example","terry.joe@gmail.example","theodore.mcglynn@hotmail.example","theresa.grant@yahoo.example","theresia-russel@gmail.example","thompson-fay@yahoo.example","thompson-hosea@hotmail.example","thurman-pouros@hotmail.example","toby.yundt@gmail.example","torp.magdalen@yahoo.example","trantow-daphnee@hotmail.example","tressie-smitham@yahoo.example","treutel-jessika@yahoo.example","treutel.jaquan@hotmail.example","tromp-demario@yahoo.example","tromp.emelia@hotmail.example","trudie-muller@gmail.example","trudie.koch@yahoo.example","turner.dahlia@yahoo.example","turner.kelley@hotmail.example","tyrel-beatty@yahoo.example","ullrich-ladarius@gmail.example","unique.jerde@yahoo.example","vanessa-jaskolski@gmail.example","vergie.borer@hotmail.example","veronica.weissnat@gmail.example","virginia-prohaska@yahoo.example","vonrueden-sheridan@hotmail.example","waelchi-filomena@yahoo.example","waelchi-jaqueline@hotmail.example","waelchi.iva@yahoo.example","walker-derrick@yahoo.example","walker-nicole@yahoo.example","walker-trace@gmail.example","walker.carter@yahoo.example","walter-melisa@gmail.example","walter.chris@yahoo.example","ward.anais@gmail.example","ward.mabel@gmail.example","warren.gulgowski@hotmail.example","watsica-olen@gmail.example","watsica.stanley@hotmail.example","weber-breana@hotmail.example","weber-gino@yahoo.example","weber-mohammad@yahoo.example","weimann.keyshawn@hotmail.example","weimann.maryam@gmail.example","weissnat-victoria@gmail.example","weissnat.elmore@gmail.example","weissnat.mathilde@hotmail.example","welch-lucinda@yahoo.example","wendell-becker@yahoo.example","west.laisha@yahoo.example","white.berneice@gmail.example","wiegand.guy@gmail.example","wilderman-nellie@hotmail.example","wilhelmine.erdman@gmail.example","wilkinson-penelope@gmail.example","wilkinson.edmund@hotmail.example","will.garrison@yahoo.example","willms-ardella@yahoo.example","willms-tressie@hotmail.example","willms.seth@gmail.example","willms.wilhelm@gmail.example","wilton-senger@yahoo.example","winfield.donnelly@hotmail.example","winona.cassin@yahoo.example","wintheiser-broderick@yahoo.example","wintheiser-celestino@gmail.example","wintheiser-murray@yahoo.example","wisoky-rebeka@hotmail.example","witting-cindy@yahoo.example","witting-maud@gmail.example","witting-raegan@gmail.example","wiza-andreanne@gmail.example","wiza.lisette@yahoo.example","wolf-jewell@yahoo.example","wuckert.iva@hotmail.example","wyman.hilma@gmail.example","yundt-haven@hotmail.example","yundt.merl@yahoo.example","zackery.bailey@gmail.example","zane.paucek@yahoo.example","zetta.nitzsche@gmail.example","ziemann-serena@gmail.example","zula.boehm@hotmail.example"]', NULL);        
INSERT INTO "PUBLIC"."METABASE_FIELDVALUES" VALUES
(17, TIMESTAMP '2022-11-21 20:58:01.855', TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:38.335539+00', '["1000PEPEUSDT","1INCHUSDT","ADAUSDT","ALGOUSDT","APEUSDT","API3USDT","ARBUSDT","ATOMUSDT","AVAXUSDT","BNBUSDT","BTCUSDT","CELRUSDT","CHRUSDT","CHZUSDT","CTSIUSDT","DENTUSDT","DOGEUSDT","DOTUSDT","DYDXUSDT","ENJUSDT","EOSUSDT","ETHUSDT","GALUSDT","GMTUSDT","HBARUSDT","HOTUSDT","IMXUSDT","INJUSDT","JASMYUSDT","KSMUSDT","MANAUSDT","MATICUSDT","NEARUSDT","NKNUSDT","OPUSDT","REEFUSDT","SANDUSDT","SHIB1000USDT","SOLUSDT","SUIUSDT","WAVESUSDT","WOOUSDT","XMRUSDT","XRPUSDT","XTZUSDT"]', NULL, 115, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:38.335539+00'),
(33, TIMESTAMP '2022-11-22 12:43:49.683', TIMESTAMP WITH TIME ZONE '2022-11-22 12:43:49.683+00', '[null]', NULL, 63, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(34, TIMESTAMP '2022-11-22 12:43:49.722', TIMESTAMP WITH TIME ZONE '2023-01-03 06:10:30.912+00', '["LONG","SHORT"]', NULL, 64, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(35, TIMESTAMP '2022-11-22 12:43:49.756', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.577289+00', '["Sidesub1"]', NULL, 65, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(36, TIMESTAMP '2022-11-22 12:43:49.784', TIMESTAMP WITH TIME ZONE '2022-11-22 12:43:49.784+00', '["BUY","SELL"]', NULL, 67, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(37, TIMESTAMP '2022-11-22 12:43:49.811', TIMESTAMP WITH TIME ZONE '2022-11-22 12:43:49.811+00', '[null]', NULL, 68, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(38, TIMESTAMP '2022-11-22 12:43:49.834', TIMESTAMP WITH TIME ZONE '2023-04-04 06:00:00.632033+00', '["Limit"]', NULL, 69, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(39, TIMESTAMP '2022-11-22 12:43:49.858', TIMESTAMP WITH TIME ZONE '2023-04-17 06:00:00.431842+00', '["ADAUSDT","ATOMUSDT","BNBUSDT","BTCUSDT","DOGEUSDT","ETHUSDT","MANAUSDT","XMRUSDT","XRPUSDT"]', NULL, 70, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(40, TIMESTAMP '2022-11-22 12:43:49.888', TIMESTAMP WITH TIME ZONE '2022-11-22 12:43:49.888+00', '[null]', NULL, 76, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(41, TIMESTAMP '2022-11-22 12:43:49.916', TIMESTAMP WITH TIME ZONE '2022-11-22 12:43:49.916+00', '[null]', NULL, 78, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:12.224313+00'),
(65, TIMESTAMP '2023-04-04 07:00:00.484896', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.484896+00', '["Button Clicked","Page Viewed"]', NULL, 130, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.484896+00'),
(66, TIMESTAMP '2023-04-04 07:00:00.522053', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.522053+00', '[null,"Checkout","Create Item","Invite","Signup","Subscribe"]', NULL, 133, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.522053+00'),
(67, TIMESTAMP '2023-04-04 07:00:00.557355', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.557355+00', '[null,"www.piespace.example/help","www.piespace.example/home","www.piespace.example/invite","www.piespace.example/login","www.piespace.example/pies"]', NULL, 134, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.557355+00'),
(68, TIMESTAMP '2023-04-04 07:00:00.586315', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.586315+00', '[1,2,3,4,5]', NULL, 135, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.586315+00'),
(69, TIMESTAMP '2023-04-04 07:00:00.615685', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.615685+00', SYSTEM_COMBINE_CLOB(74), NULL, 137, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:00.615685+00'),
(70, TIMESTAMP '2023-04-04 07:00:01.226683', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.226683+00', '["Average","Below Average","Good","Great","Poor"]', NULL, 141, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.226683+00');        
INSERT INTO SYSTEM_LOB_STREAM VALUES(75, 0, '["Abbott","Abernathy","Abshire","Adams","Altenwerth","Anderson","Ankunding","Armstrong","Auer","Aufderhar","Bahringer","Bailey","Balistreri","Barrows","Bartell","Bartoletti","Barton","Batz","Bauch","Baumbach","Bayer","Beahan","Beatty","Bechtelar","Becker","Bednar","Beer","Beier","Berge","Bergnaum","Bergstrom","Bernhard","Bernier","Bins","Blanda","Blick","Block","Bode","Boehm","Bogan","Bogisich","Borer","Bosco","Botsford","Boyer","Boyle","Bradtke","Brakus","Braun","Breitenberg","Brekke","Brown","Bruen","Buckridge","Carroll","Carter","Cartwright","Casper","Cassin","Champlin","Christiansen","Cole","Collier","Collins","Conn","Connelly","Conroy","Considine","Corkery","Cormier","Corwin","Cremin","Crist","Crona","Cronin","Crooks","Cruickshank","Cummerata","Cummings","D''Amore","Dach","Daniel","Dare","Daugherty","Davis","Deckow","Denesik","Dibbert","Dickens","Dicki","Dickinson","Dietrich","Donnelly","Dooley","Douglas","Doyle","DuBuque","Durgan","Ebert","Effertz","Eichmann","Emard","Emmerich","Erdman","Ernser","Fadel","Fahey","Farrell","Fay","Feeney","Feest","Feil","Ferry","Fisher","Flatley","Frami","Franecki","Friesen","Fritsch","Funk","Gaylord","Gerhold","Gerlach","Gibson","Gislason","Gleason","Gleichner","Glover","Goldner","Goodwin","Gorczany","Gottlieb","Goyette","Grady","Graham","Grant","Green","Greenfelder","Greenholt","Grimes","Gulgowski","Gusikowski","Gutkowski","Gutmann","Haag","Hackett","Hagenes","Hahn","Haley","Halvorson","Hamill","Hammes","Hand","Hane","Hansen","Harber","Harris","Hartmann","Harvey","Hauck","Hayes","Heaney","Heathcote","Hegmann","Heidenreich","Heller","Herman","Hermann","Hermiston","Herzog","Hessel","Hettinger","Hickle","Hilll","Hills","Hilpert","Hintz","Hirthe","Hodkiewicz","Hoeger","Homenick","Hoppe","Howe","Howell","Hudson","Huel","Huels","Hyatt","Jacobi","Jacobs","Jacobson","Jakubowski","Jaskolski","Jast","Jenkins","Jerde","Jewess","Johns","Johnson","Johnston","Jones","Kassulke","Kautzer","Keebler","Keeling","Kemmer","Kerluke","Kertzmann","Kessler","Kiehn","Kihn","Kilback","King","Kirlin","Klein","Kling","Klocko","Koch","Koelpin","Koepp","Kohler","Konopelski","Koss","Kovacek","Kozey","Krajcik","Kreiger","Kris","Kshlerin","Kub","Kuhic","Kuhlman","Kuhn","Kulas","Kunde","Kunze","Kuphal","Kutch","Kuvalis","Labadie","Lakin","Lang","Langosh","Langworth","Larkin","Larson","Leannon","Lebsack","Ledner","Leffler","Legros","Lehner","Lemke","Lesch","Leuschke","Lind","Lindgren","Littel","Little","Lockman","Lowe","Lubowitz","Lueilwitz","Luettgen","Lynch","Macejkovic","Maggio","Mann","Mante","Marks","Marquardt","Marvin","Mayer","Mayert","McClure","McCullough","McDermott","McGlynn","McKenzie","McLaughlin","Medhurst","Mertz","Metz","Miller","Mills","Mitchell","Moen","Mohr","Monahan","Moore","Morar","Morissette","Mosciski","Mraz","Mueller","Muller","Murazik","Murphy","Murray","Nader","Nicolas","Nienow","Nikolaus","Nitzsche","Nolan","O''Connell","O''Conner","O''Hara","O''Keefe","O''Kon","O''Reilly","Oberbrunner","Okuneva","Olson","Ondricka","Orn","Ortiz","Osinski","Pacocha","Padberg","Pagac","Parisian","Parker","Paucek","Pfannerstill","Pfeffer","Pollich","Pouros","Powlowski","Predovic","Price","Prohaska","Prosacco","Purdy","Quigley","Quitzon","Rath","Ratke","Rau","Raynor","Reichel","Reichert","Reilly","Reinger","Rempel","Renner","Reynolds","Rice","Rippin","Ritchie","Robel","Roberts","Rodriguez","Rogahn","Rohan","Rolfson","Romaguera","Roob","Rosenbaum","Rowe","Ruecker","Runolfsdottir","Runolfsson","Runte","Russel","Rutherford","Ryan","Sanford","Satterfield","Sauer","Sawayn","Schaden","Schaefer","Schamberger","Schiller","Schimmel","Schinner","Schmeler","Schmidt","Schmitt","Schneider","Schoen","Schowalter","Schroeder","Schulist","Schultz","Schumm","Schuppe","Schuster","Senger","Shanahan","Shields","Simonis","Sipes","Skiles","Smith","Smitham","Spencer","Spinka","Sporer","Stamm","Stanton","Stark","Stehr","Steuber","Stiedemann","Stokes","Stoltenberg","Stracke","Streich","Stroman","Strosin","Swaniawski","Swift","Terry","Thiel","Thompson","Tillman","Torp","Torphy","Towne","Toy","Trantow","Tremblay","Treutel","Tromp","Turcotte","Tur', NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(75, 1, 'ner","Ullrich","Upton","Vandervort","Veum","Volkman","Von","VonRueden","Waelchi","Walker","Walsh","Walter","Ward","Waters","Watsica","Weber","Wehner","Weimann","Weissnat","Welch","West","White","Wiegand","Wilderman","Wilkinson","Will","Williamson","Willms","Windler","Wintheiser","Wisoky","Wisozk","Witting","Wiza","Wolf","Wolff","Wuckert","Wunsch","Wyman","Yost","Yundt","Zboncak","Zemlak","Ziemann","Zieme","Zulauf"]', NULL);       
INSERT INTO "PUBLIC"."METABASE_FIELDVALUES" VALUES
(71, TIMESTAMP '2023-04-04 07:00:01.367576', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.367576+00', '[false,true]', NULL, 145, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.367576+00'),
(72, TIMESTAMP '2023-04-04 07:00:01.441256', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.441256+00', '["Basic","Business","Premium"]', NULL, 146, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.441256+00'),
(73, TIMESTAMP '2023-04-04 07:00:01.517829', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.517829+00', '[false,true]', NULL, 148, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.517829+00'),
(74, TIMESTAMP '2023-04-04 07:00:01.577681', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.577681+00', '[false,true]', NULL, 149, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.577681+00'),
(75, TIMESTAMP '2023-04-04 07:00:01.63232', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.63232+00', '[false,true]', NULL, 151, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.63232+00'),
(76, TIMESTAMP '2023-04-04 07:00:01.71343', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.71343+00', '[null,"AE","AF","AG","AL","AM","AR","AT","AU","BA","BD","BE","BF","BG","BN","BO","BR","BT","BW","BY","CA","CD","CH","CI","CL","CM","CN","CO","CR","CU","CV","CY","CZ","DE","DK","DO","DZ","EE","EG","ES","ET","FI","FR","GB","GE","GM","GN","GR","GT","HN","HR","HT","HU","ID","IE","IL","IN","IQ","IR","IT","JM","JO","JP","KE","KH","KI","KM","KR","KZ","LA","LC","LK","LR","LS","LT","LU","LV","LY","MA","MD","MG","MK","ML","MM","MT","MU","MW","MX","MY","NE","NG","NI","NL","NO","NZ","PA","PE","PH","PK","PL","PT","PW","PY","RO","RS","RU","RW","SA","SE","SI","SK","SL","SM","SN","SO","SV","SY","SZ","TH","TJ","TN","TO","TR","TZ","UA","UG","US","UZ","VE","VN","YE","ZA","ZM","ZW"]', NULL, 152, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.71343+00'),
(77, TIMESTAMP '2023-04-04 07:00:01.767089', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.767089+00', '[1,3,5,8,10,12,14,16,19,21,23,25,27,30,32,34,36,38,41,43,45,47,49,52,54,56,58,60,63,65,67,69,71,74,76,78,80,82,85,87,89,91,93,96,98,102,104,107,109,111,113,115,120,122,124,129,131,133,135,137,140,142,148,155,162,168,173,175,177,179,186,188,190,197,201,203,208,210,219,223,236,252,254,261,267,269,274,289,331,335,351,390,393,401,423,426,450,503,522,639,668,1325]', NULL, 154, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.767089+00'),
(78, TIMESTAMP '2023-04-04 07:00:01.807353', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.807353+00', SYSTEM_COMBINE_CLOB(75), NULL, 156, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.807353+00'),
(79, TIMESTAMP '2023-04-04 07:00:01.843825', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.843825+00', '["Basic","Business","Premium"]', NULL, 158, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.843825+00'),
(80, TIMESTAMP '2023-04-04 07:00:01.876897', TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.876897+00', '[null,"Facebook","Google","Invite","Twitter"]', NULL, 161, FALSE, 'full', NULL, TIMESTAMP WITH TIME ZONE '2023-04-04 07:00:01.876897+00'); 
CREATE INDEX "PUBLIC"."IDX_FIELDVALUES_FIELD_ID" ON "PUBLIC"."METABASE_FIELDVALUES"("FIELD_ID" NULLS FIRST);   
CREATE CACHED TABLE "PUBLIC"."DASHBOARD_BOOKMARK" COMMENT 'Table holding bookmarks on dashboards'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) DEFAULT ON NULL NOT NULL,
    "USER_ID" INTEGER COMMENT 'ID of the User who bookmarked the Dashboard' NOT NULL,
    "DASHBOARD_ID" INTEGER COMMENT 'ID of the Dashboard bookmarked by the user' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the bookmark was created' NOT NULL
);            
ALTER TABLE "PUBLIC"."DASHBOARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."PK_DASHBOARD_BOOKMARK" PRIMARY KEY("ID");   
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.DASHBOARD_BOOKMARK;       
INSERT INTO "PUBLIC"."DASHBOARD_BOOKMARK" VALUES
(1, 1, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 13:23:32.586+00');             
CREATE INDEX "PUBLIC"."IDX_DASHBOARD_BOOKMARK_USER_ID" ON "PUBLIC"."DASHBOARD_BOOKMARK"("USER_ID" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_DASHBOARD_BOOKMARK_DASHBOARD_ID" ON "PUBLIC"."DASHBOARD_BOOKMARK"("DASHBOARD_ID" NULLS FIRST);      
CREATE CACHED TABLE "PUBLIC"."ACTION" COMMENT 'An action is something you can do, such as run a readwrite query'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the action was created' NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the action was updated' NOT NULL,
    "TYPE" CHARACTER LARGE OBJECT COMMENT 'Type of action' NOT NULL,
    "MODEL_ID" INTEGER COMMENT 'The associated model' NOT NULL,
    "NAME" CHARACTER VARYING(254) COMMENT 'The name of the action' NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT COMMENT 'The description of the action',
    "PARAMETERS" CHARACTER LARGE OBJECT COMMENT 'The saved parameters for this action',
    "PARAMETER_MAPPINGS" CHARACTER LARGE OBJECT COMMENT 'The saved parameter mappings for this action',
    "VISUALIZATION_SETTINGS" CHARACTER LARGE OBJECT COMMENT 'The UI visualization_settings for this action',
    "PUBLIC_UUID" CHARACTER(36) COMMENT 'Unique UUID used to in publically-accessible links to this Action.',
    "MADE_PUBLIC_BY_ID" INTEGER COMMENT 'The ID of the User who first publically shared this Action.',
    "CREATOR_ID" INTEGER COMMENT 'The user who created the action',
    "ARCHIVED" BOOLEAN DEFAULT FALSE COMMENT 'Whether or not the action has been archived' NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);               
ALTER TABLE "PUBLIC"."ACTION" ADD CONSTRAINT "PUBLIC"."PK_ACTION" PRIMARY KEY("ID");           
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.ACTION;   
CREATE INDEX "PUBLIC"."IDX_ACTION_PUBLIC_UUID" ON "PUBLIC"."ACTION"("PUBLIC_UUID" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_ACTION_CREATOR_ID" ON "PUBLIC"."ACTION"("CREATOR_ID" NULLS FIRST);  
CREATE CACHED TABLE "PUBLIC"."CARD_LABEL"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "CARD_ID" INTEGER NOT NULL,
    "LABEL_ID" INTEGER NOT NULL
);        
ALTER TABLE "PUBLIC"."CARD_LABEL" ADD CONSTRAINT "PUBLIC"."PK_CARD_LABEL" PRIMARY KEY("ID");   
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.CARD_LABEL;               
CREATE INDEX "PUBLIC"."IDX_CARD_LABEL_CARD_ID" ON "PUBLIC"."CARD_LABEL"("CARD_ID" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_CARD_LABEL_LABEL_ID" ON "PUBLIC"."CARD_LABEL"("LABEL_ID" NULLS FIRST);              
CREATE CACHED TABLE "PUBLIC"."PULSE"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "CREATOR_ID" INTEGER NOT NULL,
    "NAME" CHARACTER VARYING(254),
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "SKIP_IF_EMPTY" BOOLEAN DEFAULT FALSE COMMENT 'Skip a scheduled Pulse if none of its questions have any results' NOT NULL,
    "ALERT_CONDITION" CHARACTER VARYING(254) COMMENT 'Condition (i.e. "rows" or "goal") used as a guard for alerts',
    "ALERT_FIRST_ONLY" BOOLEAN COMMENT 'True if the alert should be disabled after the first notification',
    "ALERT_ABOVE_GOAL" BOOLEAN COMMENT 'For a goal condition, alert when above the goal',
    "COLLECTION_ID" INTEGER COMMENT 'Options ID of Collection this Pulse belongs to.',
    "COLLECTION_POSITION" SMALLINT COMMENT 'Optional pinned position for this item in its Collection. NULL means item is not pinned.',
    "ARCHIVED" BOOLEAN DEFAULT FALSE COMMENT 'Has this pulse been archived?',
    "DASHBOARD_ID" INTEGER COMMENT 'ID of the Dashboard if this Pulse is a Dashboard Subscription.',
    "PARAMETERS" CHARACTER LARGE OBJECT COMMENT 'Let dashboard subscriptions have their own filters' NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);    
ALTER TABLE "PUBLIC"."PULSE" ADD CONSTRAINT "PUBLIC"."PK_PULSE" PRIMARY KEY("ID");             
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.PULSE;    
CREATE INDEX "PUBLIC"."IDX_PULSE_CREATOR_ID" ON "PUBLIC"."PULSE"("CREATOR_ID" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_PULSE_COLLECTION_ID" ON "PUBLIC"."PULSE"("COLLECTION_ID" NULLS FIRST);              
CREATE CACHED TABLE "PUBLIC"."CORE_SESSION"(
    "ID" CHARACTER VARYING(254) NOT NULL,
    "USER_ID" INTEGER NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "ANTI_CSRF_TOKEN" CHARACTER LARGE OBJECT COMMENT 'Anti-CSRF token for full-app embed sessions.'
);             
ALTER TABLE "PUBLIC"."CORE_SESSION" ADD CONSTRAINT "PUBLIC"."PK_CORE_SESSION" PRIMARY KEY("ID");               
-- 30 +/- SELECT COUNT(*) FROM PUBLIC.CORE_SESSION;            
INSERT INTO "PUBLIC"."CORE_SESSION" VALUES
('9ebcb8d2-64c4-4dbb-9e88-9283c8509624', 1, TIMESTAMP '2023-04-03 20:14:55.53592', NULL),
('acbd9ef6-28c0-4aa7-b134-b21abcc86e4e', 1, TIMESTAMP '2023-04-04 12:15:33.522654', NULL),
('ff12b94d-2522-460c-991e-aedb56616ee7', 1, TIMESTAMP '2023-04-15 13:39:55.625566', NULL),
('843ea979-e39c-46ed-a2c0-fd6c70c8b308', 1, TIMESTAMP '2023-04-19 08:43:36.959659', NULL),
('9f5641f8-ec20-4e08-b867-b0fe81e270ab', 1, TIMESTAMP '2023-04-30 07:15:24.235537', NULL),
('28e6d4d8-69bf-4bd8-a626-72bed27b2afa', 1, TIMESTAMP '2023-05-03 13:12:19.060781', NULL),
('3d8b0f2a-5362-4f8c-b3f5-54b8f25d8dd8', 1, TIMESTAMP '2023-05-14 21:09:41.595925', NULL),
('10209ff1-9665-4127-8c07-a3200a892e23', 1, TIMESTAMP '2023-05-21 08:50:52.157401', NULL),
('b4879a0e-10c9-4545-90d9-9120a30f3f70', 1, TIMESTAMP '2023-05-28 21:34:12.047356', NULL),
('994cbc3b-54df-4e78-98e0-420e7ee1042b', 1, TIMESTAMP '2023-06-04 11:28:47.834115', NULL),
('04fb9ac2-d931-4390-a7e4-9838b12a9806', 1, TIMESTAMP '2023-06-12 21:58:08.158438', NULL),
('e36a0d1e-3273-465a-8bcd-d047af7dbcb3', 1, TIMESTAMP '2023-06-18 16:05:49.325099', NULL),
('0d9daf2b-c10a-43c2-84e0-32f74067f3c3', 1, TIMESTAMP '2023-06-27 20:09:21.525307', NULL),
('d34528c1-bb57-40ea-95c7-f39917917369', 1, TIMESTAMP '2023-07-02 18:13:43.496498', NULL),
('7cbf1807-7d44-45b8-989e-f87eadc6c229', 1, TIMESTAMP '2023-07-11 21:17:59.31805', NULL),
('b1179ba6-8fb4-4b2b-be3a-ee343c53e9a1', 1, TIMESTAMP '2023-07-16 06:34:16.765545', NULL),
('56fcba4b-5a9e-4fd5-9f03-32ab022f982d', 1, TIMESTAMP '2023-07-19 11:51:16.359266', NULL),
('ddc4f7a1-a22b-4256-8041-a2711bba8cd8', 1, TIMESTAMP '2023-07-25 21:24:40.738916', NULL),
('76b80a5f-21bb-48c1-baed-c2ef17c44878', 1, TIMESTAMP '2023-08-02 12:15:36.332765', NULL),
('717969cd-ea0b-474c-9eee-a873dd6e6290', 1, TIMESTAMP '2023-08-08 22:28:18.349496', NULL),
('327ea8fb-2059-43a7-b48f-4d2121399ebb', 1, TIMESTAMP '2023-08-17 10:29:35.364526', NULL),
('59cfb0c3-8904-4434-89a9-49d542e72a92', 1, TIMESTAMP '2023-08-17 23:35:07.31571', NULL),
('6134ab54-cc35-4329-8224-38ad0fbc8783', 1, TIMESTAMP '2023-08-22 22:34:53.454827', NULL),
('f870cf39-a570-4f6d-a182-e0b630101ac5', 1, TIMESTAMP '2023-09-01 13:47:39.85133', NULL),
('1d3c0722-3944-4430-a929-267bde0f5fba', 1, TIMESTAMP '2023-09-03 13:23:24.514267', NULL),
('1ab5ef5b-f737-4933-a428-6a1082419227', 1, TIMESTAMP '2023-09-15 17:54:14.243574', NULL),
('5dac91a1-046c-4958-b2ec-53a99fab035f', 1, TIMESTAMP '2023-09-18 12:08:03.40416', NULL),
('e1263947-5ca0-4d40-be71-d078542dba54', 1, TIMESTAMP '2023-09-29 18:44:27.967169', NULL),
('cbb20af1-893e-4dc0-9659-544d529e8cca', 1, TIMESTAMP '2023-10-13 23:10:25.060683', NULL),
('e7d0e961-e818-4b25-a9c9-0e0c4b8348cc', 1, TIMESTAMP '2023-10-27 23:42:27.049402', NULL);
CREATE CACHED TABLE "PUBLIC"."SECRET" COMMENT 'Storage for managed secrets (passwords, binary data, etc.)'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL COMMENT 'Part of composite primary key for secret; this is the uniquely generted ID column' NOT NULL,
    "VERSION" INTEGER DEFAULT 1 COMMENT 'Part of composite primary key for secret; this is the version column' NOT NULL,
    "CREATOR_ID" INTEGER COMMENT 'User ID who created this secret instance',
    "CREATED_AT" TIMESTAMP WITH TIME ZONE COMMENT 'Timestamp for when this secret instance was created' NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE COMMENT 'Timestamp for when this secret record was updated. Only relevant when non-value field changes since a value change will result in a new version being inserted.',
    "NAME" CHARACTER VARYING(254) COMMENT 'The name of this secret record.' NOT NULL,
    "KIND" CHARACTER VARYING(254) COMMENT 'The kind of secret this record represents; the value is interpreted as a Clojure keyword with a hierarchy. Ex: ''bytes'' means generic binary data, ''jks-keystore'' extends ''bytes'' but has a specific meaning.' NOT NULL,
    "SOURCE" CHARACTER VARYING(254) COMMENT 'The source of secret record, which controls how Metabase interprets the value (ex: ''file-path'' means the ''simple_value'' is not the real value, but a pointer to a file that contains the value).',
    "VALUE" BINARY LARGE OBJECT COMMENT 'The base64 encoded binary value of this secret record. If encryption is enabled, this will be the output of the encryption procedure on the plaintext. If not, it will be the base64 encoded plaintext.' NOT NULL
);
ALTER TABLE "PUBLIC"."SECRET" ADD CONSTRAINT "PUBLIC"."PK_SECRET" PRIMARY KEY("ID", "VERSION");
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.SECRET;   
CREATE CACHED TABLE "PUBLIC"."COMPUTATION_JOB_RESULT" COMMENT 'Stores results of async computation jobs.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "JOB_ID" INTEGER NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "PERMANENCE" CHARACTER VARYING(254) NOT NULL,
    "PAYLOAD" CHARACTER LARGE OBJECT NOT NULL
);               
ALTER TABLE "PUBLIC"."COMPUTATION_JOB_RESULT" ADD CONSTRAINT "PUBLIC"."PK_COMPUTATION_JOB_RESULT" PRIMARY KEY("ID");           
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.COMPUTATION_JOB_RESULT;   
CREATE CACHED TABLE "PUBLIC"."TIMELINE" COMMENT 'Timeline table to organize events'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "NAME" CHARACTER VARYING(255) COMMENT 'Name of the timeline' NOT NULL,
    "DESCRIPTION" CHARACTER VARYING(255) COMMENT 'Optional description of the timeline',
    "ICON" CHARACTER VARYING(128) COMMENT 'the icon to use when displaying the event' NOT NULL,
    "COLLECTION_ID" INTEGER COMMENT 'ID of the collection containing the timeline',
    "ARCHIVED" BOOLEAN DEFAULT FALSE COMMENT 'Whether or not the timeline has been archived' NOT NULL,
    "CREATOR_ID" INTEGER COMMENT 'ID of the user who created the timeline' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the timeline was created' NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the timeline was updated' NOT NULL,
    "DEFAULT" BOOLEAN DEFAULT 'false' COMMENT 'Boolean value indicating if the timeline is the default one for the containing Collection' NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);               
ALTER TABLE "PUBLIC"."TIMELINE" ADD CONSTRAINT "PUBLIC"."PK_TIMELINE" PRIMARY KEY("ID");       
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.TIMELINE; 
CREATE INDEX "PUBLIC"."IDX_TIMELINE_COLLECTION_ID" ON "PUBLIC"."TIMELINE"("COLLECTION_ID" NULLS FIRST);        
CREATE CACHED TABLE "PUBLIC"."LOGIN_HISTORY" COMMENT 'Keeps track of various logins for different users and additional info such as location and device'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 3 RESTART WITH 97) DEFAULT ON NULL NOT NULL,
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'When this login occurred.' NOT NULL,
    "USER_ID" INTEGER COMMENT 'ID of the User that logged in.' NOT NULL,
    "SESSION_ID" CHARACTER VARYING(254) COMMENT 'ID of the Session created by this login if one is currently active. NULL if Session is no longer active.',
    "DEVICE_ID" CHARACTER(36) COMMENT 'Cookie-based unique identifier for the device/browser the user logged in from.' NOT NULL,
    "DEVICE_DESCRIPTION" CHARACTER LARGE OBJECT COMMENT 'Description of the device that login happened from, for example a user-agent string, but this might be something different if we support alternative auth mechanisms in the future.' NOT NULL,
    "IP_ADDRESS" CHARACTER LARGE OBJECT COMMENT 'IP address of the device that login happened from, so we can geocode it and determine approximate location.' NOT NULL
);      
ALTER TABLE "PUBLIC"."LOGIN_HISTORY" ADD CONSTRAINT "PUBLIC"."PK_LOGIN_HISTORY" PRIMARY KEY("ID");             
-- 34 +/- SELECT COUNT(*) FROM PUBLIC.LOGIN_HISTORY;           
INSERT INTO "PUBLIC"."LOGIN_HISTORY" VALUES
(1, TIMESTAMP WITH TIME ZONE '2023-01-02 18:55:36.015+00', 1, NULL, '2b9fe7c8-24a5-4433-bb1e-cc0ba3abd908', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15', '172.18.0.1'),
(2, TIMESTAMP WITH TIME ZONE '2023-01-09 07:29:45.5+00', 1, NULL, '2b9fe7c8-24a5-4433-bb1e-cc0ba3abd908', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Safari/605.1.15', '172.21.0.1'),
(3, TIMESTAMP WITH TIME ZONE '2023-04-03 20:12:22.404951+00', 1, NULL, 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36', '46.121.211.174'),
(4, TIMESTAMP WITH TIME ZONE '2023-04-03 20:14:55.545895+00', 1, '9ebcb8d2-64c4-4dbb-9e88-9283c8509624', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36', '46.121.211.174'),
(5, TIMESTAMP WITH TIME ZONE '2023-04-04 12:15:33.524778+00', 1, 'acbd9ef6-28c0-4aa7-b134-b21abcc86e4e', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36', '147.235.94.150'),
(6, TIMESTAMP WITH TIME ZONE '2023-04-15 13:39:55.627285+00', 1, 'ff12b94d-2522-460c-991e-aedb56616ee7', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36', '147.235.212.45'),
(7, TIMESTAMP WITH TIME ZONE '2023-04-19 08:43:36.961356+00', 1, '843ea979-e39c-46ed-a2c0-fd6c70c8b308', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36', '31.154.175.125'),
(8, TIMESTAMP WITH TIME ZONE '2023-04-30 07:15:24.237351+00', 1, '9f5641f8-ec20-4e08-b867-b0fe81e270ab', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36', '147.235.212.45'),
(9, TIMESTAMP WITH TIME ZONE '2023-05-03 13:12:19.065178+00', 1, '28e6d4d8-69bf-4bd8-a626-72bed27b2afa', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36', '31.154.175.125'),
(10, TIMESTAMP WITH TIME ZONE '2023-05-14 21:09:41.597636+00', 1, '3d8b0f2a-5362-4f8c-b3f5-54b8f25d8dd8', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36', '46.121.210.117'),
(11, TIMESTAMP WITH TIME ZONE '2023-05-21 08:50:52.158999+00', 1, '10209ff1-9665-4127-8c07-a3200a892e23', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36', '31.154.175.125'),
(12, TIMESTAMP WITH TIME ZONE '2023-05-28 21:34:12.053188+00', 1, 'b4879a0e-10c9-4545-90d9-9120a30f3f70', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36', '46.121.210.117'),
(13, TIMESTAMP WITH TIME ZONE '2023-06-04 11:28:47.838228+00', 1, '994cbc3b-54df-4e78-98e0-420e7ee1042b', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36', '31.154.175.125'),
(14, TIMESTAMP WITH TIME ZONE '2023-06-12 21:58:08.161698+00', 1, '04fb9ac2-d931-4390-a7e4-9838b12a9806', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '46.121.210.117'),
(15, TIMESTAMP WITH TIME ZONE '2023-06-18 16:05:49.335008+00', 1, 'e36a0d1e-3273-465a-8bcd-d047af7dbcb3', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36', '31.154.175.125');           
INSERT INTO "PUBLIC"."LOGIN_HISTORY" VALUES
(16, TIMESTAMP WITH TIME ZONE '2023-06-27 20:09:21.674782+00', 1, '0d9daf2b-c10a-43c2-84e0-32f74067f3c3', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '46.121.210.117'),
(17, TIMESTAMP WITH TIME ZONE '2023-07-02 18:13:43.516603+00', 1, 'd34528c1-bb57-40ea-95c7-f39917917369', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '31.154.175.125'),
(18, TIMESTAMP WITH TIME ZONE '2023-07-11 21:17:59.444735+00', 1, '7cbf1807-7d44-45b8-989e-f87eadc6c229', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '46.121.210.60'),
(19, TIMESTAMP WITH TIME ZONE '2023-07-16 06:34:16.776125+00', 1, 'b1179ba6-8fb4-4b2b-be3a-ee343c53e9a1', '6c3af492-69f5-440f-8e44-221b464e6ba2', 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36', '91.73.118.236'),
(20, TIMESTAMP WITH TIME ZONE '2023-07-19 11:51:16.370041+00', 1, '56fcba4b-5a9e-4fd5-9f03-32ab022f982d', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '31.154.175.125'),
(21, TIMESTAMP WITH TIME ZONE '2023-07-25 21:24:40.789607+00', 1, 'ddc4f7a1-a22b-4256-8041-a2711bba8cd8', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '46.121.210.60'),
(22, TIMESTAMP WITH TIME ZONE '2023-08-02 12:15:36.392971+00', 1, '76b80a5f-21bb-48c1-baed-c2ef17c44878', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '31.154.175.125'),
(23, TIMESTAMP WITH TIME ZONE '2023-08-08 22:28:18.359642+00', 1, '717969cd-ea0b-474c-9eee-a873dd6e6290', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36', '46.121.210.60'),
(24, TIMESTAMP WITH TIME ZONE '2023-08-17 10:29:35.374115+00', 1, '327ea8fb-2059-43a7-b48f-4d2121399ebb', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36', '31.154.175.125'),
(25, TIMESTAMP WITH TIME ZONE '2023-08-17 23:35:07.325547+00', 1, '59cfb0c3-8904-4434-89a9-49d542e72a92', '723dedb0-1d01-4381-ad5b-4b1508875ab4', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36', '147.235.209.11'),
(26, TIMESTAMP WITH TIME ZONE '2023-08-22 22:34:53.918074+00', 1, '6134ab54-cc35-4329-8224-38ad0fbc8783', 'f6f97a17-6278-478d-8828-ef37bf19db05', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36', '46.121.210.60'),
(27, TIMESTAMP WITH TIME ZONE '2023-09-01 13:47:39.94311+00', 1, 'f870cf39-a570-4f6d-a182-e0b630101ac5', '723dedb0-1d01-4381-ad5b-4b1508875ab4', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36', '147.235.222.82'),
(28, TIMESTAMP WITH TIME ZONE '2023-09-03 13:23:24.524408+00', 1, '1d3c0722-3944-4430-a929-267bde0f5fba', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36', '31.154.175.125'),
(29, TIMESTAMP WITH TIME ZONE '2023-09-15 17:54:14.262738+00', 1, '1ab5ef5b-f737-4933-a428-6a1082419227', '723dedb0-1d01-4381-ad5b-4b1508875ab4', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36', '147.235.215.65'),
(30, TIMESTAMP WITH TIME ZONE '2023-09-18 12:08:03.424607+00', 1, '5dac91a1-046c-4958-b2ec-53a99fab035f', '5f938799-d601-4cd5-80be-1d46403526cf', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36', '31.154.175.125');              
INSERT INTO "PUBLIC"."LOGIN_HISTORY" VALUES
(31, TIMESTAMP WITH TIME ZONE '2023-09-29 18:44:27.977814+00', 1, 'e1263947-5ca0-4d40-be71-d078542dba54', '723dedb0-1d01-4381-ad5b-4b1508875ab4', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36', '147.235.219.95'),
(32, TIMESTAMP WITH TIME ZONE '2023-10-13 23:10:25.070337+00', 1, 'cbb20af1-893e-4dc0-9659-544d529e8cca', '723dedb0-1d01-4381-ad5b-4b1508875ab4', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36', '147.235.218.7'),
(33, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:34.432158+00', 1, NULL, 'fe8690e9-832b-4cb2-ae1f-efa88942289b', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36', '147.235.220.117'),
(65, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:27.059715+00', 1, 'e7d0e961-e818-4b25-a9c9-0e0c4b8348cc', 'fe8690e9-832b-4cb2-ae1f-efa88942289b', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36', '147.235.220.117');     
CREATE INDEX "PUBLIC"."IDX_USER_ID" ON "PUBLIC"."LOGIN_HISTORY"("USER_ID" NULLS FIRST);        
CREATE INDEX "PUBLIC"."IDX_SESSION_ID" ON "PUBLIC"."LOGIN_HISTORY"("SESSION_ID" NULLS FIRST);  
CREATE INDEX "PUBLIC"."IDX_TIMESTAMP" ON "PUBLIC"."LOGIN_HISTORY"("TIMESTAMP" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_USER_ID_DEVICE_ID" ON "PUBLIC"."LOGIN_HISTORY"("SESSION_ID" NULLS FIRST, "DEVICE_ID" NULLS FIRST);  
CREATE INDEX "PUBLIC"."IDX_USER_ID_TIMESTAMP" ON "PUBLIC"."LOGIN_HISTORY"("USER_ID" NULLS FIRST, "TIMESTAMP" NULLS FIRST);     
CREATE CACHED TABLE "PUBLIC"."QUERY_EXECUTION" COMMENT 'A log of executed queries, used for calculating historic execution times, auditing, and other purposes.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1988 RESTART WITH 26480) DEFAULT ON NULL SELECTIVITY 100 NOT NULL,
    "HASH" BINARY VARYING(32) SELECTIVITY 10 COMMENT 'The hash of the query dictionary. This is a 256-bit SHA3 hash of the query.' NOT NULL,
    "STARTED_AT" TIMESTAMP WITH TIME ZONE SELECTIVITY 98 NOT NULL,
    "RUNNING_TIME" INTEGER SELECTIVITY 36 COMMENT 'The time, in milliseconds, this query took to complete.' NOT NULL,
    "RESULT_ROWS" INTEGER SELECTIVITY 2 COMMENT 'Number of rows in the query results.' NOT NULL,
    "NATIVE" BOOLEAN SELECTIVITY 1 COMMENT 'Whether the query was a native query, as opposed to an MBQL one (e.g., created with the GUI).' NOT NULL,
    "CONTEXT" CHARACTER VARYING(32) SELECTIVITY 1 COMMENT 'Short string specifying how this query was executed, e.g. in a Dashboard or Pulse.',
    "ERROR" CHARACTER LARGE OBJECT COMMENT 'Error message returned by failed query, if any.',
    "EXECUTOR_ID" INTEGER SELECTIVITY 1 COMMENT 'The ID of the User who triggered this query execution, if any.',
    "CARD_ID" INTEGER SELECTIVITY 1 COMMENT 'The ID of the Card (Question) associated with this query execution, if any.',
    "DASHBOARD_ID" INTEGER SELECTIVITY 1 COMMENT 'The ID of the Dashboard associated with this query execution, if any.',
    "PULSE_ID" INTEGER SELECTIVITY 1 COMMENT 'The ID of the Pulse associated with this query execution, if any.',
    "DATABASE_ID" INTEGER SELECTIVITY 1 COMMENT 'ID of the database this query was ran against.',
    "CACHE_HIT" BOOLEAN SELECTIVITY 1 COMMENT 'Cache hit on query execution'
);         
ALTER TABLE "PUBLIC"."QUERY_EXECUTION" ADD CONSTRAINT "PUBLIC"."PK_QUERY_EXECUTION" PRIMARY KEY("ID");         
-- 42 +/- SELECT COUNT(*) FROM PUBLIC.QUERY_EXECUTION;         
INSERT INTO "PUBLIC"."QUERY_EXECUTION" VALUES
(26416, X'85f6b23231f5cfc470667b1842c67eda2685ed066cd8cb16b09879729591756f', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.145795+00', 566, 1, FALSE, 'dashboard', NULL, 1, 33, 1, NULL, 2, FALSE),
(26417, X'd2d04cbe21e384bebaa3b81a574ea6f2de7ffa3f953960c9eea51150ed2e3908', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.141899+00', 597, 20, FALSE, 'dashboard', NULL, 1, 41, 1, NULL, 2, FALSE),
(26418, X'f0b4cc6b640a03b28f9c5f66f01ba8ce871080529bf17fdb56fa91d1236756af', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.151987+00', 565, 14, TRUE, 'dashboard', NULL, 1, 99, 1, NULL, 2, FALSE),
(26419, X'c90fc26d8868c4ef88b0089f49e9b2d24a9b1b786c4c506f69def48a4000e732', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.142604+00', 608, 15, TRUE, 'dashboard', NULL, 1, 100, 1, NULL, 2, FALSE),
(26420, X'ff2d2249d645c3cb737ec480d25f7f87f5a7b82136f4fa0d70092f4e3894c478', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.141899+00', 602, 1, TRUE, 'dashboard', NULL, 1, 65, 1, NULL, 2, FALSE),
(26421, X'19ab0cbe5ad43527eb34ea41f97fde76b4b6dd2e6c1dae6f987cddc7adaeee71', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.146514+00', 613, 15, TRUE, 'dashboard', NULL, 1, 37, 1, NULL, 2, FALSE),
(26422, X'3d1b003a7b10770b649257aa9bf9f247f80a83ac95d43bc502caaa80b0ecefa2', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.009876+00', 127, 3, TRUE, 'dashboard', NULL, 1, 44, 1, NULL, 2, FALSE),
(26423, X'bb85f6f322bed4b9bec1c7fc430362c881d2ef3a6bcc40579c6d04b5d3cc9a1f', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.008465+00', 135, 67, TRUE, 'dashboard', NULL, 1, 38, 1, NULL, 2, FALSE),
(26424, X'63c2a3f56cefa663e264080a7a8de7da89c7554440cf9d4ca3f54fa4e3ed0574', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.989794+00', 193, 3, TRUE, 'dashboard', NULL, 1, 98, 1, NULL, 2, FALSE),
(26425, X'a1a22b6849abef83d54df2b3b3f41d16afebc971e22f62b602a27dbab5179687', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.073053+00', 115, 1, FALSE, 'dashboard', NULL, 1, 35, 1, NULL, 2, FALSE),
(26426, X'a7ecb5159d6a8ea492b05492a2cb33e842950415718bb6942d1491a6263bbd2a', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.000785+00', 191, 28, FALSE, 'dashboard', NULL, 1, 42, 1, NULL, 2, FALSE),
(26427, X'b598b79939ace60758c42db944c7a1bdac69dea3cfe3d72051113e5f8f84af02', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.049251+00', 300, 83, FALSE, 'dashboard', NULL, 1, 40, 1, NULL, 2, FALSE),
(26428, X'b61d1b1231e5493e17f15010cea570607971ae45a0a360040642f06da1cbca7b', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.336585+00', 76, 30, FALSE, 'dashboard', NULL, 1, 43, 1, NULL, 2, FALSE),
(26429, X'e985809efc8d60d68421c0db84c9987c8a49cc991ae3de167e5ce387cfd3c723', TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.319388+00', 114, 85, FALSE, 'dashboard', NULL, 1, 102, 1, NULL, 2, FALSE),
(26448, X'c90fc26d8868c4ef88b0089f49e9b2d24a9b1b786c4c506f69def48a4000e732', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.145405+00', 686, 15, TRUE, 'dashboard', NULL, 1, 100, 1, NULL, 2, FALSE),
(26449, X'19ab0cbe5ad43527eb34ea41f97fde76b4b6dd2e6c1dae6f987cddc7adaeee71', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.204597+00', 634, 15, TRUE, 'dashboard', NULL, 1, 37, 1, NULL, 2, FALSE),
(26450, X'ff2d2249d645c3cb737ec480d25f7f87f5a7b82136f4fa0d70092f4e3894c478', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.180846+00', 652, 1, TRUE, 'dashboard', NULL, 1, 65, 1, NULL, 2, FALSE),
(26451, X'85f6b23231f5cfc470667b1842c67eda2685ed066cd8cb16b09879729591756f', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.213936+00', 621, 1, FALSE, 'dashboard', NULL, 1, 33, 1, NULL, 2, FALSE),
(26452, X'f0b4cc6b640a03b28f9c5f66f01ba8ce871080529bf17fdb56fa91d1236756af', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.244715+00', 600, 15, TRUE, 'dashboard', NULL, 1, 99, 1, NULL, 2, FALSE),
(26453, X'd2d04cbe21e384bebaa3b81a574ea6f2de7ffa3f953960c9eea51150ed2e3908', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.149215+00', 681, 20, FALSE, 'dashboard', NULL, 1, 41, 1, NULL, 2, FALSE),
(26454, X'3d1b003a7b10770b649257aa9bf9f247f80a83ac95d43bc502caaa80b0ecefa2', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.125126+00', 104, 3, TRUE, 'dashboard', NULL, 1, 44, 1, NULL, 2, FALSE);           
INSERT INTO "PUBLIC"."QUERY_EXECUTION" VALUES
(26455, X'a1a22b6849abef83d54df2b3b3f41d16afebc971e22f62b602a27dbab5179687', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.179378+00', 109, 1, FALSE, 'dashboard', NULL, 1, 35, 1, NULL, 2, FALSE),
(26456, X'63c2a3f56cefa663e264080a7a8de7da89c7554440cf9d4ca3f54fa4e3ed0574', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.082272+00', 218, 3, TRUE, 'dashboard', NULL, 1, 98, 1, NULL, 2, FALSE),
(26457, X'b598b79939ace60758c42db944c7a1bdac69dea3cfe3d72051113e5f8f84af02', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.100061+00', 215, 83, FALSE, 'dashboard', NULL, 1, 40, 1, NULL, 2, FALSE),
(26458, X'a7ecb5159d6a8ea492b05492a2cb33e842950415718bb6942d1491a6263bbd2a', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.113385+00', 221, 28, FALSE, 'dashboard', NULL, 1, 42, 1, NULL, 2, FALSE),
(26459, X'bb85f6f322bed4b9bec1c7fc430362c881d2ef3a6bcc40579c6d04b5d3cc9a1f', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.216988+00', 154, 67, TRUE, 'dashboard', NULL, 1, 38, 1, NULL, 2, FALSE),
(26460, X'b61d1b1231e5493e17f15010cea570607971ae45a0a360040642f06da1cbca7b', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.416164+00', 77, 30, FALSE, 'dashboard', NULL, 1, 43, 1, NULL, 2, FALSE),
(26461, X'e985809efc8d60d68421c0db84c9987c8a49cc991ae3de167e5ce387cfd3c723', TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.451992+00', 93, 85, FALSE, 'dashboard', NULL, 1, 102, 1, NULL, 2, FALSE),
(26462, X'85f6b23231f5cfc470667b1842c67eda2685ed066cd8cb16b09879729591756f', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.566851+00', 64, 1, FALSE, 'dashboard', NULL, 1, 33, 1, NULL, 2, FALSE),
(26463, X'ff2d2249d645c3cb737ec480d25f7f87f5a7b82136f4fa0d70092f4e3894c478', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.575674+00', 71, 1, TRUE, 'dashboard', NULL, 1, 65, 1, NULL, 2, FALSE),
(26464, X'19ab0cbe5ad43527eb34ea41f97fde76b4b6dd2e6c1dae6f987cddc7adaeee71', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.606598+00', 65, 15, TRUE, 'dashboard', NULL, 1, 37, 1, NULL, 2, FALSE),
(26465, X'c90fc26d8868c4ef88b0089f49e9b2d24a9b1b786c4c506f69def48a4000e732', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.657498+00', 52, 15, TRUE, 'dashboard', NULL, 1, 100, 1, NULL, 2, FALSE),
(26466, X'f0b4cc6b640a03b28f9c5f66f01ba8ce871080529bf17fdb56fa91d1236756af', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.636992+00', 129, 15, TRUE, 'dashboard', NULL, 1, 99, 1, NULL, 2, FALSE),
(26467, X'd2d04cbe21e384bebaa3b81a574ea6f2de7ffa3f953960c9eea51150ed2e3908', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.643634+00', 133, 20, FALSE, 'dashboard', NULL, 1, 41, 1, NULL, 2, FALSE),
(26468, X'a1a22b6849abef83d54df2b3b3f41d16afebc971e22f62b602a27dbab5179687', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.809214+00', 168, 1, FALSE, 'dashboard', NULL, 1, 35, 1, NULL, 2, FALSE),
(26469, X'63c2a3f56cefa663e264080a7a8de7da89c7554440cf9d4ca3f54fa4e3ed0574', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.859134+00', 167, 3, TRUE, 'dashboard', NULL, 1, 98, 1, NULL, 2, FALSE),
(26470, X'bb85f6f322bed4b9bec1c7fc430362c881d2ef3a6bcc40579c6d04b5d3cc9a1f', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.028034+00', 90, 67, TRUE, 'dashboard', NULL, 1, 38, 1, NULL, 2, FALSE),
(26471, X'3d1b003a7b10770b649257aa9bf9f247f80a83ac95d43bc502caaa80b0ecefa2', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.075409+00', 56, 3, TRUE, 'dashboard', NULL, 1, 44, 1, NULL, 2, FALSE),
(26472, X'b598b79939ace60758c42db944c7a1bdac69dea3cfe3d72051113e5f8f84af02', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.026689+00', 125, 83, FALSE, 'dashboard', NULL, 1, 40, 1, NULL, 2, FALSE),
(26473, X'a7ecb5159d6a8ea492b05492a2cb33e842950415718bb6942d1491a6263bbd2a', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.069949+00', 128, 28, FALSE, 'dashboard', NULL, 1, 42, 1, NULL, 2, FALSE),
(26474, X'b61d1b1231e5493e17f15010cea570607971ae45a0a360040642f06da1cbca7b', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.142427+00', 87, 30, FALSE, 'dashboard', NULL, 1, 43, 1, NULL, 2, FALSE),
(26475, X'e985809efc8d60d68421c0db84c9987c8a49cc991ae3de167e5ce387cfd3c723', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.222488+00', 71, 85, FALSE, 'dashboard', NULL, 1, 102, 1, NULL, 2, FALSE);
CREATE INDEX "PUBLIC"."IDX_QUERY_EXECUTION_EXECUTOR_ID" ON "PUBLIC"."QUERY_EXECUTION"("EXECUTOR_ID" NULLS FIRST);              
CREATE INDEX "PUBLIC"."IDX_QUERY_EXECUTION_STARTED_AT" ON "PUBLIC"."QUERY_EXECUTION"("STARTED_AT" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_QUERY_EXECUTION_QUERY_HASH_STARTED_AT" ON "PUBLIC"."QUERY_EXECUTION"("HASH" NULLS FIRST, "STARTED_AT" NULLS FIRST); 
CREATE INDEX "PUBLIC"."IDX_QUERY_EXECUTION_CARD_ID" ON "PUBLIC"."QUERY_EXECUTION"("CARD_ID" NULLS FIRST);      
CREATE INDEX "PUBLIC"."IDX_QUERY_EXECUTION_CARD_ID_STARTED_AT" ON "PUBLIC"."QUERY_EXECUTION"("CARD_ID" NULLS FIRST, "STARTED_AT" NULLS FIRST); 
CREATE INDEX "PUBLIC"."IDX_QUERY_EXECUTION_CONTEXT" ON "PUBLIC"."QUERY_EXECUTION"("CONTEXT" NULLS FIRST);      
CREATE CACHED TABLE "PUBLIC"."VIEW_LOG"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1942 RESTART WITH 27228) DEFAULT ON NULL SELECTIVITY 100 NOT NULL,
    "USER_ID" INTEGER SELECTIVITY 1,
    "MODEL" CHARACTER VARYING(16) SELECTIVITY 1 NOT NULL,
    "MODEL_ID" INTEGER SELECTIVITY 2 NOT NULL,
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE SELECTIVITY 100 NOT NULL,
    "METADATA" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON corresponding to metadata for view.'
);               
ALTER TABLE "PUBLIC"."VIEW_LOG" ADD CONSTRAINT "PUBLIC"."PK_VIEW_LOG" PRIMARY KEY("ID");       
-- 45 +/- SELECT COUNT(*) FROM PUBLIC.VIEW_LOG;
INSERT INTO "PUBLIC"."VIEW_LOG" VALUES
(27164, 1, 'dashboard', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:35.500927+00', '{"cached":null,"ignore_cache":null,"context":null}'),
(27165, 1, 'card', 33, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.715224+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27166, 1, 'card', 65, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.753959+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27167, 1, 'card', 100, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.769839+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27168, 1, 'card', 37, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.773552+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27169, 1, 'card', 41, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.774669+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27170, 1, 'card', 99, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:36.777173+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27171, 1, 'card', 44, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.138761+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27172, 1, 'card', 38, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.145361+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27173, 1, 'card', 98, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.184738+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27174, 1, 'card', 35, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.19758+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27175, 1, 'card', 42, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.19765+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27176, 1, 'card', 40, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.351945+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27177, 1, 'card', 43, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.415737+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27178, 1, 'card', 102, TIMESTAMP WITH TIME ZONE '2023-10-27 23:37:37.435409+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27196, 1, 'dashboard', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:22.504332+00', '{"cached":null,"ignore_cache":null,"context":null}'),
(27197, 1, 'card', 41, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.841563+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27198, 1, 'card', 100, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.842269+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27199, 1, 'card', 33, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.845125+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27200, 1, 'card', 37, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.847233+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27201, 1, 'card', 65, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.877258+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27202, 1, 'card', 99, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:23.879472+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27203, 1, 'card', 44, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.232406+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27204, 1, 'card', 35, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.290493+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27205, 1, 'card', 98, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.302512+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27206, 1, 'card', 40, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.3149+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27207, 1, 'card', 42, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.341986+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27208, 1, 'card', 38, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.369167+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27209, 1, 'card', 43, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.499516+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}');  
INSERT INTO "PUBLIC"."VIEW_LOG" VALUES
(27210, 1, 'card', 102, TIMESTAMP WITH TIME ZONE '2023-10-27 23:41:24.553787+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27211, 1, 'dashboard', 1, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.168729+00', '{"cached":null,"ignore_cache":null,"context":null}'),
(27212, 1, 'card', 33, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.63157+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27213, 1, 'card', 65, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.645924+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27214, 1, 'card', 37, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.67109+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27215, 1, 'card', 100, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.709097+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27216, 1, 'card', 99, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.766971+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27217, 1, 'card', 41, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.777936+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27218, 1, 'card', 35, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.987926+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27219, 1, 'card', 98, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.027979+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27220, 1, 'card', 38, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.120294+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27221, 1, 'card', 44, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.131499+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27222, 1, 'card', 40, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.153969+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27223, 1, 'card', 42, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.198548+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27224, 1, 'card', 43, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.230726+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}'),
(27225, 1, 'card', 102, TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.291951+00', '{"cached":null,"ignore_cache":false,"context":"dashboard"}');            
CREATE INDEX "PUBLIC"."IDX_VIEW_LOG_USER_ID" ON "PUBLIC"."VIEW_LOG"("USER_ID" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_VIEW_LOG_TIMESTAMP" ON "PUBLIC"."VIEW_LOG"("MODEL_ID" NULLS FIRST); 
CREATE CACHED TABLE "PUBLIC"."NATIVE_QUERY_SNIPPET" COMMENT 'Query snippets (raw text) to be substituted in native queries'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "NAME" CHARACTER VARYING(254) COMMENT 'Name of the query snippet' NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "CONTENT" CHARACTER LARGE OBJECT COMMENT 'Raw query snippet' NOT NULL,
    "CREATOR_ID" INTEGER NOT NULL,
    "ARCHIVED" BOOLEAN DEFAULT FALSE NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP NOT NULL,
    "COLLECTION_ID" INTEGER COMMENT 'ID of the Snippet Folder (Collection) this Snippet is in, if any',
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);  
ALTER TABLE "PUBLIC"."NATIVE_QUERY_SNIPPET" ADD CONSTRAINT "PUBLIC"."PK_NATIVE_QUERY_SNIPPET" PRIMARY KEY("ID");               
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.NATIVE_QUERY_SNIPPET;     
CREATE INDEX "PUBLIC"."IDX_SNIPPET_COLLECTION_ID" ON "PUBLIC"."NATIVE_QUERY_SNIPPET"("COLLECTION_ID" NULLS FIRST);             
CREATE INDEX "PUBLIC"."IDX_SNIPPET_NAME" ON "PUBLIC"."NATIVE_QUERY_SNIPPET"("NAME" NULLS FIRST);               
CREATE CACHED TABLE "PUBLIC"."SEGMENT"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "TABLE_ID" INTEGER NOT NULL,
    "CREATOR_ID" INTEGER NOT NULL,
    "NAME" CHARACTER VARYING(254) NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "ARCHIVED" BOOLEAN DEFAULT FALSE NOT NULL,
    "DEFINITION" CHARACTER LARGE OBJECT NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "POINTS_OF_INTEREST" CHARACTER LARGE OBJECT,
    "CAVEATS" CHARACTER LARGE OBJECT,
    "SHOW_IN_GETTING_STARTED" BOOLEAN DEFAULT FALSE NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);  
ALTER TABLE "PUBLIC"."SEGMENT" ADD CONSTRAINT "PUBLIC"."PK_SEGMENT" PRIMARY KEY("ID");         
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.SEGMENT;  
CREATE INDEX "PUBLIC"."IDX_SEGMENT_SHOW_IN_GETTING_STARTED" ON "PUBLIC"."SEGMENT"("SHOW_IN_GETTING_STARTED" NULLS FIRST);      
CREATE INDEX "PUBLIC"."IDX_SEGMENT_CREATOR_ID" ON "PUBLIC"."SEGMENT"("CREATOR_ID" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_SEGMENT_TABLE_ID" ON "PUBLIC"."SEGMENT"("TABLE_ID" NULLS FIRST);    
CREATE CACHED TABLE "PUBLIC"."PULSE_CHANNEL_RECIPIENT"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "PULSE_CHANNEL_ID" INTEGER NOT NULL,
    "USER_ID" INTEGER NOT NULL
);   
ALTER TABLE "PUBLIC"."PULSE_CHANNEL_RECIPIENT" ADD CONSTRAINT "PUBLIC"."PK_PULSE_CHANNEL_RECIPIENT" PRIMARY KEY("ID");         
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.PULSE_CHANNEL_RECIPIENT;  
CREATE CACHED TABLE "PUBLIC"."QRTZ_SIMPLE_TRIGGERS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "TRIGGER_NAME" CHARACTER VARYING(200) NOT NULL,
    "TRIGGER_GROUP" CHARACTER VARYING(200) NOT NULL,
    "REPEAT_COUNT" BIGINT NOT NULL,
    "REPEAT_INTERVAL" BIGINT NOT NULL,
    "TIMES_TRIGGERED" BIGINT NOT NULL
);       
ALTER TABLE "PUBLIC"."QRTZ_SIMPLE_TRIGGERS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_SIMPLE_TRIGGERS" PRIMARY KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");      
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_SIMPLE_TRIGGERS;     
CREATE CACHED TABLE "PUBLIC"."CARD_BOOKMARK" COMMENT 'Table holding bookmarks on cards'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "USER_ID" INTEGER COMMENT 'ID of the User who bookmarked the Card' NOT NULL,
    "CARD_ID" INTEGER COMMENT 'ID of the Card bookmarked by the user' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the bookmark was created' NOT NULL
);      
ALTER TABLE "PUBLIC"."CARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."PK_CARD_BOOKMARK" PRIMARY KEY("ID");             
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.CARD_BOOKMARK;            
CREATE INDEX "PUBLIC"."IDX_CARD_BOOKMARK_USER_ID" ON "PUBLIC"."CARD_BOOKMARK"("USER_ID" NULLS FIRST);          
CREATE INDEX "PUBLIC"."IDX_CARD_BOOKMARK_CARD_ID" ON "PUBLIC"."CARD_BOOKMARK"("CARD_ID" NULLS FIRST);          
CREATE CACHED TABLE "PUBLIC"."REPORT_CARD"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 97 RESTART WITH 104) DEFAULT ON NULL SELECTIVITY 100 NOT NULL,
    "CREATED_AT" TIMESTAMP SELECTIVITY 100 NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE SELECTIVITY 100 NOT NULL,
    "NAME" CHARACTER VARYING(254) SELECTIVITY 100 NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "DISPLAY" CHARACTER VARYING(254) SELECTIVITY 35 NOT NULL,
    "DATASET_QUERY" CHARACTER LARGE OBJECT NOT NULL,
    "VISUALIZATION_SETTINGS" CHARACTER LARGE OBJECT NOT NULL,
    "CREATOR_ID" INTEGER SELECTIVITY 5 NOT NULL,
    "DATABASE_ID" INTEGER SELECTIVITY 5 NOT NULL,
    "TABLE_ID" INTEGER SELECTIVITY 25,
    "QUERY_TYPE" CHARACTER VARYING(16) SELECTIVITY 10,
    "ARCHIVED" BOOLEAN DEFAULT FALSE SELECTIVITY 10 NOT NULL,
    "COLLECTION_ID" INTEGER SELECTIVITY 5 COMMENT 'Optional ID of Collection this Card belongs to.',
    "PUBLIC_UUID" CHARACTER(36) SELECTIVITY 5 COMMENT 'Unique UUID used to in publically-accessible links to this Card.',
    "MADE_PUBLIC_BY_ID" INTEGER SELECTIVITY 5 COMMENT 'The ID of the User who first publically shared this Card.',
    "ENABLE_EMBEDDING" BOOLEAN DEFAULT FALSE SELECTIVITY 5 COMMENT 'Is this Card allowed to be embedded in different websites (using a signed JWT)?' NOT NULL,
    "EMBEDDING_PARAMS" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON containing information about required parameters that must be supplied when embedding this Card.',
    "CACHE_TTL" INTEGER SELECTIVITY 5 COMMENT 'The maximum time, in seconds, to return cached results for this Card rather than running a new query.',
    "RESULT_METADATA" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON containing metadata about the result columns from running the query.',
    "COLLECTION_POSITION" SMALLINT SELECTIVITY 5 COMMENT 'Optional pinned position for this item in its Collection. NULL means item is not pinned.',
    "DATASET" BOOLEAN DEFAULT 'false' SELECTIVITY 5 COMMENT 'Indicate whether question is a dataset' NOT NULL,
    "ENTITY_ID" CHARACTER(21) SELECTIVITY 45 COMMENT 'Random NanoID tag for unique identity.',
    "PARAMETERS" CHARACTER LARGE OBJECT COMMENT 'List of parameter associated to a card',
    "PARAMETER_MAPPINGS" CHARACTER LARGE OBJECT COMMENT 'List of parameter associated to a card',
    "COLLECTION_PREVIEW" BOOLEAN DEFAULT TRUE SELECTIVITY 5 COMMENT 'Indicating whether the card should be visualized in the collection preview' NOT NULL
);              
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."PK_REPORT_CARD" PRIMARY KEY("ID"); 
-- 20 +/- SELECT COUNT(*) FROM PUBLIC.REPORT_CARD;             
INSERT INTO SYSTEM_LOB_STREAM VALUES(76, 0, '{"type":"native","native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol a', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(76, 1, 'nd pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2}', NULL);   
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(1, TIMESTAMP '2022-11-21 21:01:08.314', TIMESTAMP WITH TIME ZONE '2023-05-03 13:36:34.164403+00', 'Positions', NULL, 'table', SYSTEM_COMBINE_CLOB(76), '{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0.15,"min_type":"custom","operator":"=","max_type":"custom"},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"}}}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"symbol","field_ref":["field","symbol",{"base-type":"type/Text"}],"name":"symbol","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":33,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.688888888888889}}}},{"display_name":"side","field_ref":["field","side",{"base-type":"type/Text"}],"name":"side","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":2,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":4.2444444444444445}}}},{"display_name":"Exposure","field_ref":["field","Exposure",{"base-type":"type/Float"}],"name":"Exposure","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":12,"nil%":0.0},"type":{"type/Number":{"min":0.001,"q1":0.001094701363993821,"q3":0.0036396203899719368,"max":0.1,"sd":0.018902808299725245,"avg":0.007155555555555556}}}},{"display_name":"order_count","field_ref":["field","order_count",{"base-type":"type/Integer"}],"name":"order_count","base_type":"type/Integer","effective_type":"type/Integer","semantic_type":"type/Quantity","fingerprint":{"global":{"distinct-count":6,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":1.1318272365444426,"max":10.0,"sd":1.7050134037803653,"avg":0.8444444444444443}}}},{"display_name":"UPNL","field_ref":["field","UPNL",{"base-type":"type/Float"}],"name":"UPNL","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":45,"nil%":0.0},"type":{"type/Number":{"min":-1.4532801010000027,"q1":-0.029249999999999735,"q3":0.0010122749999999232,"max":0.11190596000000158,"sd":0.22264646859290216,"avg":-0.051918787831111105}}}},{"display_name":"Position value","field_ref":["field","Position value",{"base-type":"type/Float"}],"name":"Position value","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":45,"nil%":0.0},"type":{"type/Number":{"min":0.731456,"q1":1.234605,"q3":3.5580289,"max":100.12458010099999,"sd":18.911572434042707,"avg":7.226710712453334}}}},{"display_name":"Position size","field_ref":["field","Position size",{"base-type":"type/Float"}],"name":"Position size","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":42,"nil%":0.0},"type":{"type/Number":{"min":0.01,"q1":1.5750000000000002,"q3":45.25,"max":3000.0,"sd":608.9091406153709,"avg":202.59022222222222}}}},{"display_name":"Entry Price","field_ref":["field","Entry Price",{"base-type":"type/Float"}],"name":"Entry Price","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":43,"nil%":0.0},"type":{"type/Number":{"min":9.0E-4,"q1":0.078025,"q3":1.48615,"max":322.0,"sd":47.96335371891289,"avg":9.16088888888889}}}},{"display_name":"<Current price>","field_ref":["field","<Current price>",{"base-type":"type/Float"}],"name":"<Current price>","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":35,"nil%":0.0},"type":{"type/Number":{"min":9.0E-4,"q1":0.077925,"q3":1.5083117350416466,"max":322.75,"sd":48.07038495182139,"avg":9.156894577777777}}}},{"display_name":"Next DCA","field_ref":["field","Next DCA",{"base-type":"type/Float"}],"name":"Next DCA","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":21,"nil%":0.5555555555555556},"type":{"type/Number":{"min":0.08152,"q1":0.4286,"q3":4.2225,"max":339.85,"sd":75.44662559814486,"avg":20.906874500000004}}}}]', NULL, FALSE, NULL, '[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}]', NULL, TRUE);         
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(33, TIMESTAMP '2022-11-22 08:13:24.878', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.628307+00', 'Wallet balance', NULL, 'scalar', '{"type":"query","query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"database":2}', '{"column_settings":{"[\"name\",\"sum\"]":{"number_style":"currency"}}}', 1, 2, 7, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"Sum of TotalWalletBalance","semantic_type":null,"settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":960.0101657099999,"q1":960.0101657099999,"q3":960.0101657099999,"max":960.0101657099999,"sd":null,"avg":960.0101657099999}}}}]', NULL, FALSE, NULL, NULL, NULL, TRUE),
(35, TIMESTAMP '2022-11-22 08:20:57.31', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.8852+00', 'Unrealized PNL', NULL, 'scalar', '{"type":"query","query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"database":2}', '{"column_settings":{"[\"name\",\"sum\"]":{"number_style":"currency"}}}', 1, 2, 7, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"Sum of TotalUnrealizedProfit","semantic_type":null,"settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":-53.92500476,"q1":-53.92500476,"q3":-53.92500476,"max":-53.92500476,"sd":null,"avg":-53.92500476}}}}]', NULL, FALSE, NULL, NULL, NULL, TRUE),
(36, TIMESTAMP '2022-11-22 08:23:45.21', TIMESTAMP WITH TIME ZONE '2023-04-13 10:51:06.729628+00', 'Current BTC price', NULL, 'scalar', '{"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"type":"query"}', '{"scalar.field":"price","column_settings":{"[\"ref\",[\"field\",83,null]]":{"number_style":"currency","prefix":"BTC: "}}}', 1, 2, 10, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":"type/Category","coercion_strategy":null,"name":"symbol","settings":null,"field_ref":["field",82,null],"effective_type":"type/Text","id":82,"visibility_type":"normal","display_name":"Symbol","fingerprint":{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}},"base_type":"type/Text"},{"description":null,"semantic_type":null,"coercion_strategy":null,"name":"price","settings":null,"field_ref":["field",83,null],"effective_type":"type/Float","id":83,"visibility_type":"normal","display_name":"Price","fingerprint":{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":15804.2,"q1":15804.2,"q3":15804.2,"max":15804.2,"sd":null,"avg":15804.2}}},"base_type":"type/Float"}]', NULL, FALSE, NULL, NULL, NULL, TRUE),
(37, TIMESTAMP '2022-11-22 08:42:22.006', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.668705+00', 'Daily PNL', NULL, 'combo', '{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2}', '{"graph.show_goal":false,"graph.y_axis.title_text":"PNL","graph.show_values":true,"graph.x_axis.title_text":"Date","graph.y_axis.scale":"linear","graph.label_value_frequency":"fit","graph.metrics":["Total PnL","PnL"],"graph.label_value_formatting":"auto","series_settings":{"sum":{"title":"PNL","display":"area","line.missing":"zero"},"PnL":{"color":"#A7D07C","display":"bar","line.interpolate":"cardinal","line.marker_enabled":null,"axis":null,"show_series_values":true},"Total PnL":{"color":"#509EE3","display":"area","line.interpolate":"cardinal","line.marker_enabled":null,"axis":null}},"graph.x_axis.scale":"timeseries","graph.dimensions":["Date"],"waterfall.show_total":false}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"Date","field_ref":["field","Date",{"base-type":"type/Text"}],"name":"Date","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":10.0}}}},{"display_name":"PnL","field_ref":["field","PnL",{"base-type":"type/Float"}],"name":"PnL","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":-19.405452399999994,"q1":1.0721764425,"q3":3.450317177500002,"max":4.18084258,"sd":5.893412806522204,"avg":0.4287316180000005}}}},{"display_name":"Total PnL","field_ref":["field","Total PnL",{"base-type":"type/Float"}],"name":"Total PnL","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":3.5471471800000023,"q1":5.595854512500003,"q3":19.043401825000004,"max":24.043070000000007,"sd":7.286072813352741,"avg":13.025208260000003}}}}]', NULL, FALSE, NULL, '[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"list","values_source_type":"card","values_source_config":{"card_id":103,"value_field":["field","account",{"base-type":"type/Text"}]}}]', NULL, TRUE);
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(38, TIMESTAMP '2022-11-22 08:47:27.064', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.117854+00', 'ADG (%)', NULL, 'line', '{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native"}', '{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.series_order_dimension":null,"graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":["AVG(adg)"],"graph.label_value_formatting":"auto","graph.series_order":null,"table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"time","field_ref":["field","time",{"base-type":"type/Text"}],"name":"time","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":67,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":10.0}}}},{"display_name":"AVG(adg)","field_ref":["field","AVG(adg)",{"base-type":"type/Float"}],"name":"AVG(adg)","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":67,"nil%":0.0},"type":{"type/Number":{"min":-4.695686908046032,"q1":0.13575257178560576,"q3":0.37963245773547705,"max":1.276637601422647,"sd":1.0328738919329585,"avg":0.029752332618636804}}}}]', NULL, FALSE, NULL, '[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"none"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days"}]', NULL, TRUE),
(39, TIMESTAMP '2022-11-22 08:53:38.239', TIMESTAMP WITH TIME ZONE '2023-04-03 20:14:59.294665+00', 'TP count', NULL, 'line', '{"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"type":"query"}', '{"graph.show_values":true,"series_settings":{"count":{"line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.dimensions":["time"],"graph.metrics":["count"]}', 1, 2, 14, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":null,"coercion_strategy":null,"unit":"day","name":"time","settings":null,"field_ref":["field",113,{"temporal-unit":"day"}],"effective_type":"type/Float","id":113,"visibility_type":"normal","display_name":"Time","fingerprint":{"global":{"distinct-count":1207,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-10-24T14:44:46Z","latest":"2022-11-20T21:03:51Z"}}},"base_type":"type/Float"},{"display_name":"Count","semantic_type":"type/Quantity","field_ref":["aggregation",0],"name":"count","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":0,"nil%":null},"type":{"type/Number":{"min":null,"q1":null,"q3":null,"max":null,"sd":null,"avg":null}}}}]', NULL, FALSE, NULL, NULL, NULL, TRUE);  
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(40, TIMESTAMP '2022-11-22 09:20:51.089', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.146343+00', 'This month earners', NULL, 'bar', '{"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"type":"query"}', '{"graph.dimensions":["symbol"],"graph.metrics":["sum"]}', 1, 2, 14, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":"type/Category","coercion_strategy":null,"name":"symbol","settings":null,"field_ref":["field",115,null],"effective_type":"type/Text","id":115,"visibility_type":"normal","display_name":"Symbol","fingerprint":{"global":{"distinct-count":8,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":8.194250194250195}}},"base_type":"type/Text"},{"display_name":"Sum of Income","semantic_type":"type/Income","settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":83,"nil%":0.0},"type":{"type/Number":{"min":-30.30047458999999,"q1":0.00799205235382774,"q3":0.43666023000000004,"max":9.21246793,"sd":3.7064125600483533,"avg":0.2471154153012049}}}}]', NULL, FALSE, NULL, NULL, NULL, TRUE),
(41, TIMESTAMP '2022-11-22 09:39:53.521', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.755468+00', 'Today''s earners', NULL, 'bar', '{"type":"query","query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2}', '{"graph.show_values":true,"graph.show_goal":true,"graph.goal_label":"PnL","graph.label_value_frequency":"all","graph.label_value_formatting":"compact","series_settings":{"sum":{"color":"#A989C5"}},"graph.dimensions":["symbol"],"graph.metrics":["sum"]}', 1, 2, 14, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":"type/Category","coercion_strategy":null,"name":"symbol","settings":null,"field_ref":["field",115,null],"effective_type":"type/Text","id":115,"visibility_type":"normal","display_name":"Symbol","fingerprint":{"global":{"distinct-count":8,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":8.194250194250195}}},"base_type":"type/Text"},{"display_name":"Sum of Income","semantic_type":"type/Income","settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":20,"nil%":0.0},"type":{"type/Number":{"min":0.00233418,"q1":0.010498529999999999,"q3":0.1740238,"max":0.84560012,"sd":0.242039202839721,"avg":0.14178115149999998}}}}]', NULL, FALSE, NULL, NULL, NULL, TRUE),
(42, TIMESTAMP '2022-11-22 09:45:44.325', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.193168+00', 'Yesterday''s earners', NULL, 'bar', '{"type":"query","query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2}', '{"graph.show_goal":true,"graph.y_axis.title_text":"Income","graph.show_values":true,"graph.goal_label":"PnL","graph.label_value_frequency":"all","graph.metrics":["sum"],"graph.label_value_formatting":"compact","series_settings":{"sum":{"color":"#A989C5"}},"graph.dimensions":["symbol"]}', 1, 2, 14, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":"type/Category","coercion_strategy":null,"name":"symbol","settings":null,"field_ref":["field",115,null],"effective_type":"type/Text","id":115,"visibility_type":"normal","display_name":"Symbol","fingerprint":{"global":{"distinct-count":8,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":8.194250194250195}}},"base_type":"type/Text"},{"display_name":"Sum of Income","semantic_type":"type/Income","settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":28,"nil%":0.0},"type":{"type/Number":{"min":-22.99650002999999,"q1":0.00431635,"q3":0.17457013500000002,"max":0.7554438,"sd":4.37548390910945,"avg":-0.693051871428571}}}}]', NULL, FALSE, NULL, NULL, NULL, TRUE);        
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(43, TIMESTAMP '2022-11-22 09:52:05.109', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.225243+00', 'Daily balance', NULL, 'table', '{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"database":2}', '{"table.columns":[{"name":"id","fieldRef":["field",48,null],"enabled":false},{"name":"registration_datetime","fieldRef":["field",46,{"temporal-unit":"default"}],"enabled":false},{"name":"totalWalletBalance","fieldRef":["field",47,null],"enabled":true},{"name":"account","fieldRef":["field",50,null],"enabled":false},{"name":"day","field_ref":["field",49,null],"enabled":true}],"table.pivot_column":"totalWalletBalance","table.cell_column":"day"}', 1, 2, 6, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":null,"coercion_strategy":null,"unit":"day","name":"day","settings":null,"field_ref":["field",49,{"temporal-unit":"day"}],"effective_type":"type/Text","id":49,"visibility_type":"normal","display_name":"Day","fingerprint":{"global":{"distinct-count":28,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-10-24T00:00:00Z","latest":"2022-11-20T00:00:00Z"}}},"base_type":"type/Text"},{"display_name":"Sum of TotalWalletBalance","semantic_type":null,"settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":30,"nil%":0.0},"type":{"type/Number":{"min":461.06144074,"q1":477.4063199,"q3":499.23871281,"max":977.62226144,"sd":212.0443906565492,"avg":595.6315022966667}}}}]', NULL, FALSE, NULL, NULL, NULL, TRUE),
(44, TIMESTAMP '2022-11-22 09:54:49.05', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.129145+00', 'Monthly summary', NULL, 'table', '{"database":2,"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"type":"native"}', '{"table.column_formatting":[{"columns":["PNL (%)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"columns":["PNL (%)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false}],"table.pivot_column":"Month","table.cell_column":"PNL ($)","column_settings":{"[\"name\",\"PNL (%)\"]":{"number_style":"percent","view_as":null,"show_mini_bar":true}}}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"Month","field_ref":["field","Month",{"base-type":"type/Text"}],"name":"Month","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":3,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":9.0}}}},{"display_name":"PNL ($)","field_ref":["field","PNL ($)",{"base-type":"type/Float"}],"name":"PNL ($)","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":3,"nil%":0.0},"type":{"type/Number":{"min":-34.440959209999974,"q1":-20.996878444999986,"q3":20.216775564999978,"max":20.510579469999975,"sd":31.39253004805046,"avg":1.8016613699999955}}}},{"display_name":"PNL (%)","field_ref":["field","PNL (%)",{"base-type":"type/Float"}],"name":"PNL (%)","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":2,"nil%":0.6666666666666667},"type":{"type/Number":{"min":-0.06811555824776161,"q1":-0.06811555824776161,"q3":-0.06811555824776161,"max":-0.06811555824776161,"sd":null,"avg":-0.06811555824776161}}}},{"display_name":"Balance","field_ref":["field","Balance",{"base-type":"type/Float"}],"name":"Balance","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":3,"nil%":0.3333333333333333},"type":{"type/Number":{"min":471.18448226,"q1":471.18448226,"q3":505.6254414700001,"max":505.6254414700001,"sd":24.353435807960373,"avg":488.404961865}}}}]', NULL, FALSE, NULL, '[{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}]', NULL, TRUE); 
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(65, TIMESTAMP '2022-11-22 13:49:36.033', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.637812+00', 'Wallet exposure', NULL, 'gauge', '{"type":"native","native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2}', '{"gauge.segments":[{"min":0,"max":1,"color":"#88BF4D","label":""},{"min":1,"max":2,"color":"#F9CF48","label":""},{"min":2,"max":3,"color":"#ED6E6E","label":""}],"column_settings":{"[\"name\",\"AVG(e.Exposure)\"]":{"number_style":"percent"}}}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"AVG(e.Exposure)","field_ref":["field","AVG(e.Exposure)",{"base-type":"type/Float"}],"name":"AVG(e.Exposure)","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":1.6695,"q1":1.6695,"q3":1.6695,"max":1.6695,"sd":null,"avg":1.6695}}}}]', NULL, FALSE, 'VzbOqaY9nb93_odTaudaO', '[{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}]', '[]', TRUE),
(97, TIMESTAMP '2023-04-13 10:39:45.919394', TIMESTAMP WITH TIME ZONE '2023-05-02 19:10:53.723479+00', 'Avg ADG (%)', NULL, 'scalar', '{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2}', '{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["AVG(adg)"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"AVG(aadg)","field_ref":["field","AVG(aadg)",{"base-type":"type/Float"}],"name":"AVG(aadg)","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":-0.0976601455049285,"q1":-0.0976601455049285,"q3":-0.0976601455049285,"max":-0.0976601455049285,"sd":null,"avg":-0.0976601455049285}}}}]', NULL, FALSE, 'OWQcyXyiXVLMWMrK0j8gQ', '[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}]', '[]', TRUE);  
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(98, TIMESTAMP '2023-05-02 18:26:22.186573', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.02542+00', 'Avg Monthly ADG (%)', NULL, 'waterfall', '{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, year, month\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2}', '{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"Adg","graph.x_axis.title_text":"Date","graph.metrics":["Adg"],"table.pivot_column":"Date","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["Date"]}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"Date","field_ref":["field","Date",{"base-type":"type/Text"}],"name":"Date","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":3,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}},{"display_name":"Adg","field_ref":["field","Adg",{"base-type":"type/Float"}],"name":"Adg","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":3,"nil%":0.0},"type":{"type/Number":{"min":-6.811555824776176,"q1":-4.563812816735558,"q3":3.5269265955582023,"max":3.9760967249488384,"sd":5.779836884937514,"avg":-0.21868096414701466}}}}]', NULL, FALSE, 'DWeLtcV5PVtqqRNXD8qEi', '[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}]', '[]', TRUE),
(99, TIMESTAMP '2023-05-02 21:44:34.335673', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.758712+00', 'Positions - Long', NULL, 'table', '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2}', '{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"}}}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"symbol","field_ref":["field","symbol",{"base-type":"type/Text"}],"name":"symbol","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":8.333333333333334}}}},{"display_name":"Exposure","field_ref":["field","Exposure",{"base-type":"type/Float"}],"name":"Exposure","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":14,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.008026334038989724,"q3":0.06875,"max":0.275,"sd":0.07057336608097987,"avg":0.047799999999999995}}}},{"display_name":"UPNL","field_ref":["field","UPNL",{"base-type":"type/Float"}],"name":"UPNL","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.06666666666666667},"type":{"type/Number":{"min":-2.3923497600000054,"q1":-0.7276993500000002,"q3":-1.4000000000000123E-5,"max":0.048700799999999995,"sd":0.7320752223475391,"avg":-0.47649379607142894}}}},{"display_name":"Position value","field_ref":["field","Position value",{"base-type":"type/Float"}],"name":"Position value","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":0.005687,"q1":2.8773444,"q3":33.43087001800001,"max":133.95074976,"sd":34.406300366804324,"avg":23.278455076333334}}}},{"display_name":"Position size","field_ref":["field","Position size",{"base-type":"type/Float"}],"name":"Position size","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":0.3,"q1":6.25,"q3":205.0,"max":7500.0,"sd":2355.5621248643047,"avg":1054.3466666666668}}}},{"display_name":"Entry Price","field_ref":["field","Entry Price",{"base-type":"type/Float"}],"name":"Entry Price","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":0.0012,"q1":0.0065,"q3":0.898825,"max":2.3768,"sd":0.7832951454926687,"avg":0.6269066666666667}}}},{"display_name":"<Current price>","field_ref":["field","<Current price>",{"base-type":"type/Float"}],"name":"<Current price>","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.06666666666666667},"type":{"type/Number":{"min":0.0011685,"q1":0.0062,"q3":0.9136,"max":2.348,"sd":0.805036290136762,"avg":0.6514906071428571}}}}]', NULL, FALSE, 'YSBHv0gw9SmOlP2cJrBP8', '[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}]', '[]', TRUE);     
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(100, TIMESTAMP '2023-05-02 21:47:07.936274', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:29.706138+00', 'Positions - Short', NULL, 'table', '{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2}', '{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"single","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"}}}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"symbol","field_ref":["field","symbol",{"base-type":"type/Text"}],"name":"symbol","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":8.333333333333334}}}},{"display_name":"Exposure","field_ref":["field","Exposure",{"base-type":"type/Float"}],"name":"Exposure","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":13,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0015,"q3":0.297,"max":0.976,"sd":0.3054263218768777,"avg":0.17466666666666666}}}},{"display_name":"UPNL","field_ref":["field","UPNL",{"base-type":"type/Float"}],"name":"UPNL","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":-12.950193549999977,"q1":-4.905929475000018,"q3":-0.02991747599999974,"max":-1.4444000000013446E-4,"sd":5.175979863772921,"avg":-2.981778645766667}}}},{"display_name":"Position value","field_ref":["field","Position value",{"base-type":"type/Float"}],"name":"Position value","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":0.0251,"q1":0.78946389,"q3":140.51045124112503,"max":475.45130645,"sd":148.5262604110114,"avg":84.69085408756668}}}},{"display_name":"Position size","field_ref":["field","Position size",{"base-type":"type/Float"}],"name":"Position size","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":0.1,"q1":7.6,"q3":1225.0,"max":7500.0,"sd":1963.142482317815,"avg":1108.6966666666667}}}},{"display_name":"Entry Price","field_ref":["field","Entry Price",{"base-type":"type/Float"}],"name":"Entry Price","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":0.0011,"q1":0.006325000000000001,"q3":0.519675,"max":96.4942,"sd":24.859111076437685,"avg":6.639293333333334}}}},{"display_name":"<Current price>","field_ref":["field","<Current price>",{"base-type":"type/Float"}],"name":"<Current price>","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":15,"nil%":0.0},"type":{"type/Number":{"min":0.0011685,"q1":0.006415,"q3":0.5205500000000001,"max":103.375,"sd":26.633710164374225,"avg":7.1052639}}}}]', NULL, FALSE, 'jyCr4xDoYRhw9cyRf0fxY', '[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}]', '[]', TRUE);         
INSERT INTO "PUBLIC"."REPORT_CARD" VALUES
(101, TIMESTAMP '2023-06-20 22:25:12.328786', TIMESTAMP WITH TIME ZONE '2023-06-20 22:27:08.906845+00', 'Total Equity', NULL, 'table', '{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"database":2}', '{"table.columns":[{"name":"id","fieldRef":["field",48,null],"enabled":false},{"name":"registration_datetime","fieldRef":["field",46,{"temporal-unit":"default"}],"enabled":false},{"name":"totalWalletBalance","fieldRef":["field",47,null],"enabled":true},{"name":"account","fieldRef":["field",50,null],"enabled":false},{"name":"day","field_ref":["field",49,null],"enabled":true}],"table.pivot_column":"totalWalletBalance","table.cell_column":"day"}', 1, 2, 6, 'query', TRUE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":null,"coercion_strategy":null,"unit":"day","name":"day","settings":null,"field_ref":["field",49,{"temporal-unit":"day"}],"effective_type":"type/Text","id":49,"visibility_type":"normal","display_name":"Day","fingerprint":{"global":{"distinct-count":28,"nil%":0},"type":{"type/DateTime":{"earliest":"2022-10-24T00:00:00Z","latest":"2022-11-20T00:00:00Z"}}},"base_type":"type/Text"},{"display_name":"Sum of TotalWalletBalance","semantic_type":null,"settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":30,"nil%":0},"type":{"type/Number":{"min":1575.0044335000002,"q1":1598.07708267,"q3":1622.95386035,"max":5577.76810198,"sd":724.0619150499044,"avg":1746.5135638343334}}}}]', NULL, FALSE, 'eqGR9H6AeNPDGmPsBn9AQ', '[]', '[]', TRUE),
(102, TIMESTAMP '2023-07-02 14:22:57.336957', TIMESTAMP WITH TIME ZONE '2023-10-27 23:42:30.289491+00', 'All time earners', NULL, 'bar', '{"type":"query","query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2}', '{"graph.dimensions":["symbol"],"graph.metrics":["sum"]}', 1, 2, 14, 'query', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"description":null,"semantic_type":"type/Category","coercion_strategy":null,"name":"symbol","settings":null,"field_ref":["field",115,null],"effective_type":"type/Text","id":115,"visibility_type":"normal","display_name":"Symbol","fingerprint":{"global":{"distinct-count":8,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":8.194250194250195}}},"base_type":"type/Text"},{"display_name":"Sum of Income","semantic_type":"type/Income","settings":null,"field_ref":["aggregation",0],"name":"sum","base_type":"type/Float","effective_type":"type/Float","fingerprint":{"global":{"distinct-count":85,"nil%":0.0},"type":{"type/Number":{"min":-56.16472837,"q1":0.018976383333333333,"q3":0.7496368200000001,"max":22.59445984999998,"sd":7.525124091313791,"avg":0.06358804835294093}}}}]', NULL, FALSE, 'cnunBcZSBM7LSEvkbH3U4', '[]', '[]', TRUE),
(103, TIMESTAMP '2023-07-20 16:45:31.573578', TIMESTAMP WITH TIME ZONE '2023-07-20 16:45:31.573578+00', 'Balances', NULL, 'table', '{"type":"native","native":{"query":"Select * from BALANCE","template-tags":{}},"database":2}', '{"table.pivot_column":"id","table.cell_column":"totalWalletBalance"}', 1, 2, NULL, 'native', FALSE, NULL, NULL, NULL, FALSE, NULL, NULL, '[{"display_name":"id","field_ref":["field","id",{"base-type":"type/Integer"}],"name":"id","base_type":"type/Integer","effective_type":"type/Integer","semantic_type":"type/PK","fingerprint":null},{"display_name":"registration_datetime","field_ref":["field","registration_datetime",{"base-type":"type/DateTime"}],"name":"registration_datetime","base_type":"type/DateTime","effective_type":"type/DateTime","semantic_type":null,"fingerprint":{"global":{"distinct-count":4,"nil%":0},"type":{"type/DateTime":{"earliest":"2023-07-20T16:44:29Z","latest":"2023-07-20T16:44:58Z"}}}},{"display_name":"totalWalletBalance","field_ref":["field","totalWalletBalance",{"base-type":"type/Float"}],"name":"totalWalletBalance","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":4,"nil%":0},"type":{"type/Number":{"min":0,"q1":251.889894895,"q3":2905.0062754499995,"max":4784.95394893,"sd":2178.2508332081056,"avg":1578.4480851724998}}}},{"display_name":"totalUnrealizedProfit","field_ref":["field","totalUnrealizedProfit",{"base-type":"type/Float"}],"name":"totalUnrealizedProfit","base_type":"type/Float","effective_type":"type/Float","semantic_type":null,"fingerprint":{"global":{"distinct-count":4,"nil%":0},"type":{"type/Number":{"min":-165.65156,"q1":-86.34684999999999,"q3":0.65991,"max":1.31982,"sd":81.95429885914466,"avg":-42.843469999999996}}}},{"display_name":"account","field_ref":["field","account",{"base-type":"type/Text"}],"name":"account","base_type":"type/Text","effective_type":"type/Text","semantic_type":null,"fingerprint":{"global":{"distinct-count":4,"nil%":0},"type":{"type/Text":{"percent-json":0,"percent-url":0,"percent-email":0,"percent-state":0,"average-length":8}}}}]', NULL, FALSE, 'bbV8FKxhZI0tBf-hgjPPY', '[]', '[]', TRUE);              
CREATE INDEX "PUBLIC"."IDX_CARD_CREATOR_ID" ON "PUBLIC"."REPORT_CARD"("CREATOR_ID" NULLS FIRST);               
CREATE INDEX "PUBLIC"."IDX_CARD_COLLECTION_ID" ON "PUBLIC"."REPORT_CARD"("COLLECTION_ID" NULLS FIRST);         
CREATE INDEX "PUBLIC"."IDX_CARD_PUBLIC_UUID" ON "PUBLIC"."REPORT_CARD"("PUBLIC_UUID" NULLS FIRST);             
CREATE CACHED TABLE "PUBLIC"."QRTZ_CRON_TRIGGERS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) SELECTIVITY 9 NOT NULL,
    "TRIGGER_NAME" CHARACTER VARYING(200) SELECTIVITY 100 NOT NULL,
    "TRIGGER_GROUP" CHARACTER VARYING(200) SELECTIVITY 9 NOT NULL,
    "CRON_EXPRESSION" CHARACTER VARYING(120) SELECTIVITY 90 NOT NULL,
    "TIME_ZONE_ID" CHARACTER VARYING(80) SELECTIVITY 9
); 
ALTER TABLE "PUBLIC"."QRTZ_CRON_TRIGGERS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_CRON_TRIGGERS" PRIMARY KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");          
-- 11 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_CRON_TRIGGERS;      
INSERT INTO "PUBLIC"."QRTZ_CRON_TRIGGERS" VALUES
('MetabaseScheduler', 'metabase.task.update-field-values.trigger.1', 'DEFAULT', '0 0 7 * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.update-field-values.trigger.2', 'DEFAULT', '0 0 6 * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.sync-and-analyze.trigger.2', 'DEFAULT', '0 29 * * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.sync-and-analyze.trigger.1', 'DEFAULT', '0 41 * * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.upgrade-checks.trigger', 'DEFAULT', '0 15 6,18 * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.anonymous-stats.trigger', 'DEFAULT', '0 41 15 * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.refresh-channel-cache.trigger', 'DEFAULT', '0 36 0/4 1/1 * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.send-pulses.trigger', 'DEFAULT', '0 0 * * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.follow-up-emails.trigger', 'DEFAULT', '0 0 12 * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.task-history-cleanup.trigger', 'DEFAULT', '0 0 0 * * ? *', 'GMT'),
('MetabaseScheduler', 'metabase.task.truncate-audit-log.trigger', 'DEFAULT', '0 0 */12 * * ? *', 'GMT'); 
CREATE CACHED TABLE "PUBLIC"."METABASE_DATABASE"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) DEFAULT ON NULL NOT NULL,
    "CREATED_AT" TIMESTAMP DEFAULT LOCALTIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP DEFAULT LOCALTIMESTAMP NOT NULL,
    "NAME" CHARACTER VARYING(254) NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "DETAILS" CHARACTER LARGE OBJECT NOT NULL,
    "ENGINE" CHARACTER VARYING(254) NOT NULL,
    "IS_SAMPLE" BOOLEAN DEFAULT FALSE NOT NULL,
    "IS_FULL_SYNC" BOOLEAN DEFAULT TRUE NOT NULL,
    "POINTS_OF_INTEREST" CHARACTER LARGE OBJECT,
    "CAVEATS" CHARACTER LARGE OBJECT,
    "METADATA_SYNC_SCHEDULE" CHARACTER VARYING(254) DEFAULT '0 50 * * * ? *' COMMENT 'The cron schedule string for when this database should undergo the metadata sync process (and analysis for new fields).' NOT NULL,
    "CACHE_FIELD_VALUES_SCHEDULE" CHARACTER VARYING(254) DEFAULT '0 50 0 * * ? *' COMMENT 'The cron schedule string for when FieldValues for eligible Fields should be updated.' NOT NULL,
    "TIMEZONE" CHARACTER VARYING(254) COMMENT 'Timezone identifier for the database, set by the sync process',
    "IS_ON_DEMAND" BOOLEAN DEFAULT 'false' COMMENT 'Whether we should do On-Demand caching of FieldValues for this DB. This means FieldValues are updated when their Field is used in a Dashboard or Card param.' NOT NULL,
    "OPTIONS" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON containing various options like QB behavior.',
    "AUTO_RUN_QUERIES" BOOLEAN DEFAULT TRUE COMMENT 'Whether to automatically run queries when doing simple filtering and summarizing in the Query Builder.' NOT NULL,
    "REFINGERPRINT" BOOLEAN COMMENT 'Whether or not to enable periodic refingerprinting for this Database.',
    "CACHE_TTL" INTEGER COMMENT 'Granular cache TTL for specific database.',
    "INITIAL_SYNC_STATUS" CHARACTER VARYING(32) DEFAULT 'complete' COMMENT 'String indicating whether a database has completed its initial sync and is ready to use' NOT NULL,
    "CREATOR_ID" INTEGER COMMENT 'ID of the admin who added the database',
    "SETTINGS" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON containing Database-local Settings for this Database',
    "DBMS_VERSION" CHARACTER LARGE OBJECT COMMENT 'A JSON object describing the flavor and version of the DBMS.',
    "IS_AUDIT" BOOLEAN DEFAULT FALSE COMMENT 'Only the app db, visible to admins via auditing should have this set true.' NOT NULL
);          
ALTER TABLE "PUBLIC"."METABASE_DATABASE" ADD CONSTRAINT "PUBLIC"."PK_METABASE_DATABASE" PRIMARY KEY("ID");     
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.METABASE_DATABASE;        
INSERT INTO "PUBLIC"."METABASE_DATABASE" VALUES
(1, TIMESTAMP '2022-11-21 20:55:29.311', TIMESTAMP '2023-10-27 23:41:21.446583', 'Sample Database', 'Some example data for you to play around with as you embark on your Metabase journey.', '{"db":"file:/app/plugins/sample-database.db;USER=GUEST;PASSWORD=guest"}', 'h2', TRUE, TRUE, 'You can find all sorts of different joinable tables ranging from products to people to reviews here.', 'You probably don''t want to use this for your business-critical analyses, but hey, it''s your world, we''re just living in it.', '0 41 * * * ? *', '0 0 7 * * ? *', 'UTC', FALSE, NULL, TRUE, NULL, NULL, 'complete', NULL, NULL, '{"flavor":"H2","version":"2.1.214 (2022-06-13)","semantic-version":[2,1]}', FALSE),
(2, TIMESTAMP '2022-11-21 20:57:59.152', TIMESTAMP '2022-11-22 13:29:00.026', 'exchanges_db', NULL, '{"db":"/data/exchanges_db.sqlite","ssl":true}', 'sqlite', FALSE, TRUE, NULL, NULL, '0 29 * * * ? *', '0 0 6 * * ? *', 'UTC', FALSE, NULL, TRUE, NULL, NULL, 'complete', NULL, NULL, '{"flavor":"SQLite","version":"3.40.0","semantic-version":[3,40]}', FALSE); 
CREATE CACHED TABLE "PUBLIC"."PERMISSIONS"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 65 RESTART WITH 70) DEFAULT ON NULL NOT NULL,
    "OBJECT" CHARACTER VARYING(254) NOT NULL,
    "GROUP_ID" INTEGER NOT NULL
);        
ALTER TABLE "PUBLIC"."PERMISSIONS" ADD CONSTRAINT "PUBLIC"."PK_PERMISSIONS" PRIMARY KEY("ID"); 
-- 9 +/- SELECT COUNT(*) FROM PUBLIC.PERMISSIONS;              
INSERT INTO "PUBLIC"."PERMISSIONS" VALUES
(1, '/', 2),
(2, '/collection/root/', 1),
(4, '/db/1/', 1),
(5, '/db/2/', 1),
(6, '/collection/4/', 1),
(33, '/download/db/1/', 1),
(34, '/download/db/2/', 1),
(35, '/application/subscription/', 1),
(69, '/download/db/1/native/', 1);            
CREATE INDEX "PUBLIC"."IDX_PERMISSIONS_GROUP_ID" ON "PUBLIC"."PERMISSIONS"("GROUP_ID" NULLS FIRST);            
CREATE INDEX "PUBLIC"."IDX_PERMISSIONS_OBJECT" ON "PUBLIC"."PERMISSIONS"("OBJECT" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_PERMISSIONS_GROUP_ID_OBJECT" ON "PUBLIC"."PERMISSIONS"("GROUP_ID" NULLS FIRST, "OBJECT" NULLS FIRST);               
CREATE CACHED TABLE "PUBLIC"."QRTZ_SIMPROP_TRIGGERS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "TRIGGER_NAME" CHARACTER VARYING(200) NOT NULL,
    "TRIGGER_GROUP" CHARACTER VARYING(200) NOT NULL,
    "STR_PROP_1" CHARACTER VARYING(512),
    "STR_PROP_2" CHARACTER VARYING(512),
    "STR_PROP_3" CHARACTER VARYING(512),
    "INT_PROP_1" INTEGER,
    "INT_PROP_2" INTEGER,
    "LONG_PROP_1" BIGINT,
    "LONG_PROP_2" BIGINT,
    "DEC_PROP_1" NUMERIC(13, 4),
    "DEC_PROP_2" NUMERIC(13, 4),
    "BOOL_PROP_1" BOOLEAN,
    "BOOL_PROP_2" BOOLEAN
);             
ALTER TABLE "PUBLIC"."QRTZ_SIMPROP_TRIGGERS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_SIMPROP_TRIGGERS" PRIMARY KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");    
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_SIMPROP_TRIGGERS;    
CREATE CACHED TABLE "PUBLIC"."QRTZ_BLOB_TRIGGERS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "TRIGGER_NAME" CHARACTER VARYING(200) NOT NULL,
    "TRIGGER_GROUP" CHARACTER VARYING(200) NOT NULL,
    "BLOB_DATA" BINARY LARGE OBJECT
);      
ALTER TABLE "PUBLIC"."QRTZ_BLOB_TRIGGERS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_BLOB_TRIGGERS" PRIMARY KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP");          
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_BLOB_TRIGGERS;       
CREATE CACHED TABLE "PUBLIC"."QRTZ_CALENDARS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "CALENDAR_NAME" CHARACTER VARYING(200) NOT NULL,
    "CALENDAR" BINARY LARGE OBJECT NOT NULL
);      
ALTER TABLE "PUBLIC"."QRTZ_CALENDARS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_CALENDARS" PRIMARY KEY("SCHED_NAME", "CALENDAR_NAME");  
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_CALENDARS;           
CREATE CACHED TABLE "PUBLIC"."QRTZ_PAUSED_TRIGGER_GRPS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "TRIGGER_GROUP" CHARACTER VARYING(200) NOT NULL
);         
ALTER TABLE "PUBLIC"."QRTZ_PAUSED_TRIGGER_GRPS" ADD CONSTRAINT "PUBLIC"."PK_SCHED_NAME" PRIMARY KEY("SCHED_NAME", "TRIGGER_GROUP");            
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS; 
CREATE CACHED TABLE "PUBLIC"."QRTZ_FIRED_TRIGGERS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "ENTRY_ID" CHARACTER VARYING(95) NOT NULL,
    "TRIGGER_NAME" CHARACTER VARYING(200) NOT NULL,
    "TRIGGER_GROUP" CHARACTER VARYING(200) NOT NULL,
    "INSTANCE_NAME" CHARACTER VARYING(200) NOT NULL,
    "FIRED_TIME" BIGINT NOT NULL,
    "SCHED_TIME" BIGINT,
    "PRIORITY" INTEGER NOT NULL,
    "STATE" CHARACTER VARYING(16) NOT NULL,
    "JOB_NAME" CHARACTER VARYING(200),
    "JOB_GROUP" CHARACTER VARYING(200),
    "IS_NONCONCURRENT" BOOLEAN,
    "REQUESTS_RECOVERY" BOOLEAN
);              
ALTER TABLE "PUBLIC"."QRTZ_FIRED_TRIGGERS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_FIRED_TRIGGERS" PRIMARY KEY("SCHED_NAME", "ENTRY_ID");             
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_FIRED_TRIGGERS;      
CREATE INDEX "PUBLIC"."IDX_QRTZ_FT_TRIG_INST_NAME" ON "PUBLIC"."QRTZ_FIRED_TRIGGERS"("SCHED_NAME" NULLS FIRST, "INSTANCE_NAME" NULLS FIRST);   
CREATE INDEX "PUBLIC"."IDX_QRTZ_FT_INST_JOB_REQ_RCVRY" ON "PUBLIC"."QRTZ_FIRED_TRIGGERS"("SCHED_NAME" NULLS FIRST, "INSTANCE_NAME" NULLS FIRST, "REQUESTS_RECOVERY" NULLS FIRST);              
CREATE INDEX "PUBLIC"."IDX_QRTZ_FT_J_G" ON "PUBLIC"."QRTZ_FIRED_TRIGGERS"("SCHED_NAME" NULLS FIRST, "JOB_NAME" NULLS FIRST, "JOB_GROUP" NULLS FIRST);          
CREATE INDEX "PUBLIC"."IDX_QRTZ_FT_JG" ON "PUBLIC"."QRTZ_FIRED_TRIGGERS"("SCHED_NAME" NULLS FIRST, "JOB_GROUP" NULLS FIRST);   
CREATE INDEX "PUBLIC"."IDX_QRTZ_FT_T_G" ON "PUBLIC"."QRTZ_FIRED_TRIGGERS"("SCHED_NAME" NULLS FIRST, "TRIGGER_NAME" NULLS FIRST, "TRIGGER_GROUP" NULLS FIRST);  
CREATE INDEX "PUBLIC"."IDX_QRTZ_FT_TG" ON "PUBLIC"."QRTZ_FIRED_TRIGGERS"("SCHED_NAME" NULLS FIRST, "TRIGGER_GROUP" NULLS FIRST);               
CREATE CACHED TABLE "PUBLIC"."QRTZ_SCHEDULER_STATE" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) SELECTIVITY 100 NOT NULL,
    "INSTANCE_NAME" CHARACTER VARYING(200) SELECTIVITY 100 NOT NULL,
    "LAST_CHECKIN_TIME" BIGINT SELECTIVITY 100 NOT NULL,
    "CHECKIN_INTERVAL" BIGINT SELECTIVITY 100 NOT NULL
);            
ALTER TABLE "PUBLIC"."QRTZ_SCHEDULER_STATE" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_SCHEDULER_STATE" PRIMARY KEY("SCHED_NAME", "INSTANCE_NAME");      
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_SCHEDULER_STATE;     
INSERT INTO "PUBLIC"."QRTZ_SCHEDULER_STATE" VALUES
('MetabaseScheduler', 'metabase1698450079395', 1698450154915, 7500);        
CREATE CACHED TABLE "PUBLIC"."QRTZ_LOCKS" COMMENT 'Used for Quartz scheduler.'(
    "SCHED_NAME" CHARACTER VARYING(120) NOT NULL,
    "LOCK_NAME" CHARACTER VARYING(40) NOT NULL
);            
ALTER TABLE "PUBLIC"."QRTZ_LOCKS" ADD CONSTRAINT "PUBLIC"."PK_QRTZ_LOCKS" PRIMARY KEY("SCHED_NAME", "LOCK_NAME");              
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_LOCKS;               
INSERT INTO "PUBLIC"."QRTZ_LOCKS" VALUES
('MetabaseScheduler', 'STATE_ACCESS'),
('MetabaseScheduler', 'TRIGGER_ACCESS');       
CREATE CACHED TABLE "PUBLIC"."TIMELINE_EVENT" COMMENT 'Events table'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "TIMELINE_ID" INTEGER COMMENT 'ID of the timeline containing the event' NOT NULL,
    "NAME" CHARACTER VARYING(255) COMMENT 'Name of the event' NOT NULL,
    "DESCRIPTION" CHARACTER VARYING(255) COMMENT 'Optional markdown description of the event',
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE COMMENT 'When the event happened' NOT NULL,
    "TIME_MATTERS" BOOLEAN COMMENT 'Indicate whether the time component matters or if the timestamp should just serve to indicate the day of the event without any time associated to it.' NOT NULL,
    "TIMEZONE" CHARACTER VARYING(255) COMMENT 'Timezone to display the underlying UTC timestamp in for the client' NOT NULL,
    "ICON" CHARACTER VARYING(128) COMMENT 'the icon to use when displaying the event' NOT NULL,
    "ARCHIVED" BOOLEAN DEFAULT FALSE COMMENT 'Whether or not the event has been archived' NOT NULL,
    "CREATOR_ID" INTEGER COMMENT 'ID of the user who created the event' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the event was created' NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the event was modified' NOT NULL
); 
ALTER TABLE "PUBLIC"."TIMELINE_EVENT" ADD CONSTRAINT "PUBLIC"."PK_TIMELINE_EVENT" PRIMARY KEY("ID");           
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.TIMELINE_EVENT;           
CREATE INDEX "PUBLIC"."IDX_TIMELINE_EVENT_TIMELINE_ID" ON "PUBLIC"."TIMELINE_EVENT"("TIMELINE_ID" NULLS FIRST);
CREATE INDEX "PUBLIC"."IDX_TIMELINE_EVENT_TIMELINE_ID_TIMESTAMP" ON "PUBLIC"."TIMELINE_EVENT"("TIMELINE_ID" NULLS FIRST, "TIMESTAMP" NULLS FIRST);             
CREATE CACHED TABLE "PUBLIC"."CORE_USER"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) DEFAULT ON NULL NOT NULL,
    "EMAIL" VARCHAR_IGNORECASE(254) NOT NULL,
    "FIRST_NAME" CHARACTER VARYING(254),
    "LAST_NAME" CHARACTER VARYING(254),
    "PASSWORD" CHARACTER VARYING(254),
    "PASSWORD_SALT" CHARACTER VARYING(254) DEFAULT 'default',
    "DATE_JOINED" TIMESTAMP NOT NULL,
    "LAST_LOGIN" TIMESTAMP,
    "IS_SUPERUSER" BOOLEAN DEFAULT FALSE NOT NULL,
    "IS_ACTIVE" BOOLEAN DEFAULT TRUE NOT NULL,
    "RESET_TOKEN" CHARACTER VARYING(254),
    "RESET_TRIGGERED" BIGINT,
    "IS_QBNEWB" BOOLEAN DEFAULT TRUE NOT NULL,
    "LOGIN_ATTRIBUTES" CHARACTER LARGE OBJECT COMMENT 'JSON serialized map with attributes used for row level permissions',
    "UPDATED_AT" TIMESTAMP COMMENT 'When was this User last updated?',
    "SSO_SOURCE" CHARACTER VARYING(254) COMMENT 'String to indicate the SSO backend the user is from',
    "LOCALE" CHARACTER VARYING(5) COMMENT 'Preferred ISO locale (language/country) code, e.g "en" or "en-US", for this User. Overrides site default.',
    "IS_DATASETNEWB" BOOLEAN DEFAULT TRUE COMMENT 'Boolean flag to indicate if the dataset info modal has been dismissed.' NOT NULL,
    "SETTINGS" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON containing User-local Settings for this User'
);      
ALTER TABLE "PUBLIC"."CORE_USER" ADD CONSTRAINT "PUBLIC"."PK_CORE_USER" PRIMARY KEY("ID");     
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.CORE_USER;
INSERT INTO "PUBLIC"."CORE_USER" VALUES
(1, 'sidesamitss@gmail.com', 'Amit', 'Sides', '$2a$10$RquikkHJc9TZh1QkMvrGDegr84WiZExl4dt6zOGBF6/h9JyCO/AXa', '91b39e8a-83c1-4a48-a303-a4a163655b17', TIMESTAMP '2022-11-21 20:57:59.152', TIMESTAMP '2023-10-27 23:42:27.061588', TRUE, TRUE, NULL, NULL, FALSE, NULL, TIMESTAMP '2023-10-27 23:42:29.166952', NULL, NULL, TRUE, '{"most-recently-viewed-dashboard":"{\"id\":1,\"timestamp\":\"2023-10-27T23:42:29.150318Z\"}","user-recent-views":"[{\"model\":\"dashboard\",\"model_id\":1}]"}');   
CREATE CACHED TABLE "PUBLIC"."COLLECTION_BOOKMARK" COMMENT 'Table holding bookmarks on collections'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "USER_ID" INTEGER COMMENT 'ID of the User who bookmarked the Collection' NOT NULL,
    "COLLECTION_ID" INTEGER COMMENT 'ID of the Card bookmarked by the user' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp of when the bookmark was created' NOT NULL
);              
ALTER TABLE "PUBLIC"."COLLECTION_BOOKMARK" ADD CONSTRAINT "PUBLIC"."PK_COLLECTION_BOOKMARK" PRIMARY KEY("ID"); 
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.COLLECTION_BOOKMARK;      
CREATE INDEX "PUBLIC"."IDX_COLLECTION_BOOKMARK_USER_ID" ON "PUBLIC"."COLLECTION_BOOKMARK"("USER_ID" NULLS FIRST);              
CREATE INDEX "PUBLIC"."IDX_COLLECTION_BOOKMARK_COLLECTION_ID" ON "PUBLIC"."COLLECTION_BOOKMARK"("COLLECTION_ID" NULLS FIRST);  
CREATE CACHED TABLE "PUBLIC"."REVISION"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 265 RESTART WITH 357) DEFAULT ON NULL NOT NULL,
    "MODEL" CHARACTER VARYING(16) NOT NULL,
    "MODEL_ID" INTEGER NOT NULL,
    "USER_ID" INTEGER NOT NULL,
    "TIMESTAMP" TIMESTAMP WITH TIME ZONE NOT NULL,
    "OBJECT" CHARACTER LARGE OBJECT NOT NULL,
    "IS_REVERSION" BOOLEAN DEFAULT FALSE NOT NULL,
    "IS_CREATION" BOOLEAN DEFAULT FALSE NOT NULL,
    "MESSAGE" CHARACTER LARGE OBJECT
);               
ALTER TABLE "PUBLIC"."REVISION" ADD CONSTRAINT "PUBLIC"."PK_REVISION" PRIMARY KEY("ID");       
-- 100 +/- SELECT COUNT(*) FROM PUBLIC.REVISION;               
INSERT INTO "PUBLIC"."REVISION" VALUES
(39, 'Card', 33, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 08:13:24.89+00', '{"description":null,"archived":false,"collection_position":null,"table_id":7,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Wallet balance","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":7,"aggregation":[["sum",["field",55,null]]]},"database":2},"id":33,"display":"scalar","visualization_settings":{"column_settings":{"[\"name\",\"sum\"]":{"number_style":"currency"}}},"public_uuid":null}', FALSE, TRUE, NULL),
(47, 'Card', 35, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 08:20:57.316+00', '{"description":null,"archived":false,"collection_position":null,"table_id":7,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Unrealized PNL","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":7,"aggregation":[["sum",["field",53,null]]]},"database":2},"id":35,"display":"scalar","visualization_settings":{"column_settings":{"[\"name\",\"sum\"]":{"number_style":"currency"}}},"public_uuid":null}', FALSE, TRUE, NULL),
(51, 'Card', 36, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 08:23:45.22+00', '{"description":null,"archived":false,"collection_position":null,"table_id":10,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Current BTC price","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"query":{"source-table":10,"filter":["=",["field",82,null],"BTCUSDT"],"fields":[["field",82,null],["field",83,null]]},"type":"query"},"id":36,"display":"scalar","visualization_settings":{"scalar.field":"price","column_settings":{"[\"ref\",[\"field\",83,null]]":{"number_style":"currency","prefix":"BTC: "}}},"public_uuid":null}', FALSE, TRUE, NULL),
(55, 'Card', 37, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 08:42:22.017+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Daily PNL","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"type":"query"},"id":37,"display":"bar","visualization_settings":{"graph.show_values":true,"series_settings":{"sum":{"title":"PNL","display":"area","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"PNL","graph.dimensions":["time"],"graph.metrics":["sum"]},"public_uuid":null}', FALSE, TRUE, NULL),
(59, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 08:47:27.072+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{}},"database":2},"id":38,"display":"line","visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"graph.metrics":["adg"]},"public_uuid":null}', FALSE, TRUE, NULL);   
INSERT INTO "PUBLIC"."REVISION" VALUES
(63, 'Card', 39, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 08:53:38.25+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"TP count","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"query":{"source-table":14,"filter":["and",["=",["field",111,null],"REALIZED_PNL"],["time-interval",["field",113,null],-14,"day",{"include-current":true}]],"aggregation":[["count"]],"breakout":[["field",113,{"temporal-unit":"day"}]]},"type":"query"},"id":39,"display":"line","visualization_settings":{"graph.show_values":true,"series_settings":{"count":{"line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.dimensions":["time"],"graph.metrics":["count"]},"public_uuid":null}', FALSE, TRUE, NULL),
(67, 'Card', 40, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 09:20:51.097+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"This month earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"type":"query"},"id":40,"display":"bar","visualization_settings":{"graph.dimensions":["symbol"],"graph.metrics":["sum"]},"public_uuid":null}', FALSE, TRUE, NULL),
(71, 'Card', 41, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 09:39:53.528+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Today''s earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":14,"filter":["time-interval",["field",113,null],"current","day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2},"id":41,"display":"bar","visualization_settings":{"graph.show_values":true,"graph.show_goal":true,"graph.goal_label":"PnL","graph.label_value_frequency":"all","graph.label_value_formatting":"compact","series_settings":{"sum":{"color":"#A989C5"}},"graph.dimensions":["symbol"],"graph.metrics":["sum"]},"public_uuid":null}', FALSE, TRUE, NULL),
(75, 'Card', 42, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 09:45:44.331+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Yesterday''s earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":14,"filter":["time-interval",["field",113,null],-1,"day"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2},"id":42,"display":"bar","visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"Income","graph.show_values":true,"graph.goal_label":"PnL","graph.label_value_frequency":"all","graph.metrics":["sum"],"graph.label_value_formatting":"compact","series_settings":{"sum":{"color":"#A989C5"}},"graph.dimensions":["symbol"]},"public_uuid":null}', FALSE, TRUE, NULL),
(79, 'Card', 43, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 09:52:05.115+00', '{"description":null,"archived":false,"collection_position":null,"table_id":6,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Daily balance","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"order-by":[["desc",["field",49,null]]],"fields":[["field",49,{"temporal-unit":"default"}],["field",47,null]]},"database":2},"id":43,"display":"table","visualization_settings":{"table.columns":[{"name":"id","fieldRef":["field",48,null],"enabled":false},{"name":"registration_datetime","fieldRef":["field",46,{"temporal-unit":"default"}],"enabled":false},{"name":"day","fieldRef":["field",49,{"temporal-unit":"default"}],"enabled":true},{"name":"totalWalletBalance","fieldRef":["field",47,null],"enabled":true},{"name":"account","fieldRef":["field",50,null],"enabled":false}],"table.pivot_column":"totalWalletBalance","table.cell_column":"day"},"public_uuid":null}', FALSE, TRUE, NULL);           
INSERT INTO "PUBLIC"."REVISION" VALUES
(83, 'Card', 44, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 09:54:49.055+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Monthly summary","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n\t\t\t\tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n\t\t\t\tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n\t\t\t\tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n\t\t\t\t(SELECT totalWalletBalance\n\t\t\t\t FROM DAILY_BALANCE db \n\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n\t\t\t\torder by day desc) as Balance\nFROM \"INCOME\"\nWHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n  AND \"INCOME\".\"symbol\" IS NOT NULL\nGROUP BY date(\"INCOME\".\"time\", ''start of month'')\nORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2},"id":44,"display":"table","visualization_settings":{"table.column_formatting":[{"columns":["PNL (%)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"columns":["PNL (%)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false}],"table.pivot_column":"Month","table.cell_column":"PNL ($)"},"public_uuid":null}', FALSE, TRUE, NULL),
(131, 'Card', 43, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 13:05:59.656+00', '{"description":null,"archived":false,"collection_position":null,"table_id":6,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Daily balance","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"database":2},"id":43,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.columns":[{"name":"id","fieldRef":["field",48,null],"enabled":false},{"name":"registration_datetime","fieldRef":["field",46,{"temporal-unit":"default"}],"enabled":false},{"name":"totalWalletBalance","fieldRef":["field",47,null],"enabled":true},{"name":"account","fieldRef":["field",50,null],"enabled":false},{"name":"day","field_ref":["field",49,null],"enabled":true}],"table.pivot_column":"totalWalletBalance","table.cell_column":"day"},"parameters":null,"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(134, 'Card', 65, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 13:49:36.043+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Wallet exposure","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        GROUP BY p.account) as e","template-tags":{}},"database":2},"id":65,"parameter_mappings":[],"display":"gauge","entity_id":"VzbOqaY9nb93_odTaudaO","collection_preview":true,"visualization_settings":{"gauge.segments":[{"min":0,"max":1,"color":"#88BF4D","label":""},{"min":1,"max":2,"color":"#F9CF48","label":""},{"min":2,"max":3,"color":"#ED6E6E","label":""}],"column_settings":{"[\"name\",\"AVG(e.Exposure)\"]":{"number_style":"percent"}}},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, TRUE, NULL);            
INSERT INTO "PUBLIC"."REVISION" VALUES
(161, 'Card', 65, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:17:02.348+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Wallet exposure","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((p.quantity*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":65,"parameter_mappings":[],"display":"gauge","entity_id":"VzbOqaY9nb93_odTaudaO","collection_preview":true,"visualization_settings":{"gauge.segments":[{"min":0,"max":1,"color":"#88BF4D","label":""},{"min":1,"max":2,"color":"#F9CF48","label":""},{"min":2,"max":3,"color":"#ED6E6E","label":""}],"column_settings":{"[\"name\",\"AVG(e.Exposure)\"]":{"number_style":"percent"}}},"parameters":[{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(164, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:23:38.455+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"graph.metrics":["adg"]},"parameters":[{"id":"b025fa8e-1dbe-b98f-51d7-0f3308b55b82","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(167, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:26:56.089+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"graph.metrics":["adg"]},"parameters":[{"id":"a77e69ff-0657-e4cd-6d45-69206cbec83d","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);
INSERT INTO "PUBLIC"."REVISION" VALUES
(170, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:30:59.434+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\nFROM \"DAILY_BALANCE\"\r\nWHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\nORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\nLIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"graph.metrics":["adg"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(171, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:31:46.881+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n          SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n            FROM \"DAILY_BALANCE\"\r\n            WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n               AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n               [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n            ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n            LIMIT 1) AS \"adg\"\r\nFROM \"INCOME\"\r\nWHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n    OR \"INCOME\".\"incomeType\" IS NULL)\r\n   AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n   [[AND \"INCOME\".\"account\" = {{Account}}]]\r\nGROUP BY date(\"INCOME\".\"time\")\r\nORDER BY date(\"INCOME\".\"time\") ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"graph.metrics":["adg"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(172, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:42:28.276+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":38,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"table.pivot_column":"time","table.cell_column":"AVG(adg)","graph.metrics":["adg"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);               
INSERT INTO "PUBLIC"."REVISION" VALUES
(173, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:44:04.166+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"table.pivot_column":"time","table.cell_column":"AVG(adg)","graph.metrics":["AVG(adg)"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(193, 'Card', 44, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 14:49:56.383+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Monthly summary","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC)","template-tags":{}},"database":2},"id":44,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.column_formatting":[{"columns":["PNL (%)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"columns":["PNL (%)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false}],"table.pivot_column":"Month","table.cell_column":"PNL ($)"},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);         
INSERT INTO SYSTEM_LOB_STREAM VALUES(77, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n         ', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(77, 1, '      GROUP BY POSITION.symbol) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)"}}},"parameters":[{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"}],"dataset":false,"public_uuid":null}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(78, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(78, 1, '.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)"}}},"parameters":[{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL); 
INSERT INTO SYSTEM_LOB_STREAM VALUES(79, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(79, 1, '.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)"}}},"parameters":[{"id":"8253d2ca-de28-bf32-0ec0-fb3dcd2518ba","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"3d1aca0c-fac1-9cbc-ce8f-70d6a75b730f","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);        
INSERT INTO "PUBLIC"."REVISION" VALUES
(196, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 15:02:00.042+00', SYSTEM_COMBINE_CLOB(77), FALSE, FALSE, NULL),
(197, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 15:07:24.228+00', SYSTEM_COMBINE_CLOB(78), FALSE, FALSE, NULL),
(200, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 15:09:16.55+00', SYSTEM_COMBINE_CLOB(79), FALSE, FALSE, NULL),
(230, 'Card', 44, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 18:57:40.467+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Monthly summary","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"type":"native"},"id":44,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.column_formatting":[{"columns":["PNL (%)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"columns":["PNL (%)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false}],"table.pivot_column":"Month","table.cell_column":"PNL ($)"},"parameters":[{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(233, 'Card', 44, 1, TIMESTAMP WITH TIME ZONE '2022-11-22 18:59:54.466+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Monthly summary","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"type":"native"},"id":44,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.column_formatting":[{"columns":["PNL (%)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"columns":["PNL (%)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false}],"table.pivot_column":"Month","table.cell_column":"PNL ($)"},"parameters":[{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);              
INSERT INTO SYSTEM_LOB_STREAM VALUES(80, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.acco', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(80, 1, 'unt = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)"}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);      
INSERT INTO SYSTEM_LOB_STREAM VALUES(81, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.acco', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(81, 1, 'unt = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)"}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL); 
INSERT INTO SYSTEM_LOB_STREAM VALUES(82, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    e.entryPrice as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.acco', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(82, 1, 'unt = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)"}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(83, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = p', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(83, 1, 'r.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);    
INSERT INTO "PUBLIC"."REVISION" VALUES
(257, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-01-02 19:12:09.483+00', SYSTEM_COMBINE_CLOB(80), FALSE, FALSE, NULL),
(258, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-01-02 19:55:32.991+00', SYSTEM_COMBINE_CLOB(81), FALSE, FALSE, NULL),
(259, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-01-02 20:48:57.986+00', SYSTEM_COMBINE_CLOB(82), FALSE, FALSE, NULL),
(260, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-01-02 21:16:31.93+00', SYSTEM_COMBINE_CLOB(83), FALSE, FALSE, NULL),
(261, 'Card', 44, 1, TIMESTAMP WITH TIME ZONE '2023-01-03 06:12:58.356+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Monthly summary","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"native":{"template-tags":{"Account":{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","name":"Account","display-name":"Account","type":"text","default":null}},"query":"SELECT substr(\"JanFebMarAprMayJunJulAugSepOctNovDec\", 1 + 3*strftime(\"%m\", \"time\"), -3) || \", \" || strftime(\"%Y\", \"time\") as \"Month\",\n\t\t\t\t \"PNL ($)\", \"PNL (%)\", \"Balance\"\nFROM (\n\tSELECT \n    \tdate(\"INCOME\".\"time\", ''start of month'') AS \"time\", \n    \tsum(\"INCOME\".\"income\") AS \"PNL ($)\", \n    \tsum(\"INCOME\".\"income\") / (SELECT totalWalletBalance\n    \t\t\t\t\t\t\t\tFROM DAILY_BALANCE db \n    \t\t\t\t\t\t\t\twhere date(day) = date(\"INCOME\".\"time\", ''start of month'')\n    \t\t\t\t\t\t\t\t  and db.account = \"INCOME\".\"account\"\n    \t\t\t\t\t\t\t\torder by day desc) as \"PNL (%)\", \n    \t  (SELECT totalWalletBalance\n    \t     FROM DAILY_BALANCE db \n    \t    where date(day) = date(\"INCOME\".\"time\", ''start of month'')\n        \torder by day desc) as Balance\n     FROM \"INCOME\"\n    WHERE \"INCOME\".\"incomeType\" <> ''TRANSFER''\n      AND \"INCOME\".\"symbol\" IS NOT NULL\n      [[AND \"INCOME\".\"account\" = {{Account}}]]\n    GROUP BY date(\"INCOME\".\"time\", ''start of month'')\n    ORDER BY date(\"INCOME\".\"time\", ''start of month'') DESC\n  )"},"type":"native"},"id":44,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.column_formatting":[{"columns":["PNL (%)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":"<","value":0,"color":"#EF8C8C","highlight_row":false},{"columns":["PNL ($)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"columns":["PNL (%)"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false}],"table.pivot_column":"Month","table.cell_column":"PNL ($)","column_settings":{"[\"name\",\"PNL (%)\"]":{"number_style":"percent","view_as":null,"show_mini_bar":true}}},"parameters":[{"id":"b3fc4e9d-3c05-8c7f-0db6-3fb031cb2c09","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(262, 'Card', 65, 1, TIMESTAMP WITH TIME ZONE '2023-01-09 07:30:15.091+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Wallet exposure","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT AVG(e.Exposure)\n  FROM (\n        SELECT b.account, round(sum((abs(p.quantity)*p.entryPrice)/b.totalWalletBalance),3) as Exposure\n        FROM POSITION p, BALANCE b\n        WHERE p.account = b.account\n        [[AND p.account == {{Account}}]]\n        GROUP BY p.account) as e","template-tags":{"Account":{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":65,"parameter_mappings":[],"display":"gauge","entity_id":"VzbOqaY9nb93_odTaudaO","collection_preview":true,"visualization_settings":{"gauge.segments":[{"min":0,"max":1,"color":"#88BF4D","label":""},{"min":1,"max":2,"color":"#F9CF48","label":""},{"min":2,"max":3,"color":"#ED6E6E","label":""}],"column_settings":{"[\"name\",\"AVG(e.Exposure)\"]":{"number_style":"percent"}}},"parameters":[{"id":"d70a62ff-5444-a8df-c364-f0f4bdcb9456","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);  
INSERT INTO SYSTEM_LOB_STREAM VALUES(84, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n    ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(84, 1, '             on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f244', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(84, 2, '5699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(85, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n    ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(85, 1, '             on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f24', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(85, 2, '45699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(86, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n    ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(86, 1, '             on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(86, 2, 'ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(87, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n    ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(87, 1, '             on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0.15,"min_type":"custom","operator":"=","max_type":"custom"},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(87, 2, ' DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);            
INSERT INTO "PUBLIC"."REVISION" VALUES
(263, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-01-09 07:40:51.419+00', SYSTEM_COMBINE_CLOB(84), FALSE, FALSE, NULL),
(264, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-01-09 07:41:17.98+00', SYSTEM_COMBINE_CLOB(85), FALSE, FALSE, NULL),
(268, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-04-03 20:20:54.284411+00', SYSTEM_COMBINE_CLOB(86), FALSE, FALSE, NULL),
(269, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-04-03 20:27:52.921132+00', SYSTEM_COMBINE_CLOB(87), FALSE, FALSE, NULL),
(270, 'Card', 97, 1, TIMESTAMP WITH TIME ZONE '2023-04-13 10:39:45.938753+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":97,"parameter_mappings":[],"display":"line","entity_id":"OWQcyXyiXVLMWMrK0j8gQ","collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"table.pivot_column":"time","table.cell_column":"AVG(adg)","graph.metrics":["AVG(adg)"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, TRUE, NULL),
(271, 'Card', 97, 1, TIMESTAMP WITH TIME ZONE '2023-04-13 10:51:00.317722+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":97,"parameter_mappings":[],"display":"scalar","entity_id":"OWQcyXyiXVLMWMrK0j8gQ","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["AVG(adg)"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);  
INSERT INTO "PUBLIC"."REVISION" VALUES
(276, 'Card', 97, 1, TIMESTAMP WITH TIME ZONE '2023-04-13 10:52:20.201883+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":97,"parameter_mappings":[],"display":"scalar","entity_id":"OWQcyXyiXVLMWMrK0j8gQ","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["AVG(adg)"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(281, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 18:26:22.206343+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT AVG(aadg)\r\n  FROM (\r\n    SELECT time, \r\n           AVG(adg) as aadg\r\n    FROM (\r\n        SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n                  SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                    FROM \"DAILY_BALANCE\"\r\n                    WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                    AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                    AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                    [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                    ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                    LIMIT 1) AS \"adg\"\r\n        FROM \"INCOME\"\r\n        WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n            OR \"INCOME\".\"incomeType\" IS NULL)\r\n            AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), ''-14 days'')) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n            [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n        GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n    )\r\n    GROUP BY time\r\n    ORDER BY date(time) ASC\r\n)","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"scalar","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["AVG(adg)"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, TRUE, NULL);    
INSERT INTO "PUBLIC"."REVISION" VALUES
(282, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 19:10:42.479273+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"\r\nSELECT format(\"%0d.%4d\", month, year) as \"date\", \r\n       AVG(adg) as aadg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", \"INCOME\".\"time\") as year, strftime(\"%m\", \"INCOME\".\"time\") as month, 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE (\r\n            (\"INCOME\".\"incomeType\" <> ''TRANSFER'' OR \"INCOME\".\"incomeType\" IS NULL)\r\n           --AND strftime(''%Y-%m'', \"INCOME\".\"time\") == strftime(''%Y-%m'', datetime(''now''))\r\n         )\r\n         [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account, year, month\r\n)\r\nGROUP BY year, month\r\nORDER BY year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"line","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["aadg"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["date"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(286, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 19:58:34.813846+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as date, adg\r\nFROM (\r\n    SELECT INCOME.account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\norder by year, month ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"line","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["adg"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["date"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);          
INSERT INTO "PUBLIC"."REVISION" VALUES
(287, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 20:07:33.574916+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"waterfall","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["sum(adg)"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["date"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(288, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 20:12:28.256448+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT format(\"%02d.%4d\", month, year) as \"date\", sum(adg)\r\nFROM (\r\n    SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n    FROM INCOME\r\n    INNER JOIN DAILY_BALANCE\r\n    ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n       AND DAILY_BALANCE.account = INCOME.account\r\n    [[WHERE INCOME.account = {{Account}}]]\r\n    group by INCOME.account, year, month\r\n    order by INCOME.account, year, month ASC\r\n)\r\n[[WHERE account = {{Account}}]]\r\ngroup by \"date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"waterfall","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.metrics":["sum(adg)"],"table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["date"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);           
INSERT INTO SYSTEM_LOB_STREAM VALUES(88, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_order', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(88, 1, 's\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0.15,"min_type":"custom","operator":"=","max_type":"custom"},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(88, 2, '"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);   
INSERT INTO SYSTEM_LOB_STREAM VALUES(89, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"N', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(89, 1, 'ext TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL); 
INSERT INTO SYSTEM_LOB_STREAM VALUES(90, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Short","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":100,"parameter_mappings":[],"display":"table","entity_id":"jyCr4xDoYRhw9cyRf0fxY","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(90, 1, '"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(91, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Short","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":100,"parameter_mappings":[],"display":"table","entity_id":"jyCr4xDoYRhw9cyRf0fxY","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"na', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(91, 1, 'me":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);           
INSERT INTO SYSTEM_LOB_STREAM VALUES(92, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(92, 1, 'Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(93, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n    ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(93, 1, '             on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0.15,"min_type":"custom","operator":"=","max_type":"custom"},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(93, 2, ' DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(94, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":false},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(94, 1, '"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(95, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Short","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":100,"parameter_mappings":[],"display":"table","entity_id":"jyCr4xDoYRhw9cyRf0fxY","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":false},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"n', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(95, 1, 'ame":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);          
INSERT INTO SYSTEM_LOB_STREAM VALUES(96, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":false},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(96, 1, '","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);               
INSERT INTO SYSTEM_LOB_STREAM VALUES(97, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n    ', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(97, 1, '             on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"account","fieldRef":["field","account",{"base-type":"type/Text"}],"enabled":true},{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Next TP","fieldRef":["field","Next TP",{"base-type":"type/Float"}],"enabled":true},{"name":"DCA->TP distance","fieldRef":["field","DCA->TP distance",{"base-type":"type/Float"}],"enabled":false},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0.15,"min_type":"custom","operator":"=","max_type":"custom"},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next', NULL);     
INSERT INTO SYSTEM_LOB_STREAM VALUES(97, 2, ' DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(98, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''BUY''\n            ', NULL);       
INSERT INTO SYSTEM_LOB_STREAM VALUES(98, 1, '            and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0.15,"min_type":"custom","operator":"=","max_type":"custom"},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",', NULL);   
INSERT INTO SYSTEM_LOB_STREAM VALUES(98, 2, '\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);      
INSERT INTO SYSTEM_LOB_STREAM VALUES(99, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Short","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":100,"parameter_mappings":[],"display":"table","entity_id":"jyCr4xDoYRhw9cyRf0fxY","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","co', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(99, 1, 'lumns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(100, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","colum', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(100, 1, 'ns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);    
INSERT INTO SYSTEM_LOB_STREAM VALUES(101, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, side, Exposure, order_count, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\nunion\nselect *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    abs(p.quantity) as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*abs(p.quantity) as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((o.dca_price-pr.price)/(o.dca_price-tp_orders.tp_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    abs(p.quantity) * (p.entryPrice - pr.price) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1-{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1-{{dcaPercent}}/100.0))/(pr.price*((1-{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, min(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, max(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side =', NULL);        
INSERT INTO SYSTEM_LOB_STREAM VALUES(101, 1, ' ''BUY''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((abs(POSITION.quantity)*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice, \n                        POSITION.account as account\n                  FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n              GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\n  order by Exposure desc, account, order_count, symbol\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":1,"parameter_mappings":null,"display":"table","entity_id":null,"collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"side","fieldRef":["field","side",{"base-type":"type/Text"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0.15,"min_type":"custom","operator":"=","max_type":"custom"},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as"', NULL);
INSERT INTO SYSTEM_LOB_STREAM VALUES(101, 2, ':"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL); 
INSERT INTO SYSTEM_LOB_STREAM VALUES(102, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Short","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, Exposure, order_count, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\", \"Next DCA\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":100,"parameter_mappings":[],"display":"table","entity_id":"jyCr4xDoYRhw9cyRf0fxY","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"order_count","fieldRef":["field","order_count",{"base-type":"type/Integer"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"Next DCA","fieldRef":["field","Next DCA",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","c', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(102, 1, 'olumns":["Exposure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);              
INSERT INTO "PUBLIC"."REVISION" VALUES
(291, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 21:44:34.351987+00', SYSTEM_COMBINE_CLOB(88), FALSE, TRUE, NULL),
(292, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 21:46:57.878864+00', SYSTEM_COMBINE_CLOB(89), FALSE, FALSE, NULL),
(293, 'Card', 100, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 21:47:07.959627+00', SYSTEM_COMBINE_CLOB(90), FALSE, TRUE, NULL),
(294, 'Card', 100, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 21:55:04.047134+00', SYSTEM_COMBINE_CLOB(91), FALSE, FALSE, NULL),
(295, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:03:32.814386+00', SYSTEM_COMBINE_CLOB(92), FALSE, FALSE, NULL),
(296, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:04:47.239784+00', SYSTEM_COMBINE_CLOB(93), FALSE, FALSE, NULL),
(302, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:06:10.933343+00', SYSTEM_COMBINE_CLOB(94), FALSE, FALSE, NULL),
(303, 'Card', 100, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:06:27.485639+00', SYSTEM_COMBINE_CLOB(95), FALSE, FALSE, NULL),
(304, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:08:51.206307+00', SYSTEM_COMBINE_CLOB(96), FALSE, FALSE, NULL),
(305, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:09:18.749697+00', SYSTEM_COMBINE_CLOB(97), FALSE, FALSE, NULL),
(306, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:14:39.312488+00', SYSTEM_COMBINE_CLOB(98), FALSE, FALSE, NULL),
(307, 'Card', 100, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:15:30.87378+00', SYSTEM_COMBINE_CLOB(99), FALSE, FALSE, NULL),
(308, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-05-02 23:15:52.255997+00', SYSTEM_COMBINE_CLOB(100), FALSE, FALSE, NULL),
(311, 'Card', 1, 1, TIMESTAMP WITH TIME ZONE '2023-05-03 13:36:25.779919+00', SYSTEM_COMBINE_CLOB(101), FALSE, FALSE, NULL),
(312, 'Card', 100, 1, TIMESTAMP WITH TIME ZONE '2023-06-18 21:48:21.807384+00', SYSTEM_COMBINE_CLOB(102), FALSE, FALSE, NULL),
(315, 'Card', 101, 1, TIMESTAMP WITH TIME ZONE '2023-06-20 22:25:12.494506+00', '{"description":null,"archived":false,"collection_position":null,"table_id":6,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Total Equity","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"database":2},"id":101,"parameter_mappings":[],"display":"table","entity_id":"eqGR9H6AeNPDGmPsBn9AQ","collection_preview":true,"visualization_settings":{"table.columns":[{"name":"id","fieldRef":["field",48,null],"enabled":false},{"name":"registration_datetime","fieldRef":["field",46,{"temporal-unit":"default"}],"enabled":false},{"name":"totalWalletBalance","fieldRef":["field",47,null],"enabled":true},{"name":"account","fieldRef":["field",50,null],"enabled":false},{"name":"day","field_ref":["field",49,null],"enabled":true}],"table.pivot_column":"totalWalletBalance","table.cell_column":"day"},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, TRUE, NULL),
(316, 'Card', 101, 1, TIMESTAMP WITH TIME ZONE '2023-06-20 22:27:09.077811+00', '{"description":null,"archived":true,"collection_position":null,"table_id":6,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"Total Equity","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":6,"filter":["time-interval",["field",49,null],-30,"day",{"include-current":false}],"aggregation":[["sum",["field",47,null]]],"breakout":[["field",49,{"temporal-unit":"day"}]],"order-by":[["desc",["field",49,{"temporal-unit":"day"}]]]},"database":2},"id":101,"parameter_mappings":[],"display":"table","entity_id":"eqGR9H6AeNPDGmPsBn9AQ","collection_preview":true,"visualization_settings":{"table.columns":[{"name":"id","fieldRef":["field",48,null],"enabled":false},{"name":"registration_datetime","fieldRef":["field",46,{"temporal-unit":"default"}],"enabled":false},{"name":"totalWalletBalance","fieldRef":["field",47,null],"enabled":true},{"name":"account","fieldRef":["field",50,null],"enabled":false},{"name":"day","field_ref":["field",49,null],"enabled":true}],"table.pivot_column":"totalWalletBalance","table.cell_column":"day"},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);               
INSERT INTO "PUBLIC"."REVISION" VALUES
(318, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-06-21 17:02:41.059404+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]}]}', FALSE, FALSE, NULL),
(319, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-06-21 17:02:41.377661+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]}]}', FALSE, FALSE, NULL),
(320, 'Card', 102, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:22:57.427269+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"All time earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["time-interval",["field",113,null],"current","month"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"type":"query"},"id":102,"parameter_mappings":[],"display":"bar","entity_id":"cnunBcZSBM7LSEvkbH3U4","collection_preview":true,"visualization_settings":{"graph.dimensions":["symbol"],"graph.metrics":["sum"]},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, TRUE, NULL),
(321, 'Card', 102, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:23:15.035779+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"All time earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"type":"query"},"id":102,"parameter_mappings":[],"display":"bar","entity_id":"cnunBcZSBM7LSEvkbH3U4","collection_preview":true,"visualization_settings":{"graph.dimensions":["symbol"],"graph.metrics":["sum"]},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(322, 'Card', 102, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:25:22.547819+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"All time earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"type":"query"},"id":102,"parameter_mappings":[],"display":"bar","entity_id":"cnunBcZSBM7LSEvkbH3U4","collection_preview":true,"visualization_settings":{"graph.dimensions":["symbol"],"graph.metrics":["sum"]},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);           
INSERT INTO "PUBLIC"."REVISION" VALUES
(323, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:26:08.241558+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(324, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:26:08.596501+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(325, 'Card', 102, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:27:50.089715+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"All time earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":14,"filter":["and",["!=",["field",111,null],"TRANSFER"],["=",["field",114,null],"Sidesub4"]],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2},"id":102,"parameter_mappings":[],"display":"bar","entity_id":"cnunBcZSBM7LSEvkbH3U4","collection_preview":true,"visualization_settings":{"graph.dimensions":["symbol"],"graph.metrics":["sum"]},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(326, 'Card', 102, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:29:41.360032+00', '{"description":null,"archived":false,"collection_position":null,"table_id":14,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"query","name":"All time earners","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"query","query":{"source-table":14,"filter":["!=",["field",111,null],"TRANSFER"],"aggregation":[["sum",["field",112,null]]],"breakout":[["field",115,null]],"order-by":[["asc",["aggregation",0]]]},"database":2},"id":102,"parameter_mappings":[],"display":"bar","entity_id":"cnunBcZSBM7LSEvkbH3U4","collection_preview":true,"visualization_settings":{"graph.dimensions":["symbol"],"graph.metrics":["sum"]},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);     
INSERT INTO "PUBLIC"."REVISION" VALUES
(327, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:41:49.158681+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(328, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-02 14:41:49.421704+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(329, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:21:58.960307+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_values":true,"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.x_axis.title_text":"Date","graph.y_axis.title_text":"ADG (%)","graph.dimensions":["time"],"table.pivot_column":"time","table.cell_column":"AVG(adg)","graph.metrics":["AVG(adg)"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);        
INSERT INTO "PUBLIC"."REVISION" VALUES
(330, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:28:29.029454+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":["AVG(adg)"],"graph.label_value_formatting":"auto","table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(331, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:29:53.13661+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":[null],"graph.label_value_formatting":"auto","table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":[]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);            
INSERT INTO "PUBLIC"."REVISION" VALUES
(332, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:31:14.683442+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND \"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.series_order_dimension":null,"graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":["AVG(adg)"],"graph.label_value_formatting":"auto","graph.series_order":null,"table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(333, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:32:28.108867+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL);    
INSERT INTO "PUBLIC"."REVISION" VALUES
(334, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:32:28.480903+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(335, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:34:32.209448+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native"},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.series_order_dimension":null,"graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":["AVG(adg)"],"graph.label_value_formatting":"auto","graph.series_order":null,"table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"none"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);  
INSERT INTO "PUBLIC"."REVISION" VALUES
(336, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:34:42.34634+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native"},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.series_order_dimension":null,"graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":["AVG(adg)"],"graph.label_value_formatting":"auto","graph.series_order":null,"table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"none"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(337, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:35:09.816984+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(datetime(date(datetime(''now'')), ''-1 days''))\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(datetime(''now'')))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(datetime(date(datetime(''now'')), \"-\" || {{Days}} || \" days\")) AND]] \"INCOME\".\"time\" < date(datetime(date(datetime(''now'')), ''+1 days'')))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native"},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.series_order_dimension":null,"graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":["AVG(adg)"],"graph.label_value_formatting":"auto","graph.series_order":null,"table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"none"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);
INSERT INTO "PUBLIC"."REVISION" VALUES
(338, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:39:24.07725+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(339, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:39:25.606152+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(340, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:39:26.243382+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(341, 'Card', 103, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:45:31.692954+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Balances","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select * from BALANCE","template-tags":{}},"database":2},"id":103,"parameter_mappings":[],"display":"table","entity_id":"bbV8FKxhZI0tBf-hgjPPY","collection_preview":true,"visualization_settings":{"table.pivot_column":"id","table.cell_column":"totalWalletBalance"},"parameters":[],"dataset":false,"public_uuid":null}', FALSE, TRUE, NULL);      
INSERT INTO SYSTEM_LOB_STREAM VALUES(103, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"max_value":0,"color":"#509EE3","columns":["Expo', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(103, 1, 'sure"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);   
INSERT INTO SYSTEM_LOB_STREAM VALUES(104, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Short","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position Size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\",\n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * -(pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''BUY''\n                        and o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''SHORT''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''SHORT''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''SHORT''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":100,"parameter_mappings":[],"display":"table","entity_id":"jyCr4xDoYRhw9cyRf0fxY","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(104, 1, 'colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"max_value":100,"color":"#509EE3","columns":["Position value"],"value":"","type":"single","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);             
INSERT INTO SYSTEM_LOB_STREAM VALUES(105, 0, '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Positions - Long","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"select symbol, Exposure, UPNL, \"Position Value\", \"Position size\", \"Entry Price\", \"<Current price>\"\nFROM (\n  select *\n  from (select p.account,\n    p.symbol,\n    p.side,\n    coalesce(o.nr_orders, 0) as order_count,\n    p.quantity as \"Position size\",\n    round(e.entryPrice, 4) as \"Entry Price\",\n    e.entryPrice*p.quantity as \"Position value\",\n    o.dca_price as \"Next DCA\", pr.price as \"<Current price>\", \n    pr.price * p.quantity as \"Position Value\",\n    tp_orders.tp_price as \"Next TP\", \n    ((pr.price-o.dca_price)/(tp_orders.tp_price-o.dca_price)) as \"DCA->TP distance\", \n    e.Exposure,\n    p.quantity * (pr.price - e.entryPrice) as \"UPNL\"\n    [[, p.quantity as \"Position size\",\n    pr.price*(1+{{dcaPercent}}/100.0) as \"DCA price\",\n    (e.entryPrice*p.quantity-p.quantity*pr.price*(1+{{dcaPercent}}/100.0))/(pr.price*((1+{{dcaPercent}}/100.0)-1)) as \"DCA vol. needed\"]]\nfrom position p\nleft outer join (\n                    select symbol, count(*) as nr_orders, max(o.price) as dca_price, account\n                      from orders o\n                      where o.side = ''SELL''\n                        and o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as o\n                 on p.symbol = o.symbol and p.account = o.account\nleft outer join (\n                    select symbol, min(tp_o.price) as tp_price, account\n                      from orders tp_o\n                      where tp_o.side = ''SELL''\n                        and tp_o.position_side = ''LONG''\n                      group by symbol, account\n                 ) as tp_orders\n                 on p.symbol = tp_orders.symbol and p.account = tp_orders.account\nleft outer join price pr on p.symbol = pr.symbol and pr.account = p.account\nleft outer join (SELECT DISTINCT POSITION.symbol, \n                        round(sum((POSITION.quantity*POSITION.entryPrice)/BALANCE.totalWalletBalance),3) as Exposure, \n                        POSITION.entryPrice as entryPrice,\n                        POSITION.account\n                   FROM POSITION, BALANCE\n                  WHERE POSITION.account = BALANCE.account\n                    AND POSITION.side = ''LONG''\n               GROUP BY POSITION.symbol, POSITION.account) as e\non p.symbol = e.symbol and p.account = e.account\nwhere p.quantity != 0\n  and p.side = ''LONG''\n  [[and p.account = {{Account}}]]\n  )\norder by Exposure desc\n)","template-tags":{"dcaPercent":{"id":"522d1087-016a-04ba-b567-9ce4f2445699","name":"dcaPercent","display-name":"Dcapercent","type":"text"},"Account":{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":99,"parameter_mappings":[],"display":"table","entity_id":"YSBHv0gw9SmOlP2cJrBP8","collection_preview":true,"visualization_settings":{"table.pivot_column":"registration_datetime","table.cell_column":"unrealizedProfit","table.columns":[{"name":"symbol","fieldRef":["field","symbol",{"base-type":"type/Text"}],"enabled":true},{"name":"UPNL","fieldRef":["field","UPNL",{"base-type":"type/Float"}],"enabled":true},{"name":"Position value","fieldRef":["field","Position value",{"base-type":"type/Float"}],"enabled":true},{"name":"Position size","fieldRef":["field","Position size",{"base-type":"type/Float"}],"enabled":true},{"name":"Entry Price","fieldRef":["field","Entry Price",{"base-type":"type/Float"}],"enabled":true},{"name":"<Current price>","fieldRef":["field","<Current price>",{"base-type":"type/Float"}],"enabled":true},{"name":"Exposure","fieldRef":["field","Exposure",{"base-type":"type/Float"}],"enabled":true}],"table.column_formatting":[{"max_value":0,"color":"#509EE3","columns":["Exposure"],"value":"","type":"range","color', NULL);            
INSERT INTO SYSTEM_LOB_STREAM VALUES(105, 1, 's":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0.15,"min_type":null,"operator":"=","max_type":null},{"columns":["UPNL"],"type":"single","operator":">","value":0,"color":"#88BF4D","highlight_row":false},{"max_value":100,"color":"#EF8C8C","columns":["UPNL"],"value":0,"type":"single","colors":["#ED6E6E","#FFFFFF","#84BB4C"],"highlight_row":false,"min_value":0,"min_type":null,"operator":"<","max_type":null},{"max_value":null,"color":"#509EE3","columns":["order_count"],"value":"","type":"range","colors":["#84BB4C","#FFFFFF","#ED6E6E"],"highlight_row":false,"min_value":0,"min_type":"custom","operator":"=","max_type":null}],"column_settings":{"[\"name\",\"Exposure\"]":{"show_mini_bar":true,"column_title":"Wallet exposure","number_style":"percent"},"[\"name\",\"Position value\"]":{"column_title":"Position value ($)"},"[\"name\",\"order_count\"]":{"column_title":"# DCA"},"[\"name\",\"DCA->TP distance\"]":{"number_style":"percent","show_mini_bar":true},"[\"name\",\"side\"]":{"column_title":"Side"},"[\"name\",\"Entry Price\"]":{"column_title":"Entry price ($)","view_as":"link"},"[\"name\",\"Next DCA\"]":{"column_title":"Next DCA ($)","view_as":"link"},"[\"name\",\"<Current price>\"]":{"view_as":"link"},"[\"name\",\"symbol\"]":{"column_title":"Symbol"},"[\"name\",\"account\"]":{"column_title":"Account"},"[\"name\",\"Next TP\"]":{"column_title":"Next TP ($)","view_as":"link"},"[\"name\",\"UPNL\"]":{"view_as":null,"number_style":"currency","currency_in_header":true,"currency_style":"symbol","show_mini_bar":false}}},"parameters":[{"id":"522d1087-016a-04ba-b567-9ce4f2445699","type":"category","target":["variable",["template-tag","dcaPercent"]],"name":"Dcapercent","slug":"dcaPercent"},{"id":"65986030-e11b-6c09-65d2-c36e1b064a5b","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', NULL);          
INSERT INTO "PUBLIC"."REVISION" VALUES
(342, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:00.954713+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(343, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-07-20 16:46:01.271727+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(344, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-07-27 23:07:11.030878+00', SYSTEM_COMBINE_CLOB(103), FALSE, FALSE, NULL),
(345, 'Card', 100, 1, TIMESTAMP WITH TIME ZONE '2023-07-27 23:10:36.026842+00', SYSTEM_COMBINE_CLOB(104), FALSE, FALSE, NULL),
(346, 'Card', 99, 1, TIMESTAMP WITH TIME ZONE '2023-07-27 23:11:38.693709+00', SYSTEM_COMBINE_CLOB(105), FALSE, FALSE, NULL),
(347, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-08-28 00:26:14.638611+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        [[WHERE INCOME.account = {{Account}}]]\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"waterfall","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"Adg","graph.x_axis.title_text":"Date","graph.metrics":["sum(adg)"],"table.pivot_column":"Date","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["date"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);              
INSERT INTO "PUBLIC"."REVISION" VALUES
(348, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-08-29 19:03:35.208529+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month , 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, \"date\"\r\n    order by year, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"waterfall","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"Adg","graph.x_axis.title_text":"Date","graph.metrics":["Adg"],"table.pivot_column":"Date","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["Date"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(349, 'Card', 38, 1, TIMESTAMP WITH TIME ZONE '2023-08-29 19:15:41.410132+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"database":2,"native":{"template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"},"Days":{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","name":"Days","display-name":"Days","type":"number","required":false}},"query":"SELECT time, \r\n       AVG(adg)\r\n  FROM (\r\n    SELECT INCOME.account, date(\"INCOME\".\"time\") AS \"time\", 100*sum(\"INCOME\".\"income\") / (\r\n              SELECT \"DAILY_BALANCE\".\"totalWalletBalance\" AS \"totalWalletBalance\"\r\n                FROM \"DAILY_BALANCE\"\r\n                WHERE (\"DAILY_BALANCE\".\"day\" >= date(''now'', ''-1 days'')\r\n                   AND \"DAILY_BALANCE\".\"day\" < date(''now''))\r\n                   AND \"DAILY_BALANCE\".\"account\" = \"INCOME\".\"account\"\r\n                   [[AND \"DAILY_BALANCE\".\"account\" = {{Account}}]]\r\n                ORDER BY \"DAILY_BALANCE\".\"day\" DESC\r\n                LIMIT 1) AS \"adg\"\r\n    FROM \"INCOME\"\r\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER''\r\n        OR \"INCOME\".\"incomeType\" IS NULL)\r\n       AND [[\"INCOME\".\"time\" >= date(''now'', \"-\" || {{Days}} || \" days\") AND]] \"INCOME\".\"time\" < date(''now'', ''+1 days''))\r\n       [[AND \"INCOME\".\"account\" = {{Account}}]]\r\n    GROUP BY INCOME.account,date(\"INCOME\".\"time\")\r\n  )\r\nGROUP BY time\r\nORDER BY date(time) ASC"},"type":"native"},"id":38,"parameter_mappings":null,"display":"line","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":true,"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"AVG(adg)","graph.series_order_dimension":null,"graph.x_axis.title_text":"Date","graph.goal_value":0.2,"graph.label_value_frequency":"all","graph.metrics":["AVG(adg)"],"graph.label_value_formatting":"auto","graph.series_order":null,"table.pivot_column":"time","series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["time"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"none"},{"id":"6e633138-cfac-201e-8bc3-c213e84e4b23","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);              
INSERT INTO "PUBLIC"."REVISION" VALUES
(350, 'Card', 98, 1, TIMESTAMP WITH TIME ZONE '2023-09-01 20:32:56.636634+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Avg Monthly ADG (%)","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select format(\"%02d.%4d\", month, year) as \"Date\", avg(sadg) as Adg\r\nFROM (\r\n    SELECT account, year, month, sum(adg) as sadg\r\n    FROM (\r\n        SELECT INCOME.account as account, strftime(\"%Y\", INCOME.time) as year, strftime(\"%m\", INCOME.time) as month, 100*sum(INCOME.income) / DAILY_BALANCE.totalWalletBalance as adg\r\n        FROM INCOME\r\n        INNER JOIN DAILY_BALANCE\r\n        ON (DAILY_BALANCE.day < date(INCOME.time, ''+1 days'') AND DAILY_BALANCE.day >= date(INCOME.time))\r\n           AND DAILY_BALANCE.account = INCOME.account\r\n        WHERE (totalWalletBalance > 1 [[ OR 1=1) AND (INCOME.account = {{Account}}]])\r\n        group by INCOME.account, year, month\r\n        order by INCOME.account, year ASC, month ASC\r\n    )\r\n    [[WHERE account = {{Account}}]]\r\n    group by account, year, month\r\n    order by year ASC, month ASC\r\n)\r\ngroup by \"Date\"\r\norder by year ASC, month ASC\r\n","template-tags":{"Account":{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":98,"parameter_mappings":[],"display":"waterfall","entity_id":"DWeLtcV5PVtqqRNXD8qEi","collection_preview":true,"visualization_settings":{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"table.cell_column":"Adg","graph.x_axis.title_text":"Date","graph.metrics":["Adg"],"table.pivot_column":"Date","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["Date"]},"parameters":[{"id":"05f73420-986c-cf71-fe4c-c5bb801860b7","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(351, 'Card', 37, 1, TIMESTAMP WITH TIME ZONE '2023-09-04 13:28:01.941686+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Daily PNL","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        [[AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'')]] AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true}}},"database":2},"id":37,"parameter_mappings":null,"display":"area","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":false,"graph.y_axis.title_text":"PNL","graph.show_values":true,"graph.x_axis.title_text":"Date","graph.y_axis.scale":"linear","graph.label_value_frequency":"fit","graph.metrics":["PnL","Total PnL"],"graph.label_value_formatting":"auto","series_settings":{"sum":{"title":"PNL","display":"area","line.missing":"zero"}},"graph.x_axis.scale":"timeseries","graph.dimensions":["Date"],"waterfall.show_total":false},"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);           
INSERT INTO "PUBLIC"."REVISION" VALUES
(352, 'Card', 37, 1, TIMESTAMP WITH TIME ZONE '2023-09-04 19:55:46.700115+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Daily PNL","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":37,"parameter_mappings":null,"display":"area","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":false,"graph.y_axis.title_text":"PNL","graph.show_values":true,"graph.x_axis.title_text":"Date","graph.y_axis.scale":"linear","graph.label_value_frequency":"fit","graph.metrics":["PnL","Total PnL"],"graph.label_value_formatting":"auto","series_settings":{"sum":{"title":"PNL","display":"area","line.missing":"zero"}},"graph.x_axis.scale":"timeseries","graph.dimensions":["Date"],"waterfall.show_total":false},"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account"}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL),
(353, 'Card', 37, 1, TIMESTAMP WITH TIME ZONE '2023-09-04 19:57:28.983184+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Daily PNL","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":37,"parameter_mappings":null,"display":"area","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":false,"graph.y_axis.title_text":"PNL","graph.show_values":true,"graph.x_axis.title_text":"Date","graph.y_axis.scale":"linear","graph.label_value_frequency":"fit","graph.metrics":["PnL","Total PnL"],"graph.label_value_formatting":"auto","series_settings":{"sum":{"title":"PNL","display":"area","line.missing":"zero"}},"graph.x_axis.scale":"timeseries","graph.dimensions":["Date"],"waterfall.show_total":false},"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"list","values_source_type":"card","values_source_config":{"card_id":103,"value_field":["field","account",{"base-type":"type/Text"}]}}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);               
INSERT INTO "PUBLIC"."REVISION" VALUES
(354, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-09-04 19:58:11.805683+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(355, 'Dashboard', 1, 1, TIMESTAMP WITH TIME ZONE '2023-09-04 19:58:12.118063+00', '{"description":null,"name":"Overview","cache_ttl":null,"cards":[{"size_x":5,"size_y":3,"row":0,"col":0,"id":33,"card_id":33,"series":[]},{"size_x":5,"size_y":3,"row":7,"col":0,"id":35,"card_id":35,"series":[]},{"size_x":8,"size_y":5,"row":0,"col":5,"id":37,"card_id":37,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":0,"id":38,"card_id":38,"series":[]},{"size_x":12,"size_y":4,"row":18,"col":0,"id":40,"card_id":40,"series":[]},{"size_x":11,"size_y":5,"row":0,"col":13,"id":41,"card_id":41,"series":[]},{"size_x":12,"size_y":5,"row":13,"col":12,"id":42,"card_id":42,"series":[]},{"size_x":5,"size_y":3,"row":21,"col":19,"id":43,"card_id":43,"series":[]},{"size_x":12,"size_y":3,"row":18,"col":12,"id":44,"card_id":44,"series":[]},{"size_x":5,"size_y":4,"row":3,"col":0,"id":65,"card_id":65,"series":[]},{"size_x":5,"size_y":3,"row":10,"col":0,"id":98,"card_id":98,"series":[]},{"size_x":9,"size_y":8,"row":5,"col":15,"id":99,"card_id":100,"series":[]},{"size_x":10,"size_y":8,"row":5,"col":5,"id":100,"card_id":99,"series":[]},{"size_x":12,"size_y":4,"row":22,"col":0,"id":102,"card_id":102,"series":[]}]}', FALSE, FALSE, NULL),
(356, 'Card', 37, 1, TIMESTAMP WITH TIME ZONE '2023-09-05 10:47:46.180575+00', '{"description":null,"archived":false,"collection_position":null,"table_id":null,"database_id":2,"enable_embedding":false,"collection_id":null,"query_type":"native","name":"Daily PNL","creator_id":1,"made_public_by_id":null,"embedding_params":null,"cache_ttl":null,"dataset_query":{"type":"native","native":{"query":"Select \"Date\", PnL, sum(PnL) over (ORDER BY \"Date\") AS \"Total PnL\"\nFrom (\n    SELECT DATE(\"INCOME\".\"time\") AS \"Date\", SUM(\"INCOME\".\"income\") AS PnL\n    FROM \"INCOME\"\n    WHERE ((\"INCOME\".\"incomeType\" <> ''TRANSFER'')\n        OR (\"INCOME\".\"incomeType\" IS NULL))\n        AND \"INCOME\".\"time\" >= DATE(''now'', ''-'' || {{Days}} || '' days'') AND \"INCOME\".\"time\" < DATE(''now'', ''+1 days'')\n        [[AND \"INCOME\".\"account\" == {{Account}}]]\n    GROUP BY DATE(\"INCOME\".\"time\")\n    ORDER BY DATE(\"INCOME\".\"time\") ASC\n)","template-tags":{"Days":{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","name":"Days","display-name":"Days","type":"number","default":"14","required":true},"Account":{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","name":"Account","display-name":"Account","type":"text"}}},"database":2},"id":37,"parameter_mappings":null,"display":"combo","entity_id":null,"collection_preview":true,"visualization_settings":{"graph.show_goal":false,"graph.y_axis.title_text":"PNL","graph.show_values":true,"graph.x_axis.title_text":"Date","graph.y_axis.scale":"linear","graph.label_value_frequency":"fit","graph.metrics":["Total PnL","PnL"],"graph.label_value_formatting":"auto","series_settings":{"sum":{"title":"PNL","display":"area","line.missing":"zero"},"PnL":{"color":"#A7D07C","display":"bar","line.interpolate":"cardinal","line.marker_enabled":null,"axis":null,"show_series_values":true},"Total PnL":{"color":"#509EE3","display":"area","line.interpolate":"cardinal","line.marker_enabled":null,"axis":null}},"graph.x_axis.scale":"timeseries","graph.dimensions":["Date"],"waterfall.show_total":false},"parameters":[{"id":"9ca3e8b2-3210-c185-78f2-40fc32417a18","type":"number/=","target":["variable",["template-tag","Days"]],"name":"Days","slug":"Days","default":"14"},{"id":"3e13da73-9143-8797-3d34-9a646d27cf90","type":"category","target":["variable",["template-tag","Account"]],"name":"Account","slug":"Account","values_query_type":"list","values_source_type":"card","values_source_config":{"card_id":103,"value_field":["field","account",{"base-type":"type/Text"}]}}],"dataset":false,"public_uuid":null}', FALSE, FALSE, NULL);   
CREATE INDEX "PUBLIC"."IDX_REVISION_MODEL_MODEL_ID" ON "PUBLIC"."REVISION"("MODEL" NULLS FIRST, "MODEL_ID" NULLS FIRST);       
CREATE CACHED TABLE "PUBLIC"."METRIC"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) DEFAULT ON NULL NOT NULL,
    "TABLE_ID" INTEGER NOT NULL,
    "CREATOR_ID" INTEGER NOT NULL,
    "NAME" CHARACTER VARYING(254) NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "ARCHIVED" BOOLEAN DEFAULT FALSE NOT NULL,
    "DEFINITION" CHARACTER LARGE OBJECT NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "POINTS_OF_INTEREST" CHARACTER LARGE OBJECT,
    "CAVEATS" CHARACTER LARGE OBJECT,
    "HOW_IS_THIS_CALCULATED" CHARACTER LARGE OBJECT,
    "SHOW_IN_GETTING_STARTED" BOOLEAN DEFAULT FALSE NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.'
);              
ALTER TABLE "PUBLIC"."METRIC" ADD CONSTRAINT "PUBLIC"."PK_METRIC" PRIMARY KEY("ID");           
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.METRIC;   
CREATE INDEX "PUBLIC"."IDX_METRIC_SHOW_IN_GETTING_STARTED" ON "PUBLIC"."METRIC"("SHOW_IN_GETTING_STARTED" NULLS FIRST);        
CREATE INDEX "PUBLIC"."IDX_METRIC_CREATOR_ID" ON "PUBLIC"."METRIC"("CREATOR_ID" NULLS FIRST);  
CREATE INDEX "PUBLIC"."IDX_METRIC_TABLE_ID" ON "PUBLIC"."METRIC"("TABLE_ID" NULLS FIRST);      
CREATE CACHED TABLE "PUBLIC"."REPORT_DASHBOARD"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) DEFAULT ON NULL NOT NULL,
    "CREATED_AT" TIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP NOT NULL,
    "NAME" CHARACTER VARYING(254) NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "CREATOR_ID" INTEGER NOT NULL,
    "PARAMETERS" CHARACTER LARGE OBJECT NOT NULL,
    "POINTS_OF_INTEREST" CHARACTER LARGE OBJECT,
    "CAVEATS" CHARACTER LARGE OBJECT,
    "SHOW_IN_GETTING_STARTED" BOOLEAN DEFAULT FALSE NOT NULL,
    "PUBLIC_UUID" CHARACTER(36) COMMENT 'Unique UUID used to in publically-accessible links to this Dashboard.',
    "MADE_PUBLIC_BY_ID" INTEGER COMMENT 'The ID of the User who first publically shared this Dashboard.',
    "ENABLE_EMBEDDING" BOOLEAN DEFAULT FALSE COMMENT 'Is this Dashboard allowed to be embedded in different websites (using a signed JWT)?' NOT NULL,
    "EMBEDDING_PARAMS" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON containing information about required parameters that must be supplied when embedding this Dashboard.',
    "ARCHIVED" BOOLEAN DEFAULT FALSE COMMENT 'Is this Dashboard archived (effectively treated as deleted?)' NOT NULL,
    "POSITION" INTEGER COMMENT 'The position this Dashboard should appear in the Dashboards list, lower-numbered positions appearing before higher numbered ones.',
    "COLLECTION_ID" INTEGER COMMENT 'Optional ID of Collection this Dashboard belongs to.',
    "COLLECTION_POSITION" SMALLINT COMMENT 'Optional pinned position for this item in its Collection. NULL means item is not pinned.',
    "CACHE_TTL" INTEGER COMMENT 'Granular cache TTL for specific dashboard.',
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.',
    "AUTO_APPLY_FILTERS" BOOLEAN DEFAULT TRUE COMMENT 'Whether or not to auto-apply filters on a dashboard' NOT NULL
);       
ALTER TABLE "PUBLIC"."REPORT_DASHBOARD" ADD CONSTRAINT "PUBLIC"."PK_REPORT_DASHBOARD" PRIMARY KEY("ID");       
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.REPORT_DASHBOARD;         
INSERT INTO "PUBLIC"."REPORT_DASHBOARD" VALUES
(1, TIMESTAMP '2022-11-21 21:01:32.456', TIMESTAMP '2023-09-04 19:58:11.916515', 'Overview', NULL, 1, '[{"name":"Account","slug":"account","id":"26dff5a5","type":"category","values_query_type":"list","values_source_type":"card","values_source_config":{"card_id":103,"value_field":["field","account",{"base-type":"type/Text"}]}},{"name":"Days","slug":"days","id":"d6e37bc7","type":"number/=","sectionId":"number"}]', NULL, NULL, FALSE, NULL, NULL, FALSE, NULL, FALSE, NULL, NULL, 1, NULL, NULL, TRUE);            
CREATE INDEX "PUBLIC"."IDX_DASHBOARD_CREATOR_ID" ON "PUBLIC"."REPORT_DASHBOARD"("CREATOR_ID" NULLS FIRST);     
CREATE INDEX "PUBLIC"."IDX_REPORT_DASHBOARD_SHOW_IN_GETTING_STARTED" ON "PUBLIC"."REPORT_DASHBOARD"("SHOW_IN_GETTING_STARTED" NULLS FIRST);    
CREATE INDEX "PUBLIC"."IDX_DASHBOARD_PUBLIC_UUID" ON "PUBLIC"."REPORT_DASHBOARD"("PUBLIC_UUID" NULLS FIRST);   
CREATE INDEX "PUBLIC"."IDX_DASHBOARD_COLLECTION_ID" ON "PUBLIC"."REPORT_DASHBOARD"("COLLECTION_ID" NULLS FIRST);               
CREATE CACHED TABLE "PUBLIC"."QUERY_ACTION" COMMENT 'A readwrite query type of action'(
    "ACTION_ID" INTEGER COMMENT 'The related action' NOT NULL,
    "DATABASE_ID" INTEGER COMMENT 'The associated database' NOT NULL,
    "DATASET_QUERY" CHARACTER LARGE OBJECT COMMENT 'The MBQL writeback query' NOT NULL
);         
ALTER TABLE "PUBLIC"."QUERY_ACTION" ADD CONSTRAINT "PUBLIC"."PK_QUERY_ACTION" PRIMARY KEY("ACTION_ID");        
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QUERY_ACTION;             
CREATE CACHED TABLE "PUBLIC"."MODEL_INDEX_VALUE" COMMENT 'Used to keep track of the values indexed in a model'(
    "MODEL_INDEX_ID" INTEGER COMMENT 'The ID of the indexed model.',
    "MODEL_PK" INTEGER COMMENT 'The primary key of the indexed value' NOT NULL,
    "NAME" CHARACTER LARGE OBJECT COMMENT 'The label to display identifying the indexed value.' NOT NULL
);               
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.MODEL_INDEX_VALUE;        
CREATE CACHED TABLE "PUBLIC"."METABASE_FIELD"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 129 RESTART WITH 164) DEFAULT ON NULL SELECTIVITY 100 NOT NULL,
    "CREATED_AT" TIMESTAMP SELECTIVITY 67 NOT NULL,
    "UPDATED_AT" TIMESTAMP SELECTIVITY 99 NOT NULL,
    "NAME" CHARACTER VARYING(254) SELECTIVITY 52 NOT NULL,
    "BASE_TYPE" CHARACTER VARYING(255) SELECTIVITY 4 NOT NULL,
    "SEMANTIC_TYPE" CHARACTER VARYING(255) SELECTIVITY 16,
    "ACTIVE" BOOLEAN DEFAULT TRUE SELECTIVITY 1 NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "PREVIEW_DISPLAY" BOOLEAN DEFAULT TRUE SELECTIVITY 1 NOT NULL,
    "POSITION" INTEGER DEFAULT 0 SELECTIVITY 10 NOT NULL,
    "TABLE_ID" INTEGER SELECTIVITY 12 NOT NULL,
    "PARENT_ID" INTEGER SELECTIVITY 1,
    "DISPLAY_NAME" CHARACTER VARYING(254) SELECTIVITY 50,
    "VISIBILITY_TYPE" CHARACTER VARYING(32) DEFAULT 'normal' SELECTIVITY 1 NOT NULL,
    "FK_TARGET_FIELD_ID" INTEGER SELECTIVITY 3,
    "LAST_ANALYZED" TIMESTAMP SELECTIVITY 3,
    "POINTS_OF_INTEREST" CHARACTER LARGE OBJECT,
    "CAVEATS" CHARACTER LARGE OBJECT,
    "FINGERPRINT" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON containing non-identifying information about this Field, such as min, max, and percent JSON. Used for classification.',
    "FINGERPRINT_VERSION" INTEGER DEFAULT '0' SELECTIVITY 1 COMMENT 'The version of the fingerprint for this Field. Used so we can keep track of which Fields need to be analyzed again when new things are added to fingerprints.' NOT NULL,
    "DATABASE_TYPE" CHARACTER LARGE OBJECT NOT NULL,
    "HAS_FIELD_VALUES" CHARACTER LARGE OBJECT COMMENT 'Whether we have FieldValues ("list"), should ad-hoc search ("search"), disable entirely ("none"), or infer dynamically (null)"',
    "SETTINGS" CHARACTER LARGE OBJECT COMMENT 'Serialized JSON FE-specific settings like formatting, etc. Scope of what is stored here may increase in future.',
    "DATABASE_POSITION" INTEGER DEFAULT 0 SELECTIVITY 10 NOT NULL,
    "CUSTOM_POSITION" INTEGER DEFAULT 0 SELECTIVITY 1 NOT NULL,
    "EFFECTIVE_TYPE" CHARACTER VARYING(255) SELECTIVITY 4 COMMENT 'The effective type of the field after any coercions.',
    "COERCION_STRATEGY" CHARACTER VARYING(255) SELECTIVITY 1 COMMENT 'A strategy to coerce the base_type into the effective_type.',
    "NFC_PATH" CHARACTER VARYING(254) SELECTIVITY 1 COMMENT 'Nested field column paths, flattened',
    "DATABASE_REQUIRED" BOOLEAN DEFAULT FALSE SELECTIVITY 1 COMMENT 'Indicates this field is required by the database for new records. Usually not null and without a default.' NOT NULL,
    "DATABASE_IS_AUTO_INCREMENT" BOOLEAN DEFAULT FALSE SELECTIVITY 1 COMMENT 'Indicates this field is auto incremented' NOT NULL,
    "JSON_UNFOLDING" BOOLEAN DEFAULT FALSE COMMENT 'Enable/disable JSON unfolding for a field' NOT NULL
);          
ALTER TABLE "PUBLIC"."METABASE_FIELD" ADD CONSTRAINT "PUBLIC"."PK_METABASE_FIELD" PRIMARY KEY("ID");           
-- 150 +/- SELECT COUNT(*) FROM PUBLIC.METABASE_FIELD;         
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(1, TIMESTAMP '2022-11-21 20:55:29.966', TIMESTAMP '2023-10-27 23:41:21.341507', 'PRICE', 'type/Float', NULL, TRUE, 'The list price of the product. Note that this is not always the price the product sold for due to discounts, promotions, etc.', TRUE, 5, 1, NULL, 'Price', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":170,"nil%":0.0},"type":{"type/Number":{"min":15.691943673970439,"q1":37.25154462926434,"q3":75.45898071609447,"max":98.81933684368194,"sd":21.711481557852057,"avg":55.74639966792074}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 5, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(2, TIMESTAMP '2022-11-21 20:55:29.968', TIMESTAMP '2023-10-27 23:41:21.317754', 'EAN', 'type/Text', NULL, TRUE, 'The international article number. A 13 digit number uniquely identifying the product.', TRUE, 1, 1, NULL, 'Ean', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":200,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":13.0}}}', 5, 'CHARACTER', NULL, NULL, 1, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(3, TIMESTAMP '2022-11-21 20:55:29.969', TIMESTAMP '2023-10-27 23:41:21.364531', 'VENDOR', 'type/Text', 'type/Company', TRUE, 'The source of the product.', TRUE, 4, 1, NULL, 'Vendor', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":200,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":20.6}}}', 5, 'CHARACTER VARYING', NULL, NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(4, TIMESTAMP '2022-11-21 20:55:29.97', TIMESTAMP '2023-10-27 23:41:21.301971', 'CATEGORY', 'type/Text', 'type/Category', TRUE, 'The type of product, valid values include: Doohicky, Gadget, Gizmo and Widget', TRUE, 3, 1, NULL, 'Category', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":4,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":6.375}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 3, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(5, TIMESTAMP '2022-11-21 20:55:29.971', TIMESTAMP '2023-10-27 23:41:21.357374', 'TITLE', 'type/Text', 'type/Title', TRUE, 'The name of the product as it should be displayed to customers.', TRUE, 2, 1, NULL, 'Title', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":199,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":21.495}}}', 5, 'CHARACTER VARYING', NULL, NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(6, TIMESTAMP '2022-11-21 20:55:29.975', TIMESTAMP '2023-10-27 23:41:21.348214', 'RATING', 'type/Float', 'type/Score', TRUE, 'The average rating users have given the product. This ranges from 1 - 5', TRUE, 6, 1, NULL, 'Rating', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":23,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":3.5120465053408525,"q3":4.216124969497314,"max":5.0,"sd":1.3605488657451452,"avg":3.4715}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 6, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(7, TIMESTAMP '2022-11-21 20:55:29.977', TIMESTAMP '2023-10-27 23:41:21.309241', 'CREATED_AT', 'type/DateTime', 'type/CreationTimestamp', TRUE, 'The date the product was added to our catalog.', TRUE, 7, 1, NULL, 'Created At', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":200,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2016-04-26T19:29:55.147Z","latest":"2019-04-15T13:34:19.931Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 7, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(8, TIMESTAMP '2022-11-21 20:55:29.979', TIMESTAMP '2023-10-27 23:41:21.333328', 'ID', 'type/BigInteger', 'type/PK', TRUE, 'The numerical product number. Only used internally. All external communication should use the title or EAN.', TRUE, 0, 1, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, FALSE, TRUE, FALSE);             
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(9, TIMESTAMP '2022-11-21 20:55:30.068', TIMESTAMP '2023-10-27 23:41:21.177466', 'DISCOUNT', 'type/Float', 'type/Discount', TRUE, 'Discount amount.', TRUE, 6, 2, NULL, 'Discount', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":701,"nil%":0.898},"type":{"type/Number":{"min":0.17088996672584322,"q1":2.9786226681458743,"q3":7.338187788658235,"max":61.69684269960571,"sd":3.053663125001991,"avg":5.161255547580326}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 6, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(10, TIMESTAMP '2022-11-21 20:55:30.069', TIMESTAMP '2023-10-27 23:41:21.170154', 'QUANTITY', 'type/Integer', 'type/Quantity', TRUE, 'Number of products bought.', TRUE, 8, 2, NULL, 'Quantity', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":62,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":1.755882607764982,"q3":4.882654507928044,"max":100.0,"sd":4.214258386403798,"avg":3.7015}}}', 5, 'INTEGER', 'auto-list', NULL, 8, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(11, TIMESTAMP '2022-11-21 20:55:30.07', TIMESTAMP '2023-10-27 23:41:21.162651', 'USER_ID', 'type/Integer', 'type/FK', TRUE, 'The id of the user who made this order. Note that in some cases where an order was created on behalf of a customer who phoned the order in, this might be the employee who handled the request.', TRUE, 1, 2, NULL, 'User ID', 'normal', 30, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":929,"nil%":0.0}}', 5, 'INTEGER', NULL, NULL, 1, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(12, TIMESTAMP '2022-11-21 20:55:30.073', TIMESTAMP '2023-10-27 23:41:21.1848', 'CREATED_AT', 'type/DateTime', 'type/CreationTimestamp', TRUE, 'The date and time an order was submitted.', TRUE, 7, 2, NULL, 'Created At', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":9998,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2016-04-30T18:56:13.352Z","latest":"2020-04-19T14:07:15.657Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 7, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(13, TIMESTAMP '2022-11-21 20:55:30.076', TIMESTAMP '2023-10-27 23:41:21.120198', 'PRODUCT_ID', 'type/Integer', 'type/FK', TRUE, 'The product ID. This is an internal identifier for the product, NOT the SKU.', TRUE, 2, 2, NULL, 'Product ID', 'normal', 8, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":200,"nil%":0.0}}', 5, 'INTEGER', NULL, NULL, 2, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(14, TIMESTAMP '2022-11-21 20:55:30.079', TIMESTAMP '2023-10-27 23:41:21.13129', 'SUBTOTAL', 'type/Float', NULL, TRUE, 'The raw, pre-tax cost of the order. Note that this might be different in the future from the product price due to promotions, credits, etc.', TRUE, 3, 2, NULL, 'Subtotal', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":340,"nil%":0.0},"type":{"type/Number":{"min":15.691943673970439,"q1":49.74894519060184,"q3":105.42965746993103,"max":148.22900526552291,"sd":32.53705013056317,"avg":77.01295465356547}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 3, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(15, TIMESTAMP '2022-11-21 20:55:30.081', TIMESTAMP '2023-10-27 23:41:21.14761', 'TOTAL', 'type/Float', NULL, TRUE, 'The total billed amount.', TRUE, 5, 2, NULL, 'Total', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":4426,"nil%":0.0},"type":{"type/Number":{"min":8.93914247937167,"q1":51.34535490743823,"q3":110.29428389265787,"max":159.34900526552292,"sd":34.26469575709948,"avg":80.35871658771228}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 5, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(16, TIMESTAMP '2022-11-21 20:55:30.083', TIMESTAMP '2023-10-27 23:41:21.13961', 'TAX', 'type/Float', NULL, TRUE, 'This is the amount of local and federal taxes that are collected on the purchase. Note that other governmental fees on some products are not included here, but instead are accounted for in the subtotal.', TRUE, 4, 2, NULL, 'Tax', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":797,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":2.273340386603857,"q3":5.337275338216307,"max":11.12,"sd":2.3206651358900316,"avg":3.8722100000000004}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 4, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE);           
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(17, TIMESTAMP '2022-11-21 20:55:30.084', TIMESTAMP '2023-10-27 23:41:21.155545', 'ID', 'type/BigInteger', 'type/PK', TRUE, U&'This is a unique ID for the product. It is also called the \201cInvoice number\201d or \201cConfirmation number\201d in customer facing emails and screens.', TRUE, 0, 2, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, FALSE, TRUE, FALSE),
(18, TIMESTAMP '2022-11-21 20:55:30.167', TIMESTAMP '2023-10-27 23:41:21.289426', 'CREATED_AT', 'type/DateTime', 'type/CreationTimestamp', TRUE, U&'The date the user record was created. Also referred to as the user\2019s "join date"', TRUE, 12, 3, NULL, 'Created At', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2500,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2016-04-19T21:35:18.752Z","latest":"2019-04-19T14:06:27.3Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 12, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(19, TIMESTAMP '2022-11-21 20:55:30.17', TIMESTAMP '2023-10-27 23:41:21.211766', 'PASSWORD', 'type/Text', NULL, TRUE, 'This is the salted password of the user. It should not be visible', TRUE, 3, 3, NULL, 'Password', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2500,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":36.0}}}', 5, 'CHARACTER VARYING', NULL, NULL, 3, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(20, TIMESTAMP '2022-11-21 20:55:30.172', TIMESTAMP '2023-10-27 23:41:21.236433', 'LONGITUDE', 'type/Float', 'type/Longitude', TRUE, 'This is the longitude of the user on sign-up. It might be updated in the future to the last seen location.', TRUE, 6, 3, NULL, 'Longitude', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2491,"nil%":0.0},"type":{"type/Number":{"min":-166.5425726,"q1":-101.58350792373135,"q3":-84.65289348288829,"max":-67.96735199999999,"sd":15.399698968175663,"avg":-95.18741780363999}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 6, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(21, TIMESTAMP '2022-11-21 20:55:30.173', TIMESTAMP '2023-10-27 23:41:21.198105', 'ADDRESS', 'type/Text', NULL, TRUE, U&'The street address of the account\2019s billing address', TRUE, 1, 3, NULL, 'Address', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2490,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":20.85}}}', 5, 'CHARACTER VARYING', NULL, NULL, 1, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(22, TIMESTAMP '2022-11-21 20:55:30.174', TIMESTAMP '2023-10-27 23:41:21.219475', 'NAME', 'type/Text', 'type/Name', TRUE, 'The name of the user who owns an account', TRUE, 4, 3, NULL, 'Name', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2499,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":13.532}}}', 5, 'CHARACTER VARYING', NULL, NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(23, TIMESTAMP '2022-11-21 20:55:30.175', TIMESTAMP '2023-10-27 23:41:21.204906', 'EMAIL', 'type/Text', 'type/Email', TRUE, 'The contact email for the account.', TRUE, 2, 3, NULL, 'Email', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2500,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":1.0,"percent-state":0.0,"average-length":24.1824}}}', 5, 'CHARACTER VARYING', NULL, NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(24, TIMESTAMP '2022-11-21 20:55:30.177', TIMESTAMP '2023-10-27 23:41:21.258962', 'BIRTH_DATE', 'type/Date', NULL, TRUE, 'The date of birth of the user', TRUE, 9, 3, NULL, 'Birth Date', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2308,"nil%":0.0},"type":{"type/DateTime":{"earliest":"1958-04-26","latest":"2000-04-03"}}}', 5, 'DATE', NULL, NULL, 9, 0, 'type/Date', NULL, NULL, FALSE, FALSE, FALSE);              
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(25, TIMESTAMP '2022-11-21 20:55:30.178', TIMESTAMP '2023-10-27 23:41:21.243034', 'STATE', 'type/Text', 'type/State', TRUE, U&'The state or province of the account\2019s billing address', TRUE, 7, 3, NULL, 'State', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":49,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":1.0,"average-length":2.0}}}', 5, 'CHARACTER', 'auto-list', NULL, 7, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(26, TIMESTAMP '2022-11-21 20:55:30.18', TIMESTAMP '2023-10-27 23:41:21.252119', 'SOURCE', 'type/Text', 'type/Source', TRUE, 'The channel through which we acquired this user. Valid values include: Affiliate, Facebook, Google, Organic and Twitter', TRUE, 8, 3, NULL, 'Source', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":5,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.4084}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 8, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(27, TIMESTAMP '2022-11-21 20:55:30.181', TIMESTAMP '2023-10-27 23:41:21.282161', 'LATITUDE', 'type/Float', 'type/Latitude', TRUE, 'This is the latitude of the user on sign-up. It might be updated in the future to the last seen location.', TRUE, 11, 3, NULL, 'Latitude', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2491,"nil%":0.0},"type":{"type/Number":{"min":25.775827,"q1":35.302705923023126,"q3":43.773802584662,"max":70.6355001,"sd":6.390832341883712,"avg":39.87934670484002}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 11, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(28, TIMESTAMP '2022-11-21 20:55:30.182', TIMESTAMP '2023-10-27 23:41:21.421957', 'ZIP', 'type/Text', 'type/ZipCode', TRUE, U&'The postal code of the account\2019s billing address', TRUE, 10, 3, NULL, 'Zip', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":2234,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":5.0}}}', 5, 'CHARACTER', NULL, NULL, 10, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(29, TIMESTAMP '2022-11-21 20:55:30.183', TIMESTAMP '2023-10-27 23:41:21.228108', 'CITY', 'type/Text', 'type/City', TRUE, U&'The city of the account\2019s billing address', TRUE, 5, 3, NULL, 'City', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":1966,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.002,"average-length":8.284}}}', 5, 'CHARACTER VARYING', NULL, NULL, 5, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(30, TIMESTAMP '2022-11-21 20:55:30.184', TIMESTAMP '2023-10-27 23:41:21.274729', 'ID', 'type/BigInteger', 'type/PK', TRUE, 'A unique identifier given to each user.', TRUE, 0, 3, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, FALSE, TRUE, FALSE),
(31, TIMESTAMP '2022-11-21 20:55:30.231', TIMESTAMP '2023-10-27 23:41:21.407993', 'RATING', 'type/Integer', 'type/Score', TRUE, 'The rating (on a scale of 1-5) the user left.', TRUE, 3, 4, NULL, 'Rating', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":5,"nil%":0.0},"type":{"type/Number":{"min":1.0,"q1":3.54744353181696,"q3":4.764807071650455,"max":5.0,"sd":1.0443899855660577,"avg":3.987410071942446}}}', 5, 'SMALLINT', 'auto-list', NULL, 3, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(32, TIMESTAMP '2022-11-21 20:55:30.232', TIMESTAMP '2023-10-27 23:41:21.429761', 'BODY', 'type/Text', 'type/Description', TRUE, 'The review the user left. Limited to 2000 characters.', TRUE, 4, 4, NULL, 'Body', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":1112,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":177.41996402877697}}}', 5, 'CHARACTER VARYING', NULL, NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE);     
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(33, TIMESTAMP '2022-11-21 20:55:30.233', TIMESTAMP '2023-10-27 23:41:21.400341', 'PRODUCT_ID', 'type/Integer', 'type/FK', TRUE, 'The product the review was for', TRUE, 1, 4, NULL, 'Product ID', 'normal', 8, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":176,"nil%":0.0}}', 5, 'INTEGER', NULL, NULL, 1, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(34, TIMESTAMP '2022-11-21 20:55:30.234', TIMESTAMP '2023-10-27 23:41:21.38457', 'CREATED_AT', 'type/DateTime', 'type/CreationTimestamp', TRUE, 'The day and time a review was written by a user.', TRUE, 5, 4, NULL, 'Created At', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":1112,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2016-06-03T00:37:05.818Z","latest":"2020-04-19T14:15:25.677Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 5, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(35, TIMESTAMP '2022-11-21 20:55:30.235', TIMESTAMP '2023-10-27 23:41:21.415008', 'REVIEWER', 'type/Text', NULL, TRUE, 'The user who left the review', TRUE, 2, 4, NULL, 'Reviewer', 'normal', NULL, TIMESTAMP '2022-11-21 20:55:34.58', NULL, NULL, '{"global":{"distinct-count":1076,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.001798561151079137,"average-length":9.972122302158274}}}', 5, 'CHARACTER VARYING', NULL, NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(36, TIMESTAMP '2022-11-21 20:55:30.236', TIMESTAMP '2023-10-27 23:41:21.391053', 'ID', 'type/BigInteger', 'type/PK', TRUE, 'A unique internal identifier for the review. Should not be used externally.', TRUE, 0, 4, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, FALSE, TRUE, FALSE),
(37, TIMESTAMP '2022-11-21 20:57:59.608', TIMESTAMP '2022-11-21 20:58:00.192', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 5, NULL, 'Registration Datetime', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-11-21T20:57:45Z","latest":"2022-11-21T20:57:45Z"}}}', 5, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(38, TIMESTAMP '2022-11-21 20:57:59.609', TIMESTAMP '2022-11-21 20:58:01.154', 'initialMargin', 'type/Float', 'type/GrossMargin', TRUE, NULL, TRUE, 7, 5, NULL, 'InitialMargin', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":0.0,"max":0.0,"sd":0.0,"avg":0.0}}}', 5, 'FLOAT', NULL, NULL, 7, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(39, TIMESTAMP '2022-11-21 20:57:59.611', TIMESTAMP '2022-11-21 20:58:00.194', 'quantity', 'type/Float', NULL, TRUE, NULL, TRUE, 6, 5, NULL, 'Quantity', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":0.0,"max":0.0,"sd":0.0,"avg":0.0}}}', 5, 'FLOAT', NULL, NULL, 6, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(40, TIMESTAMP '2022-11-21 20:57:59.613', TIMESTAMP '2022-11-21 20:58:00.195', 'unrealizedProfit', 'type/Float', NULL, TRUE, NULL, TRUE, 4, 5, NULL, 'UnrealizedProfit', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":0.0,"max":0.0,"sd":0.0,"avg":0.0}}}', 5, 'FLOAT', NULL, NULL, 4, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(41, TIMESTAMP '2022-11-21 20:57:59.614', TIMESTAMP '2023-04-03 20:29:00.177174', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 5, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(42, TIMESTAMP '2022-11-21 20:57:59.616', TIMESTAMP '2022-11-21 20:58:00.196', 'symbol', 'type/Text', NULL, TRUE, NULL, TRUE, 2, 5, NULL, 'Symbol', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":195,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.717948717948718}}}', 5, 'VARCHAR', NULL, NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE); 
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(43, TIMESTAMP '2022-11-21 20:57:59.617', TIMESTAMP '2022-11-21 20:58:01.163', 'side', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 3, 5, NULL, 'Side', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":4.5}}}', 5, 'VARCHAR', 'auto-list', NULL, 3, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(44, TIMESTAMP '2022-11-21 20:57:59.618', TIMESTAMP '2022-11-21 20:58:01.166', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 8, 5, NULL, 'Account', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 8, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(45, TIMESTAMP '2022-11-21 20:57:59.619', TIMESTAMP '2022-11-21 20:58:00.199', 'entryPrice', 'type/Float', NULL, TRUE, NULL, TRUE, 5, 5, NULL, 'EntryPrice', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":0.0,"max":0.0,"sd":0.0,"avg":0.0}}}', 5, 'FLOAT', NULL, NULL, 5, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(46, TIMESTAMP '2022-11-21 20:57:59.648', TIMESTAMP '2022-11-21 20:58:00.24', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 6, NULL, 'Registration Datetime', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-11-21T20:57:00Z","latest":"2022-11-21T20:57:00Z"}}}', 5, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(47, TIMESTAMP '2022-11-21 20:57:59.649', TIMESTAMP '2022-11-21 20:58:00.241', 'totalWalletBalance', 'type/Float', NULL, TRUE, NULL, TRUE, 3, 6, NULL, 'TotalWalletBalance', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":17,"nil%":0.0},"type":{"type/Number":{"min":1909.76354428,"q1":1911.27619129,"q3":1969.7829884406185,"max":2003.98009361,"sd":33.801130859971934,"avg":1945.5964083214283}}}', 5, 'FLOAT', NULL, NULL, 3, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(48, TIMESTAMP '2022-11-21 20:57:59.649', TIMESTAMP '2023-04-03 20:29:00.194938', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 6, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(49, TIMESTAMP '2022-11-21 20:57:59.65', TIMESTAMP '2022-11-21 20:58:00.242', 'day', 'type/DateTime', NULL, TRUE, NULL, TRUE, 2, 6, NULL, 'Day', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":28,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-10-24T00:00:00Z","latest":"2022-11-20T00:00:00Z"}}}', 5, 'DATETIME', NULL, NULL, 2, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(50, TIMESTAMP '2022-11-21 20:57:59.651', TIMESTAMP '2022-11-21 20:58:01.177', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 6, NULL, 'Account', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(51, TIMESTAMP '2022-11-21 20:57:59.668', TIMESTAMP '2022-11-21 20:58:00.282', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 7, NULL, 'Registration Datetime', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-11-21T20:57:45Z","latest":"2022-11-21T20:57:45Z"}}}', 5, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(52, TIMESTAMP '2022-11-21 20:57:59.669', TIMESTAMP '2023-04-03 20:29:00.211019', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 7, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE);   
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(53, TIMESTAMP '2022-11-21 20:57:59.67', TIMESTAMP '2022-11-21 20:58:00.283', 'totalUnrealizedProfit', 'type/Float', NULL, TRUE, NULL, TRUE, 3, 7, NULL, 'TotalUnrealizedProfit', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":0.0,"max":0.0,"sd":null,"avg":0.0}}}', 5, 'FLOAT', NULL, NULL, 3, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(54, TIMESTAMP '2022-11-21 20:57:59.67', TIMESTAMP '2022-11-21 20:58:01.191', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 7, NULL, 'Account', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(55, TIMESTAMP '2022-11-21 20:57:59.671', TIMESTAMP '2022-11-21 20:58:00.285', 'totalWalletBalance', 'type/Float', NULL, TRUE, NULL, TRUE, 2, 7, NULL, 'TotalWalletBalance', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":1911.24551471,"q1":1911.24551471,"q3":1911.24551471,"max":1911.24551471,"sd":null,"avg":1911.24551471}}}', 5, 'FLOAT', NULL, NULL, 2, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(56, TIMESTAMP '2022-11-21 20:57:59.692', TIMESTAMP '2022-11-21 20:58:00.343', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 8, NULL, 'Registration Datetime', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-11-21T20:57:45Z","latest":"2022-11-21T20:57:45Z"}}}', 5, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(57, TIMESTAMP '2022-11-21 20:57:59.693', TIMESTAMP '2022-11-21 20:58:01.199', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 6, 8, NULL, 'Account', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 6, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(58, TIMESTAMP '2022-11-21 20:57:59.694', TIMESTAMP '2022-11-21 20:58:00.346', 'unrealizedProfit', 'type/Float', NULL, TRUE, NULL, TRUE, 4, 8, NULL, 'UnrealizedProfit', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":0.0,"max":0.0,"sd":0.0,"avg":0.0}}}', 5, 'FLOAT', NULL, NULL, 4, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(59, TIMESTAMP '2022-11-21 20:57:59.694', TIMESTAMP '2023-04-03 20:29:00.229137', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 8, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(60, TIMESTAMP '2022-11-21 20:57:59.695', TIMESTAMP '2022-11-21 20:58:00.348', 'balance_id', 'type/Integer', 'type/FK', TRUE, NULL, TRUE, 5, 8, NULL, 'Balance ID', 'normal', 52, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0}}', 5, 'INTEGER', NULL, NULL, 5, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(61, TIMESTAMP '2022-11-21 20:57:59.696', TIMESTAMP '2022-11-21 20:58:00.35', 'walletBalance', 'type/Float', NULL, TRUE, NULL, TRUE, 3, 8, NULL, 'WalletBalance', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":3,"nil%":0.0},"type":{"type/Number":{"min":0.0,"q1":0.0,"q3":23.060629844679625,"max":1911.24551471,"sd":635.6914390856783,"avg":216.36657041222222}}}', 5, 'FLOAT', NULL, NULL, 3, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(62, TIMESTAMP '2022-11-21 20:57:59.697', TIMESTAMP '2022-11-21 20:58:01.203', 'asset', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 2, 8, NULL, 'Asset', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":9,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":3.2222222222222223}}}', 5, 'VARCHAR', 'auto-list', NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE);            
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(63, TIMESTAMP '2022-11-21 20:57:59.723', TIMESTAMP '2022-11-22 10:38:57.104', 'timeInForce', 'type/Text', NULL, TRUE, NULL, TRUE, 11, 9, NULL, 'TimeInForce', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":1.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":0.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 11, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(64, TIMESTAMP '2022-11-21 20:57:59.723', TIMESTAMP '2022-11-22 10:38:57.109', 'position_side', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 7, 9, NULL, 'Position Side', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":4.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 7, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(65, TIMESTAMP '2022-11-21 20:57:59.724', TIMESTAMP '2022-11-22 10:38:57.114', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 15, 9, NULL, 'Account', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":5.023529411764706}}}', 5, 'VARCHAR', 'auto-list', NULL, 15, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(66, TIMESTAMP '2022-11-21 20:57:59.725', TIMESTAMP '2023-04-03 20:29:00.263997', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 9, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(67, TIMESTAMP '2022-11-21 20:57:59.726', TIMESTAMP '2022-11-22 10:38:57.119', 'side', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 6, 9, NULL, 'Side', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":3.588235294117647}}}', 5, 'VARCHAR', 'auto-list', NULL, 6, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(68, TIMESTAMP '2022-11-21 20:57:59.726', TIMESTAMP '2022-11-22 10:38:57.122', 'order_id', 'type/Integer', NULL, TRUE, NULL, TRUE, 1, 9, NULL, 'Order ID', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":1.0},"type":{"type/Number":{"min":null,"q1":null,"q3":null,"max":null,"sd":null,"avg":null}}}', 5, 'INTEGER', 'auto-list', NULL, 1, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(69, TIMESTAMP '2022-11-21 20:57:59.727', TIMESTAMP '2022-11-22 10:38:57.127', 'type', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 3, 9, NULL, 'Type', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":5.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 3, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(70, TIMESTAMP '2022-11-21 20:57:59.727', TIMESTAMP '2022-11-22 10:38:57.131', 'symbol', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 9, NULL, 'Symbol', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":4,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.470588235294118}}}', 5, 'VARCHAR', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(71, TIMESTAMP '2022-11-21 20:57:59.728', TIMESTAMP '2022-11-22 10:38:57.134', 'callback_rate', 'type/Float', 'type/Share', TRUE, NULL, TRUE, 13, 9, NULL, 'Callback Rate', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":1.0},"type":{"type/Number":{"min":null,"q1":null,"q3":null,"max":null,"sd":null,"avg":null}}}', 5, 'FLOAT', NULL, NULL, 13, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE);   
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(72, TIMESTAMP '2022-11-21 20:57:59.729', TIMESTAMP '2022-11-22 10:38:56.868', 'quantity', 'type/Float', NULL, TRUE, NULL, TRUE, 5, 9, NULL, 'Quantity', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":50,"nil%":0.0},"type":{"type/Number":{"min":0.77,"q1":43.75,"q3":2579.0249999999996,"max":33061.0,"sd":7242.309855511577,"avg":3544.1436470588233}}}', 5, 'FLOAT', NULL, NULL, 5, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(73, TIMESTAMP '2022-11-21 20:57:59.729', TIMESTAMP '2022-11-22 10:38:56.87', 'price', 'type/Float', NULL, TRUE, NULL, TRUE, 9, 9, NULL, 'Price', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":83,"nil%":0.0},"type":{"type/Number":{"min":0.2083,"q1":0.3078484375,"q3":45.715999999999994,"max":269.95,"sd":109.45380601984267,"avg":62.30433294117648}}}', 5, 'FLOAT', NULL, NULL, 9, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(74, TIMESTAMP '2022-11-21 20:57:59.73', TIMESTAMP '2022-11-22 10:38:56.872', 'stop_price', 'type/Float', NULL, TRUE, NULL, TRUE, 10, 9, NULL, 'Stop Price', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":1.0},"type":{"type/Number":{"min":null,"q1":null,"q3":null,"max":null,"sd":null,"avg":null}}}', 5, 'FLOAT', NULL, NULL, 10, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(75, TIMESTAMP '2022-11-21 20:57:59.731', TIMESTAMP '2022-11-22 10:38:56.873', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 2, 9, NULL, 'Registration Datetime', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-11-22T10:38:26Z","latest":"2022-11-22T10:38:27Z"}}}', 5, 'DATETIME', NULL, NULL, 2, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(76, TIMESTAMP '2022-11-21 20:57:59.731', TIMESTAMP '2022-11-22 10:38:57.141', 'status', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 8, 9, NULL, 'Status', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":1.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":0.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 8, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(77, TIMESTAMP '2022-11-21 20:57:59.732', TIMESTAMP '2022-11-22 10:38:56.877', 'activation_price', 'type/Float', NULL, TRUE, NULL, TRUE, 12, 9, NULL, 'Activation Price', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":1.0},"type":{"type/Number":{"min":null,"q1":null,"q3":null,"max":null,"sd":null,"avg":null}}}', 5, 'FLOAT', NULL, NULL, 12, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(78, TIMESTAMP '2022-11-21 20:57:59.732', TIMESTAMP '2022-11-22 10:38:57.145', 'close_position', 'type/Boolean', 'type/Category', TRUE, NULL, TRUE, 14, 9, NULL, 'Close Position', 'normal', NULL, TIMESTAMP '2022-11-22 10:38:57.189', NULL, NULL, '{"global":{"distinct-count":1,"nil%":1.0}}', 5, 'BOOLEAN', 'auto-list', NULL, 14, 0, 'type/Boolean', NULL, NULL, FALSE, FALSE, FALSE),
(79, TIMESTAMP '2022-11-21 20:57:59.762', TIMESTAMP '2022-11-21 20:58:00.465', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 10, NULL, 'Registration Datetime', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-11-21T20:57:59Z","latest":"2022-11-21T20:57:59Z"}}}', 5, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(80, TIMESTAMP '2022-11-21 20:57:59.763', TIMESTAMP '2023-04-03 20:29:00.283481', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 10, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(81, TIMESTAMP '2022-11-21 20:57:59.763', TIMESTAMP '2022-11-21 20:58:01.213', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 10, NULL, 'Account', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE);  
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(82, TIMESTAMP '2022-11-21 20:57:59.764', TIMESTAMP '2022-11-21 20:58:01.216', 'symbol', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 2, 10, NULL, 'Symbol', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(83, TIMESTAMP '2022-11-21 20:57:59.765', TIMESTAMP '2022-11-21 20:58:00.468', 'price', 'type/Float', NULL, TRUE, NULL, TRUE, 3, 10, NULL, 'Price', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Number":{"min":15804.2,"q1":15804.2,"q3":15804.2,"max":15804.2,"sd":null,"avg":15804.2}}}', 5, 'FLOAT', NULL, NULL, 3, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(84, TIMESTAMP '2022-11-21 20:57:59.787', TIMESTAMP '2022-11-21 20:57:59.787', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 11, NULL, 'Registration Datetime', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(85, TIMESTAMP '2022-11-21 20:57:59.788', TIMESTAMP '2023-04-03 20:29:00.303045', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 11, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(86, TIMESTAMP '2022-11-21 20:57:59.789', TIMESTAMP '2022-11-22 15:46:16.995', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 11, NULL, 'Account', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', 'search', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(87, TIMESTAMP '2022-11-21 20:57:59.789', TIMESTAMP '2023-04-03 20:29:00.299209', 'symbol', 'type/Text', NULL, TRUE, NULL, TRUE, 2, 11, NULL, 'Symbol', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', NULL, NULL, 2, 0, 'type/Text', NULL, NULL, TRUE, FALSE, FALSE),
(88, TIMESTAMP '2022-11-21 20:57:59.79', TIMESTAMP '2022-11-21 20:57:59.79', 'last_trades_downloaded', 'type/DateTime', NULL, TRUE, NULL, TRUE, 3, 11, NULL, 'Last Trades Downloaded', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'DATETIME', NULL, NULL, 3, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(89, TIMESTAMP '2022-11-21 20:57:59.819', TIMESTAMP '2022-11-21 20:57:59.819', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 12, NULL, 'Registration Datetime', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(90, TIMESTAMP '2022-11-21 20:57:59.82', TIMESTAMP '2023-04-03 20:29:00.321848', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 12, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(91, TIMESTAMP '2022-11-21 20:57:59.821', TIMESTAMP '2022-11-22 15:45:39.931', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 12, NULL, 'Account', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', 'search', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(92, TIMESTAMP '2022-11-21 20:57:59.822', TIMESTAMP '2023-04-03 20:29:00.318116', 'symbol', 'type/Text', NULL, TRUE, NULL, TRUE, 2, 12, NULL, 'Symbol', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', NULL, NULL, 2, 0, 'type/Text', NULL, NULL, TRUE, FALSE, FALSE),
(93, TIMESTAMP '2022-11-21 20:57:59.824', TIMESTAMP '2022-11-21 20:57:59.824', 'last_checked_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 3, 12, NULL, 'Last Checked Datetime', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'DATETIME', NULL, NULL, 3, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(94, TIMESTAMP '2022-11-21 20:57:59.845', TIMESTAMP '2022-11-21 20:57:59.845', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 13, NULL, 'Registration Datetime', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE);         
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(95, TIMESTAMP '2022-11-21 20:57:59.846', TIMESTAMP '2022-11-21 20:57:59.846', 'price', 'type/Float', NULL, TRUE, NULL, TRUE, 7, 13, NULL, 'Price', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'FLOAT', NULL, NULL, 7, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(96, TIMESTAMP '2022-11-21 20:57:59.847', TIMESTAMP '2022-11-21 20:57:59.847', 'quantity', 'type/Float', NULL, TRUE, NULL, TRUE, 6, 13, NULL, 'Quantity', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'FLOAT', NULL, NULL, 6, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(97, TIMESTAMP '2022-11-21 20:57:59.848', TIMESTAMP '2023-04-03 20:29:00.350333', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 13, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(98, TIMESTAMP '2022-11-21 20:57:59.848', TIMESTAMP '2022-11-21 20:57:59.848', 'incomeType', 'type/Text', NULL, TRUE, NULL, TRUE, 4, 13, NULL, 'IncomeType', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', NULL, NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(99, TIMESTAMP '2022-11-21 20:57:59.849', TIMESTAMP '2023-04-03 20:29:00.355261', 'order_id', 'type/Integer', NULL, TRUE, NULL, TRUE, 2, 13, NULL, 'Order ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 2, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(100, TIMESTAMP '2022-11-21 20:57:59.849', TIMESTAMP '2022-11-21 20:57:59.849', 'side', 'type/Text', NULL, TRUE, NULL, TRUE, 8, 13, NULL, 'Side', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', NULL, NULL, 8, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(101, TIMESTAMP '2022-11-21 20:57:59.85', TIMESTAMP '2022-11-21 20:57:59.85', 'time', 'type/DateTime', NULL, TRUE, NULL, TRUE, 9, 13, NULL, 'Time', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'DATETIME', NULL, NULL, 9, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(102, TIMESTAMP '2022-11-21 20:57:59.85', TIMESTAMP '2022-11-21 20:57:59.85', 'asset', 'type/Text', NULL, TRUE, NULL, TRUE, 5, 13, NULL, 'Asset', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', NULL, NULL, 5, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(103, TIMESTAMP '2022-11-21 20:57:59.851', TIMESTAMP '2022-11-21 20:57:59.851', 'symbol', 'type/Text', NULL, TRUE, NULL, TRUE, 3, 13, NULL, 'Symbol', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', NULL, NULL, 3, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(104, TIMESTAMP '2022-11-21 20:57:59.852', TIMESTAMP '2022-11-22 15:46:09.721', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 11, 13, NULL, 'Account', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'VARCHAR', 'search', NULL, 11, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(105, TIMESTAMP '2022-11-21 20:57:59.852', TIMESTAMP '2022-11-21 20:57:59.852', 'timestamp', 'type/Integer', NULL, TRUE, NULL, TRUE, 10, 13, NULL, 'Timestamp', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 10, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(106, TIMESTAMP '2022-11-21 20:57:59.886', TIMESTAMP '2022-11-21 20:58:01.112', 'registration_datetime', 'type/DateTime', NULL, TRUE, NULL, TRUE, 1, 14, NULL, 'Registration Datetime', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-11-21T20:40:15Z","latest":"2022-11-21T20:41:16Z"}}}', 5, 'DATETIME', NULL, NULL, 1, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(107, TIMESTAMP '2022-11-21 20:57:59.887', TIMESTAMP '2022-11-21 20:58:01.23', 'asset', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 6, 14, NULL, 'Asset', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":4.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 6, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(108, TIMESTAMP '2022-11-21 20:57:59.888', TIMESTAMP '2022-11-21 20:58:01.117', 'timestamp', 'type/Integer', NULL, TRUE, NULL, TRUE, 8, 14, NULL, 'Timestamp', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1207,"nil%":0.0},"type":{"type/Number":{"min":1.666622686E12,"q1":1.6675225462538574E12,"q3":1.6678767947447412E12,"max":1.668978231E12,"sd":3.4223020577811253E8,"avg":1.6676853293954934E12}}}', 5, 'INTEGER', NULL, NULL, 8, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE);               
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(109, TIMESTAMP '2022-11-21 20:57:59.888', TIMESTAMP '2023-04-03 20:29:00.378066', 'transaction_id', 'type/Integer', NULL, TRUE, NULL, TRUE, 2, 14, NULL, 'Transaction ID', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1287,"nil%":0.0},"type":{"type/Number":{"min":1.22642351517E11,"q1":9.258150254154342E12,"q3":9.360069563769434E12,"max":6.4203051844140257E18,"sd":1.23971391858280986E18,"avg":2.49153903946527392E17}}}', 5, 'INTEGER', NULL, NULL, 2, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(110, TIMESTAMP '2022-11-21 20:57:59.889', TIMESTAMP '2023-04-03 20:29:00.382343', 'id', 'type/Integer', 'type/PK', TRUE, NULL, TRUE, 0, 14, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'INTEGER', NULL, NULL, 0, 0, 'type/Integer', NULL, NULL, TRUE, FALSE, FALSE),
(111, TIMESTAMP '2022-11-21 20:57:59.889', TIMESTAMP '2022-11-21 20:58:01.235', 'incomeType', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 14, NULL, 'IncomeType', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":4,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":10.794094794094795}}}', 5, 'VARCHAR', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(112, TIMESTAMP '2022-11-21 20:57:59.89', TIMESTAMP '2022-11-21 20:58:01.238', 'income', 'type/Float', 'type/Income', TRUE, NULL, TRUE, 5, 14, NULL, 'Income', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1038,"nil%":0.0},"type":{"type/Number":{"min":-6.912,"q1":-0.009825551940982665,"q3":0.02093636347259084,"max":1.06270999,"sd":0.47284720206290065,"avg":-0.044365727008547}}}', 5, 'FLOAT', NULL, NULL, 5, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(113, TIMESTAMP '2022-11-21 20:57:59.891', TIMESTAMP '2022-11-21 20:58:01.129', 'time', 'type/DateTime', NULL, TRUE, NULL, TRUE, 7, 14, NULL, 'Time', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1207,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-10-24T14:44:46Z","latest":"2022-11-20T21:03:51Z"}}}', 5, 'DATETIME', NULL, NULL, 7, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(114, TIMESTAMP '2022-11-21 20:57:59.892', TIMESTAMP '2022-11-21 20:58:01.243', 'account', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 9, 14, NULL, 'Account', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":1,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":7.0}}}', 5, 'VARCHAR', 'auto-list', NULL, 9, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(115, TIMESTAMP '2022-11-21 20:57:59.892', TIMESTAMP '2022-11-21 20:58:01.247', 'symbol', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 3, 14, NULL, 'Symbol', 'normal', NULL, TIMESTAMP '2022-11-21 20:58:01.29', NULL, NULL, '{"global":{"distinct-count":8,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":8.194250194250195}}}', 5, 'VARCHAR', 'auto-list', NULL, 3, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(129, TIMESTAMP '2023-04-03 20:41:00.404228', TIMESTAMP '2023-04-03 20:41:00.404228', 'ID', 'type/BigInteger', 'type/PK', TRUE, NULL, TRUE, 0, 33, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, TRUE, FALSE, FALSE),
(130, TIMESTAMP '2023-04-03 20:41:00.404228', TIMESTAMP '2023-04-03 20:41:04.547722', 'EVENT', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 2, 33, NULL, 'Event', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":11.3906}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(131, TIMESTAMP '2023-04-03 20:41:00.404228', TIMESTAMP '2023-04-03 20:41:02.857821', 'ACCOUNT_ID', 'type/BigInteger', 'type/FK', TRUE, NULL, TRUE, 1, 33, NULL, 'Account ID', 'normal', 150, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":589,"nil%":0.0}}', 5, 'BIGINT', NULL, NULL, 1, 0, 'type/BigInteger', NULL, NULL, FALSE, FALSE, FALSE);  
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(132, TIMESTAMP '2023-04-03 20:41:00.404228', TIMESTAMP '2023-04-03 20:41:02.86897', 'TIMESTAMP', 'type/DateTime', NULL, TRUE, NULL, TRUE, 3, 33, NULL, 'Timestamp', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":8576,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2022-03-15T00:18:25Z","latest":"2022-04-11T20:24:02Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 3, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(133, TIMESTAMP '2023-04-03 20:41:00.404228', TIMESTAMP '2023-04-03 20:41:04.553788', 'BUTTON_LABEL', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 5, 33, NULL, 'Button Label', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":6,"nil%":0.8698},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":1.0552}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 5, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(134, TIMESTAMP '2023-04-03 20:41:00.404228', TIMESTAMP '2023-04-03 20:41:04.61012', 'PAGE_URL', 'type/Text', 'type/URL', TRUE, NULL, TRUE, 4, 33, NULL, 'Page URL', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":6,"nil%":0.1302},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":22.2674}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(135, TIMESTAMP '2023-04-03 20:41:00.426202', TIMESTAMP '2023-04-03 20:41:04.62738', 'RATING', 'type/Integer', 'type/Score', TRUE, NULL, TRUE, 4, 34, NULL, 'Rating', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":5,"nil%":0.0},"type":{"type/Number":{"min":1.0,"q1":2.7545289729206877,"q3":4.004191340512663,"max":5.0,"sd":0.8137255616667736,"avg":3.3629283489096573}}}', 5, 'SMALLINT', 'auto-list', NULL, 4, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(136, TIMESTAMP '2023-04-03 20:41:00.426202', TIMESTAMP '2023-04-03 20:41:00.426202', 'ID', 'type/BigInteger', 'type/PK', TRUE, NULL, TRUE, 0, 34, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, TRUE, FALSE, FALSE),
(137, TIMESTAMP '2023-04-03 20:41:00.426202', TIMESTAMP '2023-04-03 20:41:04.650574', 'EMAIL', 'type/Text', 'type/Email', TRUE, NULL, TRUE, 2, 34, NULL, 'Email', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":642,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":1.0,"percent-state":0.0,"average-length":28.327102803738317}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(138, TIMESTAMP '2023-04-03 20:41:00.426202', TIMESTAMP '2023-04-04 07:00:01.069663', 'BODY', 'type/Text', NULL, TRUE, NULL, FALSE, 6, 34, NULL, 'Body', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":642,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":438.15264797507785}}}', 5, 'CHARACTER LARGE OBJECT', NULL, NULL, 6, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(139, TIMESTAMP '2023-04-03 20:41:00.426202', TIMESTAMP '2023-04-03 20:41:03.300369', 'ACCOUNT_ID', 'type/BigInteger', 'type/FK', TRUE, NULL, TRUE, 1, 34, NULL, 'Account ID', 'normal', 150, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":642,"nil%":0.0}}', 5, 'BIGINT', NULL, NULL, 1, 0, 'type/BigInteger', NULL, NULL, FALSE, FALSE, FALSE),
(140, TIMESTAMP '2023-04-03 20:41:00.426202', TIMESTAMP '2023-04-03 20:41:03.303', 'DATE_RECEIVED', 'type/DateTime', NULL, TRUE, NULL, TRUE, 3, 34, NULL, 'Date Received', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":576,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2020-11-20T00:00:00Z","latest":"2031-12-01T00:00:00Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 3, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE);           
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(141, TIMESTAMP '2023-04-03 20:41:00.426202', TIMESTAMP '2023-04-03 20:41:04.671569', 'RATING_MAPPED', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 5, 34, NULL, 'Rating Mapped', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":5,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":6.453271028037383}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 5, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(142, TIMESTAMP '2023-04-03 20:41:00.452231', TIMESTAMP '2023-04-03 20:41:00.452231', 'ID', 'type/BigInteger', 'type/PK', TRUE, NULL, TRUE, 0, 35, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, TRUE, FALSE, FALSE),
(143, TIMESTAMP '2023-04-03 20:41:00.452231', TIMESTAMP '2023-04-03 20:41:03.849662', 'PAYMENT', 'type/Float', NULL, TRUE, NULL, TRUE, 2, 35, NULL, 'Payment', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":707,"nil%":0.0},"type":{"type/Number":{"min":13.7,"q1":233.1870107122195,"q3":400.5965814842149,"max":33714.6,"sd":763.7961603932441,"avg":519.4153400000004}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 2, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(144, TIMESTAMP '2023-04-03 20:41:00.452231', TIMESTAMP '2023-04-03 20:41:03.852774', 'ACCOUNT_ID', 'type/BigInteger', 'type/FK', TRUE, NULL, TRUE, 1, 35, NULL, 'Account ID', 'normal', 150, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":1449,"nil%":0.0}}', 5, 'BIGINT', NULL, NULL, 1, 0, 'type/BigInteger', NULL, NULL, FALSE, FALSE, FALSE),
(145, TIMESTAMP '2023-04-03 20:41:00.452231', TIMESTAMP '2023-04-03 20:41:04.680588', 'EXPECTED_INVOICE', 'type/Boolean', 'type/Category', TRUE, NULL, TRUE, 3, 35, NULL, 'Expected Invoice', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0}}', 5, 'BOOLEAN', 'auto-list', NULL, 3, 0, 'type/Boolean', NULL, NULL, FALSE, FALSE, FALSE),
(146, TIMESTAMP '2023-04-03 20:41:00.452231', TIMESTAMP '2023-04-03 20:41:04.68531', 'PLAN', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 35, NULL, 'Plan', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":3,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":5.2931}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(147, TIMESTAMP '2023-04-03 20:41:00.452231', TIMESTAMP '2023-04-03 20:41:03.861153', 'DATE_RECEIVED', 'type/DateTime', NULL, TRUE, NULL, TRUE, 5, 35, NULL, 'Date Received', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":714,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2020-09-30T00:00:00Z","latest":"2027-05-02T00:00:00Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 5, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(148, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.699722', 'ACTIVE_SUBSCRIPTION', 'type/Boolean', 'type/Category', TRUE, NULL, TRUE, 11, 36, NULL, 'Active Subscription', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0}}', 5, 'BOOLEAN', 'auto-list', NULL, 11, 0, 'type/Boolean', NULL, NULL, FALSE, FALSE, FALSE),
(149, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.70483', 'TRIAL_CONVERTED', 'type/Boolean', 'type/Category', TRUE, NULL, TRUE, 10, 36, NULL, 'Trial Converted', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0}}', 5, 'BOOLEAN', 'auto-list', NULL, 10, 0, 'type/Boolean', NULL, NULL, FALSE, FALSE, FALSE),
(150, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:00.477039', 'ID', 'type/BigInteger', 'type/PK', TRUE, NULL, TRUE, 0, 36, NULL, 'ID', 'normal', NULL, NULL, NULL, NULL, NULL, 0, 'BIGINT', NULL, NULL, 0, 0, 'type/BigInteger', NULL, NULL, TRUE, FALSE, FALSE);         
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(151, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.708756', 'LEGACY_PLAN', 'type/Boolean', 'type/Category', TRUE, NULL, TRUE, 12, 36, NULL, 'Legacy Plan', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2,"nil%":0.0}}', 5, 'BOOLEAN', 'auto-list', NULL, 12, 0, 'type/Boolean', NULL, NULL, FALSE, FALSE, FALSE),
(152, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.713485', 'COUNTRY', 'type/Text', 'type/Country', TRUE, NULL, TRUE, 15, 36, NULL, 'Country', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":134,"nil%":8.016032064128256E-4},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.1130260521042084,"average-length":1.9983967935871743}}}', 5, 'CHARACTER', 'auto-list', NULL, 15, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(153, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.479241', 'TRIAL_ENDS_AT', 'type/DateTime', NULL, TRUE, NULL, TRUE, 8, 36, NULL, 'Trial Ends At', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":1712,"nil%":0.001202404809619238},"type":{"type/DateTime":{"earliest":"2020-09-30T12:00:00Z","latest":"2031-10-25T12:00:00Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 8, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(154, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.720385', 'SEATS', 'type/Integer', NULL, TRUE, NULL, TRUE, 6, 36, NULL, 'Seats', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":102,"nil%":0.0},"type":{"type/Number":{"min":1.0,"q1":2.4309856865966593,"q3":10.553778422458695,"max":1325.0,"sd":51.198301031505444,"avg":16.21763527054108}}}', 5, 'INTEGER', 'auto-list', NULL, 6, 0, 'type/Integer', NULL, NULL, FALSE, FALSE, FALSE),
(155, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.724107', 'CANCELED_AT', 'type/DateTime', 'type/CancelationTimestamp', TRUE, NULL, TRUE, 9, 36, NULL, 'Canceled At', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2021,"nil%":0.1859719438877756},"type":{"type/DateTime":{"earliest":"2020-10-01T15:43:40Z","latest":"2032-06-03T14:01:15Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 9, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(156, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.727922', 'LAST_NAME', 'type/Text', 'type/Name', TRUE, NULL, TRUE, 3, 36, NULL, 'Last Name', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":473,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":6.536673346693386}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 3, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(157, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.732841', 'FIRST_NAME', 'type/Text', 'type/Name', TRUE, NULL, TRUE, 2, 36, NULL, 'First Name', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":1687,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.001603206412825651,"average-length":5.997595190380761}}}', 5, 'CHARACTER VARYING', NULL, NULL, 2, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(158, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.737869', 'PLAN', 'type/Text', 'type/Category', TRUE, NULL, TRUE, 4, 36, NULL, 'Plan', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":3,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":5.1062124248497}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 4, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(159, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.741815', 'EMAIL', 'type/Text', 'type/Email', TRUE, NULL, TRUE, 1, 36, NULL, 'Email', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2494,"nil%":0.0},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":1.0,"percent-state":0.0,"average-length":28.185971943887775}}}', 5, 'CHARACTER VARYING', NULL, NULL, 1, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE);      
INSERT INTO "PUBLIC"."METABASE_FIELD" VALUES
(160, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.746136', 'CREATED_AT', 'type/DateTime', 'type/CreationTimestamp', TRUE, NULL, TRUE, 7, 36, NULL, 'Created At', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2495,"nil%":0.0},"type":{"type/DateTime":{"earliest":"2020-09-15T16:11:50Z","latest":"2031-10-10T19:14:48Z"}}}', 5, 'TIMESTAMP', NULL, NULL, 7, 0, 'type/DateTime', NULL, NULL, FALSE, FALSE, FALSE),
(161, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.751151', 'SOURCE', 'type/Text', 'type/Source', TRUE, NULL, TRUE, 5, 36, NULL, 'Source', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":5,"nil%":0.3346693386773547},"type":{"type/Text":{"percent-json":0.0,"percent-url":0.0,"percent-email":0.0,"percent-state":0.0,"average-length":4.4705410821643286}}}', 5, 'CHARACTER VARYING', 'auto-list', NULL, 5, 0, 'type/Text', NULL, NULL, FALSE, FALSE, FALSE),
(162, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.755043', 'LATITUDE', 'type/Float', 'type/Latitude', TRUE, NULL, TRUE, 13, 36, NULL, 'Latitude', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2472,"nil%":4.008016032064128E-4},"type":{"type/Number":{"min":-48.75,"q1":19.430679334308675,"q3":47.24585743676113,"max":69.23111,"sd":23.492041679980137,"avg":31.35760681046913}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 13, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE),
(163, TIMESTAMP '2023-04-03 20:41:00.477039', TIMESTAMP '2023-04-03 20:41:04.75873', 'LONGITUDE', 'type/Float', 'type/Longitude', TRUE, NULL, TRUE, 14, 36, NULL, 'Longitude', 'normal', NULL, TIMESTAMP '2023-04-03 20:41:04.842295', NULL, NULL, '{"global":{"distinct-count":2484,"nil%":4.008016032064128E-4},"type":{"type/Number":{"min":-175.06667,"q1":-55.495929410727236,"q3":28.627359769389155,"max":176.21667,"sd":68.51011002740533,"avg":2.6042336031796345}}}', 5, 'DOUBLE PRECISION', NULL, NULL, 14, 0, 'type/Float', NULL, NULL, FALSE, FALSE, FALSE);       
CREATE INDEX "PUBLIC"."IDX_FIELD_TABLE_ID" ON "PUBLIC"."METABASE_FIELD"("TABLE_ID" NULLS FIRST);               
CREATE INDEX "PUBLIC"."IDX_FIELD_PARENT_ID" ON "PUBLIC"."METABASE_FIELD"("PARENT_ID" NULLS FIRST);             
CREATE CACHED TABLE "PUBLIC"."DASHBOARD_TAB" COMMENT 'Join table connecting dashboard to dashboardcards'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
    "DASHBOARD_ID" INTEGER COMMENT 'The dashboard that a tab is on' NOT NULL,
    "NAME" CHARACTER LARGE OBJECT COMMENT 'Displayed name of the tab' NOT NULL,
    "POSITION" INTEGER COMMENT 'Position of the tab with respect to others tabs in dashboard' NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.' NOT NULL,
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp at which the tab was created' NOT NULL,
    "UPDATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'The timestamp at which the tab was last updated' NOT NULL
);      
ALTER TABLE "PUBLIC"."DASHBOARD_TAB" ADD CONSTRAINT "PUBLIC"."PK_DASHBOARD_TAB" PRIMARY KEY("ID");             
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.DASHBOARD_TAB;            
CREATE CACHED TABLE "PUBLIC"."REPORT_DASHBOARDCARD"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 97 RESTART WITH 103) DEFAULT ON NULL NOT NULL,
    "CREATED_AT" TIMESTAMP DEFAULT LOCALTIMESTAMP NOT NULL,
    "UPDATED_AT" TIMESTAMP DEFAULT LOCALTIMESTAMP NOT NULL,
    "SIZE_X" INTEGER DEFAULT NULL NOT NULL,
    "SIZE_Y" INTEGER DEFAULT NULL NOT NULL,
    "ROW" INTEGER DEFAULT NULL NOT NULL,
    "COL" INTEGER DEFAULT NULL NOT NULL,
    "CARD_ID" INTEGER,
    "DASHBOARD_ID" INTEGER NOT NULL,
    "PARAMETER_MAPPINGS" CHARACTER LARGE OBJECT NOT NULL,
    "VISUALIZATION_SETTINGS" CHARACTER LARGE OBJECT NOT NULL,
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.',
    "ACTION_ID" INTEGER COMMENT 'The related action',
    "DASHBOARD_TAB_ID" INTEGER COMMENT 'The referenced tab id that dashcard is on, it''s nullable for dashboard with no tab'
);   
ALTER TABLE "PUBLIC"."REPORT_DASHBOARDCARD" ADD CONSTRAINT "PUBLIC"."PK_REPORT_DASHBOARDCARD" PRIMARY KEY("ID");               
-- 14 +/- SELECT COUNT(*) FROM PUBLIC.REPORT_DASHBOARDCARD;    
INSERT INTO "PUBLIC"."REPORT_DASHBOARDCARD" VALUES
(33, TIMESTAMP '2022-11-22 08:14:36.872', TIMESTAMP '2023-09-04 19:58:11.449676', 5, 3, 0, 0, 33, 1, '[{"parameter_id":"26dff5a5","card_id":33,"target":["dimension",["field",54,null]]}]', '{"column_settings":{"[\"name\",\"sum\"]":{"number_style":"currency"}}}', NULL, NULL, NULL),
(35, TIMESTAMP '2022-11-22 08:21:54.203', TIMESTAMP '2023-04-16 19:39:14.221508', 5, 3, 7, 0, 35, 1, '[{"parameter_id":"26dff5a5","card_id":35,"target":["dimension",["field",54,null]]}]', '{}', NULL, NULL, NULL),
(37, TIMESTAMP '2022-11-22 08:43:02.877', TIMESTAMP '2023-09-04 19:58:11.468932', 8, 5, 0, 5, 37, 1, '[{"parameter_id":"26dff5a5","card_id":37,"target":["variable",["template-tag","Account"]]},{"parameter_id":"d6e37bc7","card_id":37,"target":["variable",["template-tag","Days"]]}]', '{}', NULL, NULL, NULL),
(38, TIMESTAMP '2022-11-22 08:47:38.304', TIMESTAMP '2023-07-20 16:39:24.820764', 12, 5, 13, 0, 38, 1, '[{"parameter_id":"26dff5a5","card_id":38,"target":["variable",["template-tag","Account"]]},{"parameter_id":"d6e37bc7","card_id":38,"target":["variable",["template-tag","Days"]]}]', '{}', NULL, NULL, NULL),
(40, TIMESTAMP '2022-11-22 09:21:08.648', TIMESTAMP '2023-04-03 20:18:22.652015', 12, 4, 18, 0, 40, 1, '[{"parameter_id":"26dff5a5","card_id":40,"target":["dimension",["field",114,null]]}]', '{}', NULL, NULL, NULL),
(41, TIMESTAMP '2022-11-22 09:40:32.344', TIMESTAMP '2023-04-03 20:18:22.655153', 11, 5, 0, 13, 41, 1, '[{"parameter_id":"26dff5a5","card_id":41,"target":["dimension",["field",114,null]]}]', '{}', NULL, NULL, NULL),
(42, TIMESTAMP '2022-11-22 09:45:53.146', TIMESTAMP '2023-04-03 20:18:22.658304', 12, 5, 13, 12, 42, 1, '[{"parameter_id":"26dff5a5","card_id":42,"target":["dimension",["field",114,null]]}]', '{}', NULL, NULL, NULL),
(43, TIMESTAMP '2022-11-22 09:52:27.905', TIMESTAMP '2023-06-21 17:02:40.995039', 5, 3, 21, 19, 43, 1, '[{"parameter_id":"26dff5a5","card_id":43,"target":["dimension",["field",50,null]]}]', '{}', NULL, NULL, NULL),
(44, TIMESTAMP '2022-11-22 09:55:31.193', TIMESTAMP '2023-04-03 20:18:22.665029', 12, 3, 18, 12, 44, 1, '[{"parameter_id":"26dff5a5","card_id":44,"target":["variable",["template-tag","Account"]]}]', '{}', NULL, NULL, NULL),
(65, TIMESTAMP '2022-11-22 13:50:07.12', TIMESTAMP '2022-11-22 18:58:12.184', 5, 4, 3, 0, 65, 1, '[{"parameter_id":"26dff5a5","card_id":65,"target":["variable",["template-tag","Account"]]}]', '{}', 'gBN5ZnwTu-KcAsCw8RJfH', NULL, NULL),
(98, TIMESTAMP '2023-05-02 19:12:06.162305', TIMESTAMP '2023-09-04 19:58:11.480298', 5, 3, 10, 0, 98, 1, '[{"parameter_id":"26dff5a5","card_id":98,"target":["variable",["template-tag","Account"]]}]', '{"graph.y_axis.title_text":"ADG (%)","graph.show_values":true,"waterfall.total_color":"#227FD2","table.cell_column":"AVG(adg)","graph.x_axis.title_text":"Date","graph.label_value_frequency":"fit","graph.metrics":["sum(adg)"],"graph.label_value_formatting":"auto","table.pivot_column":"time","column_settings":{"[\"name\",\"%\"]":{"number_style":"percent"},"[\"name\",\"AVG(aadg)/100\"]":{"number_style":"percent","decimals":3},"[\"name\",\"AVG(aadg)\"]":{"prefix":"","suffix":" %"}},"series_settings":{"adg":{"title":"ADG","line.missing":"zero"},"AVG(adg)":{"color":"#F7C41F","line.missing":"zero"}},"graph.dimensions":["date"]}', 'ppbcmflF1HTCKfrqjiUaF', NULL, NULL),
(99, TIMESTAMP '2023-05-02 23:05:42.192588', TIMESTAMP '2023-05-02 23:18:25.772105', 9, 8, 5, 15, 100, 1, '[{"parameter_id":"26dff5a5","card_id":100,"target":["variable",["template-tag","Account"]]}]', '{}', 'w23gU-LolQHSzh8uJYa2F', NULL, NULL),
(100, TIMESTAMP '2023-05-02 23:05:42.193727', TIMESTAMP '2023-05-02 23:18:25.773922', 10, 8, 5, 5, 99, 1, '[{"parameter_id":"26dff5a5","card_id":99,"target":["variable",["template-tag","Account"]]}]', '{}', 'c5M1r9iZ8sT9fCi97s_pj', NULL, NULL),
(102, TIMESTAMP '2023-07-02 14:26:07.874522', TIMESTAMP '2023-07-02 14:41:48.760091', 12, 4, 22, 0, 102, 1, '[{"parameter_id":"26dff5a5","card_id":102,"target":["dimension",["field",114,null]]}]', '{}', 'qWzSYXSLGv3w8obIhOIT4', NULL, NULL);       
CREATE INDEX "PUBLIC"."IDX_DASHBOARDCARD_CARD_ID" ON "PUBLIC"."REPORT_DASHBOARDCARD"("CARD_ID" NULLS FIRST);   
CREATE INDEX "PUBLIC"."IDX_DASHBOARDCARD_DASHBOARD_ID" ON "PUBLIC"."REPORT_DASHBOARDCARD"("DASHBOARD_ID" NULLS FIRST);         
CREATE CACHED TABLE "PUBLIC"."METABASE_TABLE"(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33 RESTART WITH 37) DEFAULT ON NULL SELECTIVITY 100 NOT NULL,
    "CREATED_AT" TIMESTAMP SELECTIVITY 100 NOT NULL,
    "UPDATED_AT" TIMESTAMP SELECTIVITY 100 NOT NULL,
    "NAME" CHARACTER VARYING(256) NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT,
    "ENTITY_TYPE" CHARACTER VARYING(254) SELECTIVITY 27,
    "ACTIVE" BOOLEAN SELECTIVITY 5 NOT NULL,
    "DB_ID" INTEGER SELECTIVITY 11 NOT NULL,
    "DISPLAY_NAME" CHARACTER VARYING(256),
    "VISIBILITY_TYPE" CHARACTER VARYING(254) SELECTIVITY 5,
    "SCHEMA" CHARACTER VARYING(254) SELECTIVITY 11,
    "POINTS_OF_INTEREST" CHARACTER LARGE OBJECT,
    "CAVEATS" CHARACTER LARGE OBJECT,
    "SHOW_IN_GETTING_STARTED" BOOLEAN DEFAULT FALSE SELECTIVITY 5 NOT NULL,
    "FIELD_ORDER" CHARACTER VARYING(254) DEFAULT 'database' SELECTIVITY 5 NOT NULL,
    "INITIAL_SYNC_STATUS" CHARACTER VARYING(32) DEFAULT 'complete' SELECTIVITY 5 COMMENT 'String indicating whether a table has completed its initial sync and is ready to use' NOT NULL,
    "IS_UPLOAD" BOOLEAN DEFAULT FALSE COMMENT 'Was the table created from user-uploaded (i.e., from a CSV) data?' NOT NULL
);         
ALTER TABLE "PUBLIC"."METABASE_TABLE" ADD CONSTRAINT "PUBLIC"."PK_METABASE_TABLE" PRIMARY KEY("ID");           
-- 18 +/- SELECT COUNT(*) FROM PUBLIC.METABASE_TABLE;          
INSERT INTO "PUBLIC"."METABASE_TABLE" VALUES
(1, TIMESTAMP '2022-11-21 20:55:29.829', TIMESTAMP '2023-10-27 23:41:21.477721', 'PRODUCTS', 'Includes a catalog of all the products ever sold by the famed Sample Company.', 'entity/ProductTable', TRUE, 1, 'Products', NULL, 'PUBLIC', 'Is it? You tell us!', 'The rating column is an integer from 1-5 where 1 is dreadful and 5 is the best thing ever.', FALSE, 'database', 'complete', FALSE),
(2, TIMESTAMP '2022-11-21 20:55:29.839', TIMESTAMP '2023-10-27 23:41:21.483321', 'ORDERS', 'Confirmed Sample Company orders for a product, from a user.', 'entity/TransactionTable', TRUE, 1, 'Orders', NULL, 'PUBLIC', 'Is it? You tell us!', 'You can join this on the Products and Orders table using the ID fields. Discount is left null if not applicable.', FALSE, 'database', 'complete', FALSE),
(3, TIMESTAMP '2022-11-21 20:55:29.845', TIMESTAMP '2023-10-27 23:41:21.488624', 'PEOPLE', 'Information on the user accounts registered with Sample Company.', 'entity/UserTable', TRUE, 1, 'People', NULL, 'PUBLIC', 'Is it? You tell us!', 'Note that employees and customer support staff will have accounts.', FALSE, 'database', 'complete', FALSE),
(4, TIMESTAMP '2022-11-21 20:55:29.855', TIMESTAMP '2023-10-27 23:41:21.493819', 'REVIEWS', 'Reviews that Sample Company customers have left on our products.', 'entity/GenericTable', TRUE, 1, 'Reviews', NULL, 'PUBLIC', 'Is it? You tell us!', 'These reviews aren''t tied to orders so it is possible people have reviewed products they did not purchase from us.', FALSE, 'database', 'complete', FALSE),
(5, TIMESTAMP '2022-11-21 20:57:59.531', TIMESTAMP '2022-11-21 20:58:01.253', 'POSITION', NULL, 'entity/GenericTable', TRUE, 2, 'Position', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(6, TIMESTAMP '2022-11-21 20:57:59.536', TIMESTAMP '2022-11-21 20:58:01.258', 'DAILY_BALANCE', NULL, 'entity/GenericTable', TRUE, 2, 'Daily Balance', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(7, TIMESTAMP '2022-11-21 20:57:59.542', TIMESTAMP '2022-11-21 20:58:01.262', 'BALANCE', NULL, 'entity/GenericTable', TRUE, 2, 'Balance', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(8, TIMESTAMP '2022-11-21 20:57:59.548', TIMESTAMP '2022-11-21 20:58:01.265', 'ASSET_BALANCE', NULL, 'entity/GenericTable', TRUE, 2, 'Asset Balance', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(9, TIMESTAMP '2022-11-21 20:57:59.552', TIMESTAMP '2022-11-21 20:58:01.268', 'ORDERS', NULL, 'entity/TransactionTable', TRUE, 2, 'Orders', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(10, TIMESTAMP '2022-11-21 20:57:59.557', TIMESTAMP '2022-11-21 20:58:01.27', 'PRICE', NULL, 'entity/GenericTable', TRUE, 2, 'Price', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(11, TIMESTAMP '2022-11-21 20:57:59.561', TIMESTAMP '2022-11-21 20:58:01.273', 'TRADED_SYMBOL', NULL, 'entity/GenericTable', TRUE, 2, 'Traded Symbol', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(12, TIMESTAMP '2022-11-21 20:57:59.564', TIMESTAMP '2022-11-21 20:58:01.276', 'CHECKED_SYMBOL', NULL, 'entity/GenericTable', TRUE, 2, 'Checked Symbol', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(13, TIMESTAMP '2022-11-21 20:57:59.568', TIMESTAMP '2022-11-21 20:58:01.279', 'Trade', NULL, 'entity/GenericTable', TRUE, 2, 'Trade', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(14, TIMESTAMP '2022-11-21 20:57:59.572', TIMESTAMP '2022-11-21 20:58:01.282', 'INCOME', NULL, 'entity/GenericTable', TRUE, 2, 'Income', NULL, NULL, NULL, NULL, FALSE, 'database', 'complete', FALSE),
(33, TIMESTAMP '2023-04-03 20:41:00.155533', TIMESTAMP '2023-10-27 23:41:21.54224', 'ANALYTIC_EVENTS', U&'Piespace does some anonymous analytics tracking on how users interact with their platform. They\2019ve only had time to implement a few events, but you know how it is. Pies come first.', 'entity/EventTable', TRUE, 1, 'Analytic Events', NULL, 'PUBLIC', U&'Is it? We\2019ll let you be the judge of that.', 'Piespace has cracked time travel, so keep in mind that some events may have already happened in the future.', FALSE, 'database', 'complete', FALSE);               
INSERT INTO "PUBLIC"."METABASE_TABLE" VALUES
(34, TIMESTAMP '2023-04-03 20:41:00.166237', TIMESTAMP '2023-10-27 23:41:21.558582', 'FEEDBACK', 'With each order of pies sent out, Piespace includes a place for customers to submit feedback and review their order.', 'entity/GenericTable', TRUE, 1, 'Feedback', NULL, 'PUBLIC', U&'Is it? We\2019ll let you be the judge of that.', U&'Not every account feels inclined to submit feedback. That\2019s cool. There\2019s still quite a few responses here.', FALSE, 'database', 'complete', FALSE),
(35, TIMESTAMP '2023-04-03 20:41:00.1729', TIMESTAMP '2023-10-27 23:41:21.520357', 'INVOICES', U&'Confirmed payments from Piespace\2019s customers. Most accounts pay for their pie subscription on a monthly basis.', 'entity/GenericTable', TRUE, 1, 'Invoices', NULL, 'PUBLIC', U&'Is it? We\2019ll let you be the judge of that.', U&'You can group by \201cAccount ID\201d to see all the payments from an account and unveil information like total amount paid to date.', FALSE, 'database', 'complete', FALSE),
(36, TIMESTAMP '2023-04-03 20:41:00.179287', TIMESTAMP '2023-10-27 23:41:21.525782', 'ACCOUNTS', 'Information on customer accounts registered with Piespace. Each account represents a new organization signing up for on-demand pies.', 'entity/UserTable', TRUE, 1, 'Accounts', NULL, 'PUBLIC', U&'Is it? We\2019ll let you be the judge of that.', U&'Piespace\2019s business operates with a two week trial period. If you see that \201cCanceled At\201d is null then that account is still happily paying for their pies.', FALSE, 'database', 'complete', FALSE);         
CREATE INDEX "PUBLIC"."IDX_TABLE_DB_ID" ON "PUBLIC"."METABASE_TABLE"("DB_ID" NULLS FIRST);     
CREATE INDEX "PUBLIC"."IDX_METABASE_TABLE_SHOW_IN_GETTING_STARTED" ON "PUBLIC"."METABASE_TABLE"("SHOW_IN_GETTING_STARTED" NULLS FIRST);        
CREATE INDEX "PUBLIC"."IDX_METABASE_TABLE_DB_ID_SCHEMA" ON "PUBLIC"."METABASE_TABLE"("DB_ID" NULLS FIRST, "SCHEMA" NULLS FIRST);               
CREATE CACHED TABLE "PUBLIC"."CONNECTION_IMPERSONATIONS" COMMENT 'Table for holding connection impersonation policies'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL,
    "DB_ID" INTEGER COMMENT 'ID of the database this connection impersonation policy affects' NOT NULL,
    "GROUP_ID" INTEGER COMMENT 'ID of the permissions group this connection impersonation policy affects' NOT NULL,
    "ATTRIBUTE" CHARACTER LARGE OBJECT COMMENT 'User attribute associated with the database role to use for this connection impersonation policy'
);             
ALTER TABLE "PUBLIC"."CONNECTION_IMPERSONATIONS" ADD CONSTRAINT "PUBLIC"."PK_CONNECTION_IMPERSONATIONS" PRIMARY KEY("ID");     
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.CONNECTION_IMPERSONATIONS;
CREATE INDEX "PUBLIC"."IDX_CONN_IMPERSONATIONS_DB_ID" ON "PUBLIC"."CONNECTION_IMPERSONATIONS"("DB_ID" NULLS FIRST);            
CREATE INDEX "PUBLIC"."IDX_CONN_IMPERSONATIONS_GROUP_ID" ON "PUBLIC"."CONNECTION_IMPERSONATIONS"("GROUP_ID" NULLS FIRST);      
CREATE CACHED TABLE "PUBLIC"."COLLECTION" COMMENT 'Collections are an optional way to organize Cards and handle permissions for them.'(
    "ID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) DEFAULT ON NULL NOT NULL,
    "NAME" CHARACTER LARGE OBJECT COMMENT 'The user-facing name of this Collection.' NOT NULL,
    "DESCRIPTION" CHARACTER LARGE OBJECT COMMENT 'Optional description for this Collection.',
    "COLOR" CHARACTER(7) COMMENT 'Seven-character hex color for this Collection, including the preceding hash sign.' NOT NULL,
    "ARCHIVED" BOOLEAN DEFAULT FALSE COMMENT 'Whether this Collection has been archived and should be hidden from users.' NOT NULL,
    "LOCATION" CHARACTER VARYING(254) DEFAULT '/' COMMENT 'Directory-structure path of ancestor Collections. e.g. "/1/2/" means our Parent is Collection 2, and their parent is Collection 1.' NOT NULL,
    "PERSONAL_OWNER_ID" INTEGER COMMENT 'If set, this Collection is a personal Collection, for exclusive use of the User with this ID.',
    "SLUG" CHARACTER VARYING(254) COMMENT 'Sluggified version of the Collection name. Used only for display purposes in URL; not unique or indexed.' NOT NULL,
    "NAMESPACE" CHARACTER VARYING(254) COMMENT 'The namespace (hierachy) this Collection belongs to. NULL means the Collection is in the default namespace.',
    "AUTHORITY_LEVEL" CHARACTER VARYING(255) COMMENT 'Nullable column to incidate collection''s authority level. Initially values are "official" and nil.',
    "ENTITY_ID" CHARACTER(21) COMMENT 'Random NanoID tag for unique identity.',
    "CREATED_AT" TIMESTAMP WITH TIME ZONE DEFAULT LOCALTIMESTAMP COMMENT 'Timestamp of when this Collection was created.' NOT NULL,
    "TYPE" CHARACTER VARYING(256) COMMENT 'This is used to differentiate instance-analytics collections from all other collections.'
);      
ALTER TABLE "PUBLIC"."COLLECTION" ADD CONSTRAINT "PUBLIC"."PK_COLLECTION" PRIMARY KEY("ID");   
-- 4 +/- SELECT COUNT(*) FROM PUBLIC.COLLECTION;               
INSERT INTO "PUBLIC"."COLLECTION" VALUES
(1, 'Amit Sides''s Personal Collection', NULL, '#31698A', FALSE, '/', 1, 'amit_sides_s_personal_collection', NULL, NULL, NULL, TIMESTAMP WITH TIME ZONE '2022-11-21 20:57:59.152+00', NULL),
(2, 'Overview', NULL, '#509EE3', TRUE, '/1/', NULL, 'overview', NULL, NULL, NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:11.933317+00', NULL),
(3, 'Overview', NULL, '#509EE3', TRUE, '/1/2/', NULL, 'overview', NULL, NULL, NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:11.933317+00', NULL),
(4, 'Overview', NULL, '#509EE3', TRUE, '/', NULL, 'overview', NULL, NULL, NULL, TIMESTAMP WITH TIME ZONE '2023-04-03 20:00:11.933317+00', NULL); 
CREATE INDEX "PUBLIC"."IDX_COLLECTION_LOCATION" ON "PUBLIC"."COLLECTION"("LOCATION" NULLS FIRST);              
CREATE INDEX "PUBLIC"."IDX_COLLECTION_PERSONAL_OWNER_ID" ON "PUBLIC"."COLLECTION"("PERSONAL_OWNER_ID" NULLS FIRST);            
DROP TABLE IF EXISTS SYSTEM_LOB_STREAM;        
DROP ALIAS IF EXISTS SYSTEM_COMBINE_CLOB;      
DROP ALIAS IF EXISTS SYSTEM_COMBINE_BLOB;      
ALTER TABLE "PUBLIC"."METABASE_FIELD" ADD CONSTRAINT "PUBLIC"."IDX_UNIQ_FIELD_TABLE_ID_PARENT_ID_NAME" UNIQUE("TABLE_ID", "PARENT_ID", "NAME");
ALTER TABLE "PUBLIC"."METRIC_IMPORTANT_FIELD" ADD CONSTRAINT "PUBLIC"."UNIQUE_METRIC_IMPORTANT_FIELD_METRIC_ID_FIELD_ID" UNIQUE("METRIC_ID", "FIELD_ID");      
ALTER TABLE "PUBLIC"."ACTION" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_72C" UNIQUE("ENTITY_ID");    
ALTER TABLE "PUBLIC"."PULSE_CARD" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_A4" UNIQUE("ENTITY_ID"); 
ALTER TABLE "PUBLIC"."MODEL_INDEX_VALUE" ADD CONSTRAINT "PUBLIC"."UNIQUE_MODEL_INDEX_VALUE_MODEL_INDEX_ID_MODEL_PK" UNIQUE("MODEL_INDEX_ID", "MODEL_PK");      
ALTER TABLE "PUBLIC"."COLLECTION" ADD CONSTRAINT "PUBLIC"."UNIQUE_COLLECTION_PERSONAL_OWNER_ID" UNIQUE("PERSONAL_OWNER_ID");   
ALTER TABLE "PUBLIC"."BOOKMARK_ORDERING" ADD CONSTRAINT "PUBLIC"."UNIQUE_BOOKMARK_USER_ID_TYPE_ITEM_ID" UNIQUE("USER_ID", "TYPE", "ITEM_ID");  
ALTER TABLE "PUBLIC"."REPORT_CARDFAVORITE" ADD CONSTRAINT "PUBLIC"."IDX_UNIQUE_CARDFAVORITE_CARD_ID_OWNER_ID" UNIQUE("CARD_ID", "OWNER_ID");   
ALTER TABLE "PUBLIC"."METABASE_TABLE" ADD CONSTRAINT "PUBLIC"."IDX_UNIQ_TABLE_DB_ID_SCHEMA_NAME" UNIQUE("DB_ID", "SCHEMA", "NAME");            
ALTER TABLE "PUBLIC"."DATABASECHANGELOG" ADD CONSTRAINT "PUBLIC"."IDX_DATABASECHANGELOG_ID_AUTHOR_FILENAME" UNIQUE("ID", "AUTHOR", "FILENAME");
ALTER TABLE "PUBLIC"."PARAMETER_CARD" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_C3" UNIQUE("ENTITY_ID");             
ALTER TABLE "PUBLIC"."TIMELINE" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_B2" UNIQUE("ENTITY_ID");   
ALTER TABLE "PUBLIC"."DIMENSION" ADD CONSTRAINT "PUBLIC"."UNIQUE_DIMENSION_FIELD_ID" UNIQUE("FIELD_ID");       
ALTER TABLE "PUBLIC"."PERMISSIONS_GROUP" ADD CONSTRAINT "PUBLIC"."UNIQUE_PERMISSIONS_GROUP_NAME" UNIQUE("NAME");               
ALTER TABLE "PUBLIC"."DASHBOARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."UNIQUE_DASHBOARD_BOOKMARK_USER_ID_DASHBOARD_ID" UNIQUE("USER_ID", "DASHBOARD_ID");          
ALTER TABLE "PUBLIC"."SEGMENT" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_A" UNIQUE("ENTITY_ID");     
ALTER TABLE "PUBLIC"."PERSISTED_INFO" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_2" UNIQUE("CARD_ID");
ALTER TABLE "PUBLIC"."CORE_USER" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_4" UNIQUE("EMAIL");       
ALTER TABLE "PUBLIC"."PULSE_CHANNEL" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_5" UNIQUE("ENTITY_ID");               
ALTER TABLE "PUBLIC"."DIMENSION" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_6" UNIQUE("ENTITY_ID");   
ALTER TABLE "PUBLIC"."SANDBOXES" ADD CONSTRAINT "PUBLIC"."UNIQUE_GTAP_TABLE_ID_GROUP_ID" UNIQUE("TABLE_ID", "GROUP_ID");       
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_7" UNIQUE("PUBLIC_UUID");               
ALTER TABLE "PUBLIC"."METRIC" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_8" UNIQUE("ENTITY_ID");      
ALTER TABLE "PUBLIC"."REPORT_DASHBOARD" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_9" UNIQUE("PUBLIC_UUID");          
ALTER TABLE "PUBLIC"."DASHBOARD_TAB" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_90" UNIQUE("ENTITY_ID");              
ALTER TABLE "PUBLIC"."REPORT_DASHBOARDCARD" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_1" UNIQUE("ENTITY_ID");        
ALTER TABLE "PUBLIC"."BOOKMARK_ORDERING" ADD CONSTRAINT "PUBLIC"."UNIQUE_BOOKMARK_USER_ID_ORDERING" UNIQUE("USER_ID", "ORDERING");             
ALTER TABLE "PUBLIC"."COLLECTION" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_B" UNIQUE("ENTITY_ID");  
ALTER TABLE "PUBLIC"."PERMISSIONS" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_C" UNIQUE("GROUP_ID", "OBJECT");        
ALTER TABLE "PUBLIC"."PARAMETER_CARD" ADD CONSTRAINT "PUBLIC"."UNIQUE_PARAMETERIZED_OBJECT_CARD_PARAMETER" UNIQUE("PARAMETERIZED_OBJECT_ID", "PARAMETERIZED_OBJECT_TYPE", "PARAMETER_ID");     
ALTER TABLE "PUBLIC"."REPORT_DASHBOARD" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_97" UNIQUE("ENTITY_ID");           
ALTER TABLE "PUBLIC"."NATIVE_QUERY_SNIPPET" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_4B3" UNIQUE("ENTITY_ID");      
ALTER TABLE "PUBLIC"."LABEL" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_44" UNIQUE("SLUG");           
ALTER TABLE "PUBLIC"."CONNECTION_IMPERSONATIONS" ADD CONSTRAINT "PUBLIC"."CONN_IMPERSONATION_UNIQUE_GROUP_ID_DB_ID" UNIQUE("GROUP_ID", "DB_ID");               
ALTER TABLE "PUBLIC"."PULSE" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_48" UNIQUE("ENTITY_ID");      
ALTER TABLE "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP" ADD CONSTRAINT "PUBLIC"."UNIQUE_PERMISSIONS_GROUP_MEMBERSHIP_USER_ID_GROUP_ID" UNIQUE("USER_ID", "GROUP_ID");              
ALTER TABLE "PUBLIC"."NATIVE_QUERY_SNIPPET" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_4B" UNIQUE("NAME");            
ALTER TABLE "PUBLIC"."CARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."UNIQUE_CARD_BOOKMARK_USER_ID_CARD_ID" UNIQUE("USER_ID", "CARD_ID");              
ALTER TABLE "PUBLIC"."DASHBOARD_FAVORITE" ADD CONSTRAINT "PUBLIC"."UNIQUE_DASHBOARD_FAVORITE_USER_ID_DASHBOARD_ID" UNIQUE("USER_ID", "DASHBOARD_ID");          
ALTER TABLE "PUBLIC"."ACTION" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_72" UNIQUE("PUBLIC_UUID");   
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."CONSTRAINT_73" UNIQUE("ENTITY_ID");
ALTER TABLE "PUBLIC"."COLLECTION_BOOKMARK" ADD CONSTRAINT "PUBLIC"."UNIQUE_COLLECTION_BOOKMARK_USER_ID_COLLECTION_ID" UNIQUE("USER_ID", "COLLECTION_ID");      
ALTER TABLE "PUBLIC"."CARD_LABEL" ADD CONSTRAINT "PUBLIC"."UNIQUE_CARD_LABEL_CARD_ID_LABEL_ID" UNIQUE("CARD_ID", "LABEL_ID");  
ALTER TABLE "PUBLIC"."METABASE_FIELD" ADD CONSTRAINT "PUBLIC"."FK_FIELD_PARENT_REF_FIELD_ID" FOREIGN KEY("PARENT_ID") REFERENCES "PUBLIC"."METABASE_FIELD"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."PERSISTED_INFO" ADD CONSTRAINT "PUBLIC"."FK_PERSISTED_INFO_REF_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") NOCHECK;      
ALTER TABLE "PUBLIC"."CORE_SESSION" ADD CONSTRAINT "PUBLIC"."FK_SESSION_REF_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;   
ALTER TABLE "PUBLIC"."REPORT_DASHBOARD" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_MADE_PUBLIC_BY_ID" FOREIGN KEY("MADE_PUBLIC_BY_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;             
ALTER TABLE "PUBLIC"."TIMELINE_EVENT" ADD CONSTRAINT "PUBLIC"."FK_EVENT_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK; 
ALTER TABLE "PUBLIC"."DASHBOARDCARD_SERIES" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARDCARD_SERIES_REF_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;            
ALTER TABLE "PUBLIC"."HTTP_ACTION" ADD CONSTRAINT "PUBLIC"."FK_HTTP_ACTION_REF_ACTION_ID" FOREIGN KEY("ACTION_ID") REFERENCES "PUBLIC"."ACTION"("ID") ON DELETE CASCADE NOCHECK;               
ALTER TABLE "PUBLIC"."MODEL_INDEX" ADD CONSTRAINT "PUBLIC"."FK_MODEL_INDEX_MODEL_ID" FOREIGN KEY("MODEL_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;
ALTER TABLE "PUBLIC"."CONNECTION_IMPERSONATIONS" ADD CONSTRAINT "PUBLIC"."FK_CONN_IMPERSONATION_GROUP_ID" FOREIGN KEY("GROUP_ID") REFERENCES "PUBLIC"."PERMISSIONS_GROUP"("ID") ON DELETE CASCADE NOCHECK;     
ALTER TABLE "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP" ADD CONSTRAINT "PUBLIC"."FK_PERMISSIONS_GROUP_MEMBERSHIP_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;  
ALTER TABLE "PUBLIC"."SANDBOXES" ADD CONSTRAINT "PUBLIC"."FK_GTAP_GROUP_ID" FOREIGN KEY("GROUP_ID") REFERENCES "PUBLIC"."PERMISSIONS_GROUP"("ID") ON DELETE CASCADE NOCHECK;   
ALTER TABLE "PUBLIC"."QRTZ_BLOB_TRIGGERS" ADD CONSTRAINT "PUBLIC"."FK_QRTZ_BLOB_TRIGGERS_TRIGGERS" FOREIGN KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") NOCHECK;      
ALTER TABLE "PUBLIC"."REPORT_DASHBOARDCARD" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARDCARD_REF_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;   
ALTER TABLE "PUBLIC"."DASHBOARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_BOOKMARK_DASHBOARD_ID" FOREIGN KEY("DASHBOARD_ID") REFERENCES "PUBLIC"."REPORT_DASHBOARD"("ID") ON DELETE CASCADE NOCHECK;     
ALTER TABLE "PUBLIC"."PERSISTED_INFO" ADD CONSTRAINT "PUBLIC"."FK_PERSISTED_INFO_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;            
ALTER TABLE "PUBLIC"."PULSE_CARD" ADD CONSTRAINT "PUBLIC"."FK_PULSE_CARD_REF_PULSE_ID" FOREIGN KEY("PULSE_ID") REFERENCES "PUBLIC"."PULSE"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."DASHBOARDCARD_SERIES" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARDCARD_SERIES_REF_DASHBOARDCARD_ID" FOREIGN KEY("DASHBOARDCARD_ID") REFERENCES "PUBLIC"."REPORT_DASHBOARDCARD"("ID") ON DELETE CASCADE NOCHECK; 
ALTER TABLE "PUBLIC"."NATIVE_QUERY_SNIPPET" ADD CONSTRAINT "PUBLIC"."FK_SNIPPET_COLLECTION_ID" FOREIGN KEY("COLLECTION_ID") REFERENCES "PUBLIC"."COLLECTION"("ID") ON DELETE SET NULL NOCHECK; 
ALTER TABLE "PUBLIC"."REPORT_DASHBOARDCARD" ADD CONSTRAINT "PUBLIC"."FK_REPORT_DASHBOARDCARD_REF_ACTION_ID" FOREIGN KEY("ACTION_ID") REFERENCES "PUBLIC"."ACTION"("ID") ON DELETE CASCADE NOCHECK;             
ALTER TABLE "PUBLIC"."QRTZ_SIMPLE_TRIGGERS" ADD CONSTRAINT "PUBLIC"."FK_QRTZ_SIMPLE_TRIGGERS_TRIGGERS" FOREIGN KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") NOCHECK;  
ALTER TABLE "PUBLIC"."PULSE" ADD CONSTRAINT "PUBLIC"."FK_PULSE_COLLECTION_ID" FOREIGN KEY("COLLECTION_ID") REFERENCES "PUBLIC"."COLLECTION"("ID") ON DELETE SET NULL NOCHECK;  
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."FK_CARD_REF_USER_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."LOGIN_HISTORY" ADD CONSTRAINT "PUBLIC"."FK_LOGIN_HISTORY_SESSION_ID" FOREIGN KEY("SESSION_ID") REFERENCES "PUBLIC"."CORE_SESSION"("ID") ON DELETE SET NULL NOCHECK;      
ALTER TABLE "PUBLIC"."SANDBOXES" ADD CONSTRAINT "PUBLIC"."FK_SANDBOXES_REF_PERMISSIONS" FOREIGN KEY("PERMISSION_ID") REFERENCES "PUBLIC"."PERMISSIONS"("ID") ON DELETE CASCADE NOCHECK;        
ALTER TABLE "PUBLIC"."VIEW_LOG" ADD CONSTRAINT "PUBLIC"."FK_VIEW_LOG_REF_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."SANDBOXES" ADD CONSTRAINT "PUBLIC"."FK_GTAP_TABLE_ID" FOREIGN KEY("TABLE_ID") REFERENCES "PUBLIC"."METABASE_TABLE"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."REPORT_CARDFAVORITE" ADD CONSTRAINT "PUBLIC"."FK_CARDFAVORITE_REF_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;     
ALTER TABLE "PUBLIC"."TIMELINE_EVENT" ADD CONSTRAINT "PUBLIC"."FK_EVENTS_TIMELINE_ID" FOREIGN KEY("TIMELINE_ID") REFERENCES "PUBLIC"."TIMELINE"("ID") ON DELETE CASCADE NOCHECK;               
ALTER TABLE "PUBLIC"."IMPLICIT_ACTION" ADD CONSTRAINT "PUBLIC"."FK_IMPLICIT_ACTION_ACTION_ID" FOREIGN KEY("ACTION_ID") REFERENCES "PUBLIC"."ACTION"("ID") ON DELETE CASCADE NOCHECK;           
ALTER TABLE "PUBLIC"."MODEL_INDEX_VALUE" ADD CONSTRAINT "PUBLIC"."FK_MODEL_INDEX_VALUE_MODEL_ID" FOREIGN KEY("MODEL_INDEX_ID") REFERENCES "PUBLIC"."MODEL_INDEX"("ID") ON DELETE CASCADE NOCHECK;              
ALTER TABLE "PUBLIC"."PARAMETER_CARD" ADD CONSTRAINT "PUBLIC"."FK_PARAMETER_CARD_REF_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;        
ALTER TABLE "PUBLIC"."REPORT_DASHBOARDCARD" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARDCARD_REF_DASHBOARD_ID" FOREIGN KEY("DASHBOARD_ID") REFERENCES "PUBLIC"."REPORT_DASHBOARD"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."ACTION" ADD CONSTRAINT "PUBLIC"."FK_ACTION_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") NOCHECK;          
ALTER TABLE "PUBLIC"."QRTZ_TRIGGERS" ADD CONSTRAINT "PUBLIC"."FK_QRTZ_TRIGGERS_JOB_DETAILS" FOREIGN KEY("SCHED_NAME", "JOB_NAME", "JOB_GROUP") REFERENCES "PUBLIC"."QRTZ_JOB_DETAILS"("SCHED_NAME", "JOB_NAME", "JOB_GROUP") NOCHECK;          
ALTER TABLE "PUBLIC"."LOGIN_HISTORY" ADD CONSTRAINT "PUBLIC"."FK_LOGIN_HISTORY_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;
ALTER TABLE "PUBLIC"."CARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."FK_CARD_BOOKMARK_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;
ALTER TABLE "PUBLIC"."METRIC_IMPORTANT_FIELD" ADD CONSTRAINT "PUBLIC"."FK_METRIC_IMPORTANT_FIELD_METABASE_FIELD_ID" FOREIGN KEY("FIELD_ID") REFERENCES "PUBLIC"."METABASE_FIELD"("ID") ON DELETE CASCADE NOCHECK;              
ALTER TABLE "PUBLIC"."REPORT_DASHBOARD" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_REF_USER_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;          
ALTER TABLE "PUBLIC"."SANDBOXES" ADD CONSTRAINT "PUBLIC"."FK_GTAP_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;           
ALTER TABLE "PUBLIC"."APPLICATION_PERMISSIONS_REVISION" ADD CONSTRAINT "PUBLIC"."FK_GENERAL_PERMISSIONS_REVISION_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") NOCHECK;
ALTER TABLE "PUBLIC"."COLLECTION_BOOKMARK" ADD CONSTRAINT "PUBLIC"."FK_COLLECTION_BOOKMARK_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."PERSISTED_INFO" ADD CONSTRAINT "PUBLIC"."FK_PERSISTED_INFO_DATABASE_ID" FOREIGN KEY("DATABASE_ID") REFERENCES "PUBLIC"."METABASE_DATABASE"("ID") ON DELETE CASCADE NOCHECK;              
ALTER TABLE "PUBLIC"."SECRET" ADD CONSTRAINT "PUBLIC"."FK_SECRET_REF_USER_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") NOCHECK;         
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."FK_CARD_MADE_PUBLIC_BY_ID" FOREIGN KEY("MADE_PUBLIC_BY_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;       
ALTER TABLE "PUBLIC"."METABASE_FIELDVALUES" ADD CONSTRAINT "PUBLIC"."FK_FIELDVALUES_REF_FIELD_ID" FOREIGN KEY("FIELD_ID") REFERENCES "PUBLIC"."METABASE_FIELD"("ID") ON DELETE CASCADE NOCHECK;
ALTER TABLE "PUBLIC"."PERMISSIONS" ADD CONSTRAINT "PUBLIC"."FK_PERMISSIONS_GROUP_ID" FOREIGN KEY("GROUP_ID") REFERENCES "PUBLIC"."PERMISSIONS_GROUP"("ID") ON DELETE CASCADE NOCHECK;          
ALTER TABLE "PUBLIC"."PULSE_CARD" ADD CONSTRAINT "PUBLIC"."FK_PULSE_CARD_REF_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;
ALTER TABLE "PUBLIC"."TIMELINE" ADD CONSTRAINT "PUBLIC"."FK_TIMELINE_COLLECTION_ID" FOREIGN KEY("COLLECTION_ID") REFERENCES "PUBLIC"."COLLECTION"("ID") ON DELETE CASCADE NOCHECK;             
ALTER TABLE "PUBLIC"."COMPUTATION_JOB_RESULT" ADD CONSTRAINT "PUBLIC"."FK_COMPUTATION_RESULT_REF_JOB_ID" FOREIGN KEY("JOB_ID") REFERENCES "PUBLIC"."COMPUTATION_JOB"("ID") ON DELETE CASCADE NOCHECK;          
ALTER TABLE "PUBLIC"."COLLECTION_PERMISSION_GRAPH_REVISION" ADD CONSTRAINT "PUBLIC"."FK_COLLECTION_REVISION_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;   
ALTER TABLE "PUBLIC"."DASHBOARD_FAVORITE" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_FAVORITE_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."QRTZ_CRON_TRIGGERS" ADD CONSTRAINT "PUBLIC"."FK_QRTZ_CRON_TRIGGERS_TRIGGERS" FOREIGN KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") NOCHECK;      
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."FK_REPORT_CARD_REF_DATABASE_ID" FOREIGN KEY("DATABASE_ID") REFERENCES "PUBLIC"."METABASE_DATABASE"("ID") ON DELETE CASCADE NOCHECK;
ALTER TABLE "PUBLIC"."REVISION" ADD CONSTRAINT "PUBLIC"."FK_REVISION_REF_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."SEGMENT" ADD CONSTRAINT "PUBLIC"."FK_SEGMENT_REF_TABLE_ID" FOREIGN KEY("TABLE_ID") REFERENCES "PUBLIC"."METABASE_TABLE"("ID") ON DELETE CASCADE NOCHECK; 
ALTER TABLE "PUBLIC"."QRTZ_SIMPROP_TRIGGERS" ADD CONSTRAINT "PUBLIC"."FK_QRTZ_SIMPROP_TRIGGERS_TRIGGERS" FOREIGN KEY("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") REFERENCES "PUBLIC"."QRTZ_TRIGGERS"("SCHED_NAME", "TRIGGER_NAME", "TRIGGER_GROUP") NOCHECK;
ALTER TABLE "PUBLIC"."METABASE_DATABASE" ADD CONSTRAINT "PUBLIC"."FK_DATABASE_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE SET NULL NOCHECK;          
ALTER TABLE "PUBLIC"."METRIC" ADD CONSTRAINT "PUBLIC"."FK_METRIC_REF_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."PULSE_CHANNEL" ADD CONSTRAINT "PUBLIC"."FK_PULSE_CHANNEL_REF_PULSE_ID" FOREIGN KEY("PULSE_ID") REFERENCES "PUBLIC"."PULSE"("ID") ON DELETE CASCADE NOCHECK;              
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."FK_REPORT_CARD_REF_TABLE_ID" FOREIGN KEY("TABLE_ID") REFERENCES "PUBLIC"."METABASE_TABLE"("ID") ON DELETE CASCADE NOCHECK;         
ALTER TABLE "PUBLIC"."COLLECTION_BOOKMARK" ADD CONSTRAINT "PUBLIC"."FK_COLLECTION_BOOKMARK_COLLECTION_ID" FOREIGN KEY("COLLECTION_ID") REFERENCES "PUBLIC"."COLLECTION"("ID") ON DELETE CASCADE NOCHECK;       
ALTER TABLE "PUBLIC"."METRIC_IMPORTANT_FIELD" ADD CONSTRAINT "PUBLIC"."FK_METRIC_IMPORTANT_FIELD_METRIC_ID" FOREIGN KEY("METRIC_ID") REFERENCES "PUBLIC"."METRIC"("ID") ON DELETE CASCADE NOCHECK;             
ALTER TABLE "PUBLIC"."QUERY_ACTION" ADD CONSTRAINT "PUBLIC"."FK_QUERY_ACTION_DATABASE_ID" FOREIGN KEY("DATABASE_ID") REFERENCES "PUBLIC"."METABASE_DATABASE"("ID") ON DELETE CASCADE NOCHECK;  
ALTER TABLE "PUBLIC"."MODEL_INDEX" ADD CONSTRAINT "PUBLIC"."FK_MODEL_INDEX_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;              
ALTER TABLE "PUBLIC"."DIMENSION" ADD CONSTRAINT "PUBLIC"."FK_DIMENSION_DISPLAYFK_REF_FIELD_ID" FOREIGN KEY("HUMAN_READABLE_FIELD_ID") REFERENCES "PUBLIC"."METABASE_FIELD"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."REPORT_DASHBOARDCARD" ADD CONSTRAINT "PUBLIC"."FK_REPORT_DASHBOARDCARD_REF_DASHBOARD_TAB_ID" FOREIGN KEY("DASHBOARD_TAB_ID") REFERENCES "PUBLIC"."DASHBOARD_TAB"("ID") ON DELETE CASCADE NOCHECK;        
ALTER TABLE "PUBLIC"."METABASE_FIELD" ADD CONSTRAINT "PUBLIC"."FK_FIELD_REF_TABLE_ID" FOREIGN KEY("TABLE_ID") REFERENCES "PUBLIC"."METABASE_TABLE"("ID") ON DELETE CASCADE NOCHECK;            
ALTER TABLE "PUBLIC"."CARD_LABEL" ADD CONSTRAINT "PUBLIC"."FK_CARD_LABEL_REF_LABEL_ID" FOREIGN KEY("LABEL_ID") REFERENCES "PUBLIC"."LABEL"("ID") ON DELETE CASCADE NOCHECK;    
ALTER TABLE "PUBLIC"."PULSE" ADD CONSTRAINT "PUBLIC"."FK_PULSE_REF_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."ACTION" ADD CONSTRAINT "PUBLIC"."FK_ACTION_MADE_PUBLIC_BY_ID" FOREIGN KEY("MADE_PUBLIC_BY_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;          
ALTER TABLE "PUBLIC"."BOOKMARK_ORDERING" ADD CONSTRAINT "PUBLIC"."FK_BOOKMARK_ORDERING_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;        
ALTER TABLE "PUBLIC"."PULSE_CHANNEL_RECIPIENT" ADD CONSTRAINT "PUBLIC"."FK_PULSE_CHANNEL_RECIPIENT_REF_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;        
ALTER TABLE "PUBLIC"."DASHBOARD_TAB" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_TAB_REF_DASHBOARD_ID" FOREIGN KEY("DASHBOARD_ID") REFERENCES "PUBLIC"."REPORT_DASHBOARD"("ID") ON DELETE CASCADE NOCHECK;           
ALTER TABLE "PUBLIC"."QUERY_ACTION" ADD CONSTRAINT "PUBLIC"."FK_QUERY_ACTION_REF_ACTION_ID" FOREIGN KEY("ACTION_ID") REFERENCES "PUBLIC"."ACTION"("ID") ON DELETE CASCADE NOCHECK;             
ALTER TABLE "PUBLIC"."COMPUTATION_JOB" ADD CONSTRAINT "PUBLIC"."FK_COMPUTATION_JOB_REF_USER_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;     
ALTER TABLE "PUBLIC"."DASHBOARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_BOOKMARK_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."METRIC" ADD CONSTRAINT "PUBLIC"."FK_METRIC_REF_TABLE_ID" FOREIGN KEY("TABLE_ID") REFERENCES "PUBLIC"."METABASE_TABLE"("ID") ON DELETE CASCADE NOCHECK;   
ALTER TABLE "PUBLIC"."COLLECTION" ADD CONSTRAINT "PUBLIC"."FK_COLLECTION_PERSONAL_OWNER_ID" FOREIGN KEY("PERSONAL_OWNER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;  
ALTER TABLE "PUBLIC"."CARD_BOOKMARK" ADD CONSTRAINT "PUBLIC"."FK_CARD_BOOKMARK_DASHBOARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;         
ALTER TABLE "PUBLIC"."PULSE" ADD CONSTRAINT "PUBLIC"."FK_PULSE_REF_DASHBOARD_ID" FOREIGN KEY("DASHBOARD_ID") REFERENCES "PUBLIC"."REPORT_DASHBOARD"("ID") ON DELETE CASCADE NOCHECK;           
ALTER TABLE "PUBLIC"."REPORT_CARDFAVORITE" ADD CONSTRAINT "PUBLIC"."FK_CARDFAVORITE_REF_USER_ID" FOREIGN KEY("OWNER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."DASHBOARD_FAVORITE" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_FAVORITE_DASHBOARD_ID" FOREIGN KEY("DASHBOARD_ID") REFERENCES "PUBLIC"."REPORT_DASHBOARD"("ID") ON DELETE CASCADE NOCHECK;     
ALTER TABLE "PUBLIC"."PULSE_CARD" ADD CONSTRAINT "PUBLIC"."FK_PULSE_CARD_REF_PULSE_CARD_ID" FOREIGN KEY("DASHBOARD_CARD_ID") REFERENCES "PUBLIC"."REPORT_DASHBOARDCARD"("ID") ON DELETE CASCADE NOCHECK;       
ALTER TABLE "PUBLIC"."REPORT_DASHBOARD" ADD CONSTRAINT "PUBLIC"."FK_DASHBOARD_COLLECTION_ID" FOREIGN KEY("COLLECTION_ID") REFERENCES "PUBLIC"."COLLECTION"("ID") ON DELETE SET NULL NOCHECK;   
ALTER TABLE "PUBLIC"."REPORT_CARD" ADD CONSTRAINT "PUBLIC"."FK_CARD_COLLECTION_ID" FOREIGN KEY("COLLECTION_ID") REFERENCES "PUBLIC"."COLLECTION"("ID") ON DELETE SET NULL NOCHECK;             
ALTER TABLE "PUBLIC"."ACTION" ADD CONSTRAINT "PUBLIC"."FK_ACTION_MODEL_ID" FOREIGN KEY("MODEL_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;          
ALTER TABLE "PUBLIC"."CARD_LABEL" ADD CONSTRAINT "PUBLIC"."FK_CARD_LABEL_REF_CARD_ID" FOREIGN KEY("CARD_ID") REFERENCES "PUBLIC"."REPORT_CARD"("ID") ON DELETE CASCADE NOCHECK;
ALTER TABLE "PUBLIC"."METABASE_TABLE" ADD CONSTRAINT "PUBLIC"."FK_TABLE_REF_DATABASE_ID" FOREIGN KEY("DB_ID") REFERENCES "PUBLIC"."METABASE_DATABASE"("ID") ON DELETE CASCADE NOCHECK;         
ALTER TABLE "PUBLIC"."DIMENSION" ADD CONSTRAINT "PUBLIC"."FK_DIMENSION_REF_FIELD_ID" FOREIGN KEY("FIELD_ID") REFERENCES "PUBLIC"."METABASE_FIELD"("ID") ON DELETE CASCADE NOCHECK;             
ALTER TABLE "PUBLIC"."ACTIVITY" ADD CONSTRAINT "PUBLIC"."FK_ACTIVITY_REF_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;      
ALTER TABLE "PUBLIC"."PERMISSIONS_GROUP_MEMBERSHIP" ADD CONSTRAINT "PUBLIC"."FK_PERMISSIONS_GROUP_GROUP_ID" FOREIGN KEY("GROUP_ID") REFERENCES "PUBLIC"."PERMISSIONS_GROUP"("ID") ON DELETE CASCADE NOCHECK;   
ALTER TABLE "PUBLIC"."PERMISSIONS_REVISION" ADD CONSTRAINT "PUBLIC"."FK_PERMISSIONS_REVISION_USER_ID" FOREIGN KEY("USER_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;  
ALTER TABLE "PUBLIC"."CONNECTION_IMPERSONATIONS" ADD CONSTRAINT "PUBLIC"."FK_CONN_IMPERSONATION_DB_ID" FOREIGN KEY("DB_ID") REFERENCES "PUBLIC"."METABASE_DATABASE"("ID") ON DELETE CASCADE NOCHECK;           
ALTER TABLE "PUBLIC"."NATIVE_QUERY_SNIPPET" ADD CONSTRAINT "PUBLIC"."FK_SNIPPET_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;         
ALTER TABLE "PUBLIC"."PULSE_CHANNEL_RECIPIENT" ADD CONSTRAINT "PUBLIC"."FK_PULSE_CHANNEL_RECIPIENT_REF_PULSE_CHANNEL_ID" FOREIGN KEY("PULSE_CHANNEL_ID") REFERENCES "PUBLIC"."PULSE_CHANNEL"("ID") ON DELETE CASCADE NOCHECK;  
ALTER TABLE "PUBLIC"."SEGMENT" ADD CONSTRAINT "PUBLIC"."FK_SEGMENT_REF_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;  
ALTER TABLE "PUBLIC"."TIMELINE" ADD CONSTRAINT "PUBLIC"."FK_TIMELINE_CREATOR_ID" FOREIGN KEY("CREATOR_ID") REFERENCES "PUBLIC"."CORE_USER"("ID") ON DELETE CASCADE NOCHECK;    
